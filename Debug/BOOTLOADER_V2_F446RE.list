
BOOTLOADER_V2_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a7c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b5c  08005c4c  08005c4c  00006c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067a8  080067a8  00008070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080067a8  080067a8  000077a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067b0  080067b0  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067b0  080067b0  000077b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067b4  080067b4  000077b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080067b8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  20000070  08006828  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08006828  000084cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecf9  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cef  00000000  00000000  00016d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00019a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac8  00000000  00000000  0001a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023df0  00000000  00000000  0001b368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e38  00000000  00000000  0003f158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce93a  00000000  00000000  00050f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f8ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000425c  00000000  00000000  0011f910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00123b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005c34 	.word	0x08005c34

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005c34 	.word	0x08005c34

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b085      	sub	sp, #20
 80005e0:	af02      	add	r7, sp, #8
 80005e2:	4604      	mov	r4, r0
 80005e4:	4608      	mov	r0, r1
 80005e6:	4611      	mov	r1, r2
 80005e8:	461a      	mov	r2, r3
 80005ea:	4623      	mov	r3, r4
 80005ec:	80fb      	strh	r3, [r7, #6]
 80005ee:	4603      	mov	r3, r0
 80005f0:	80bb      	strh	r3, [r7, #4]
 80005f2:	460b      	mov	r3, r1
 80005f4:	807b      	strh	r3, [r7, #2]
 80005f6:	4613      	mov	r3, r2
 80005f8:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80005fa:	88f8      	ldrh	r0, [r7, #6]
 80005fc:	88b9      	ldrh	r1, [r7, #4]
 80005fe:	887a      	ldrh	r2, [r7, #2]
 8000600:	883c      	ldrh	r4, [r7, #0]
 8000602:	8b3b      	ldrh	r3, [r7, #24]
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	4623      	mov	r3, r4
 8000608:	f000 fa88 	bl	8000b1c <ST7735_FillRectangle>
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bd90      	pop	{r4, r7, pc}

08000614 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af02      	add	r7, sp, #8
 800061a:	4603      	mov	r3, r0
 800061c:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800061e:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <fillScreen+0x2c>)
 8000620:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000624:	4b07      	ldr	r3, [pc, #28]	@ (8000644 <fillScreen+0x30>)
 8000626:	f9b3 1000 	ldrsh.w	r1, [r3]
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	460b      	mov	r3, r1
 8000630:	2100      	movs	r1, #0
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff ffd2 	bl	80005dc <fillRect>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000008c 	.word	0x2000008c
 8000644:	2000008e 	.word	0x2000008e

08000648 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2102      	movs	r1, #2
 8000650:	4802      	ldr	r0, [pc, #8]	@ (800065c <ST7735_Select+0x14>)
 8000652:	f002 fb2b 	bl	8002cac <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40020000 	.word	0x40020000

08000660 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2102      	movs	r1, #2
 8000668:	4802      	ldr	r0, [pc, #8]	@ (8000674 <ST7735_Unselect+0x14>)
 800066a:	f002 fb1f 	bl	8002cac <HAL_GPIO_WritePin>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40020000 	.word	0x40020000

08000678 <ST7735_Reset>:

void ST7735_Reset()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	2110      	movs	r1, #16
 8000680:	4806      	ldr	r0, [pc, #24]	@ (800069c <ST7735_Reset+0x24>)
 8000682:	f002 fb13 	bl	8002cac <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000686:	2005      	movs	r0, #5
 8000688:	f001 fd30 	bl	80020ec <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2110      	movs	r1, #16
 8000690:	4802      	ldr	r0, [pc, #8]	@ (800069c <ST7735_Reset+0x24>)
 8000692:	f002 fb0b 	bl	8002cac <HAL_GPIO_WritePin>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40020000 	.word	0x40020000

080006a0 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2110      	movs	r1, #16
 80006ae:	4807      	ldr	r0, [pc, #28]	@ (80006cc <ST7735_WriteCommand+0x2c>)
 80006b0:	f002 fafc 	bl	8002cac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80006b4:	1df9      	adds	r1, r7, #7
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	2201      	movs	r2, #1
 80006bc:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <ST7735_WriteCommand+0x30>)
 80006be:	f003 fa42 	bl	8003b46 <HAL_SPI_Transmit>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40020800 	.word	0x40020800
 80006d0:	20000228 	.word	0x20000228

080006d4 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2110      	movs	r1, #16
 80006e2:	4807      	ldr	r0, [pc, #28]	@ (8000700 <ST7735_WriteData+0x2c>)
 80006e4:	f002 fae2 	bl	8002cac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	6879      	ldr	r1, [r7, #4]
 80006f2:	4804      	ldr	r0, [pc, #16]	@ (8000704 <ST7735_WriteData+0x30>)
 80006f4:	f003 fa27 	bl	8003b46 <HAL_SPI_Transmit>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40020800 	.word	0x40020800
 8000704:	20000228 	.word	0x20000228

08000708 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	607a      	str	r2, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800071a:	e034      	b.n	8000786 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	1c5a      	adds	r2, r3, #1
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000726:	7afb      	ldrb	r3, [r7, #11]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ffb9 	bl	80006a0 <ST7735_WriteCommand>

        numArgs = *addr++;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000738:	7abb      	ldrb	r3, [r7, #10]
 800073a:	b29b      	uxth	r3, r3
 800073c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000740:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000742:	7abb      	ldrb	r3, [r7, #10]
 8000744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000748:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800074a:	7abb      	ldrb	r3, [r7, #10]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d008      	beq.n	8000762 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000750:	7abb      	ldrb	r3, [r7, #10]
 8000752:	4619      	mov	r1, r3
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ffbd 	bl	80006d4 <ST7735_WriteData>
            addr += numArgs;
 800075a:	7abb      	ldrb	r3, [r7, #10]
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000762:	89bb      	ldrh	r3, [r7, #12]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d00e      	beq.n	8000786 <DisplayInit+0x7e>
            ms = *addr++;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	1c5a      	adds	r2, r3, #1
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000772:	89bb      	ldrh	r3, [r7, #12]
 8000774:	2bff      	cmp	r3, #255	@ 0xff
 8000776:	d102      	bne.n	800077e <DisplayInit+0x76>
 8000778:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800077c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800077e:	89bb      	ldrh	r3, [r7, #12]
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fcb3 	bl	80020ec <HAL_Delay>
    while(numCommands--) {
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	1e5a      	subs	r2, r3, #1
 800078a:	73fa      	strb	r2, [r7, #15]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d1c5      	bne.n	800071c <DisplayInit+0x14>
        }
    }
}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4604      	mov	r4, r0
 80007a4:	4608      	mov	r0, r1
 80007a6:	4611      	mov	r1, r2
 80007a8:	461a      	mov	r2, r3
 80007aa:	4623      	mov	r3, r4
 80007ac:	71fb      	strb	r3, [r7, #7]
 80007ae:	4603      	mov	r3, r0
 80007b0:	71bb      	strb	r3, [r7, #6]
 80007b2:	460b      	mov	r3, r1
 80007b4:	717b      	strb	r3, [r7, #5]
 80007b6:	4613      	mov	r3, r2
 80007b8:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80007ba:	202a      	movs	r0, #42	@ 0x2a
 80007bc:	f7ff ff70 	bl	80006a0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80007c0:	2300      	movs	r3, #0
 80007c2:	733b      	strb	r3, [r7, #12]
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <ST7735_SetAddressWindow+0x88>)
 80007c6:	781a      	ldrb	r2, [r3, #0]
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	4413      	add	r3, r2
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	737b      	strb	r3, [r7, #13]
 80007d0:	2300      	movs	r3, #0
 80007d2:	73bb      	strb	r3, [r7, #14]
 80007d4:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <ST7735_SetAddressWindow+0x88>)
 80007d6:	781a      	ldrb	r2, [r3, #0]
 80007d8:	797b      	ldrb	r3, [r7, #5]
 80007da:	4413      	add	r3, r2
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2104      	movs	r1, #4
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff74 	bl	80006d4 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80007ec:	202b      	movs	r0, #43	@ 0x2b
 80007ee:	f7ff ff57 	bl	80006a0 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <ST7735_SetAddressWindow+0x8c>)
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	4413      	add	r3, r2
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 80007fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <ST7735_SetAddressWindow+0x8c>)
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	793b      	ldrb	r3, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	b2db      	uxtb	r3, r3
 8000808:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2104      	movs	r1, #4
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff5f 	bl	80006d4 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000816:	202c      	movs	r0, #44	@ 0x2c
 8000818:	f7ff ff42 	bl	80006a0 <ST7735_WriteCommand>
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	20000093 	.word	0x20000093
 8000828:	20000094 	.word	0x20000094

0800082c <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000836:	f7ff ff07 	bl	8000648 <ST7735_Select>
    ST7735_Reset();
 800083a:	f7ff ff1d 	bl	8000678 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800083e:	480c      	ldr	r0, [pc, #48]	@ (8000870 <ST7735_Init+0x44>)
 8000840:	f7ff ff62 	bl	8000708 <DisplayInit>
    DisplayInit(init_cmds2);
 8000844:	480b      	ldr	r0, [pc, #44]	@ (8000874 <ST7735_Init+0x48>)
 8000846:	f7ff ff5f 	bl	8000708 <DisplayInit>
    DisplayInit(init_cmds3);
 800084a:	480b      	ldr	r0, [pc, #44]	@ (8000878 <ST7735_Init+0x4c>)
 800084c:	f7ff ff5c 	bl	8000708 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8000850:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <ST7735_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8000856:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <ST7735_Init+0x54>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f810 	bl	8000884 <ST7735_SetRotation>
    ST7735_Unselect();
 8000864:	f7ff fefc 	bl	8000660 <ST7735_Unselect>

}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	08005f7c 	.word	0x08005f7c
 8000874:	08005fb4 	.word	0x08005fb4
 8000878:	08005fc4 	.word	0x08005fc4
 800087c:	20000091 	.word	0x20000091
 8000880:	20000092 	.word	0x20000092

08000884 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f003 0303 	and.w	r3, r3, #3
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4b33      	ldr	r3, [pc, #204]	@ (8000968 <ST7735_SetRotation+0xe4>)
 800089c:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800089e:	4b32      	ldr	r3, [pc, #200]	@ (8000968 <ST7735_SetRotation+0xe4>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	d84e      	bhi.n	8000944 <ST7735_SetRotation+0xc0>
 80008a6:	a201      	add	r2, pc, #4	@ (adr r2, 80008ac <ST7735_SetRotation+0x28>)
 80008a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ac:	080008bd 	.word	0x080008bd
 80008b0:	080008df 	.word	0x080008df
 80008b4:	08000901 	.word	0x08000901
 80008b8:	08000923 	.word	0x08000923
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80008bc:	23c0      	movs	r3, #192	@ 0xc0
 80008be:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80008c0:	4b2a      	ldr	r3, [pc, #168]	@ (800096c <ST7735_SetRotation+0xe8>)
 80008c2:	22a0      	movs	r2, #160	@ 0xa0
 80008c4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80008c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000970 <ST7735_SetRotation+0xec>)
 80008c8:	2280      	movs	r2, #128	@ 0x80
 80008ca:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80008cc:	4b29      	ldr	r3, [pc, #164]	@ (8000974 <ST7735_SetRotation+0xf0>)
 80008ce:	781a      	ldrb	r2, [r3, #0]
 80008d0:	4b29      	ldr	r3, [pc, #164]	@ (8000978 <ST7735_SetRotation+0xf4>)
 80008d2:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80008d4:	4b29      	ldr	r3, [pc, #164]	@ (800097c <ST7735_SetRotation+0xf8>)
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	4b29      	ldr	r3, [pc, #164]	@ (8000980 <ST7735_SetRotation+0xfc>)
 80008da:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80008dc:	e032      	b.n	8000944 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80008de:	23a0      	movs	r3, #160	@ 0xa0
 80008e0:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80008e2:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <ST7735_SetRotation+0xec>)
 80008e4:	22a0      	movs	r2, #160	@ 0xa0
 80008e6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80008e8:	4b20      	ldr	r3, [pc, #128]	@ (800096c <ST7735_SetRotation+0xe8>)
 80008ea:	2280      	movs	r2, #128	@ 0x80
 80008ec:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80008ee:	4b21      	ldr	r3, [pc, #132]	@ (8000974 <ST7735_SetRotation+0xf0>)
 80008f0:	781a      	ldrb	r2, [r3, #0]
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <ST7735_SetRotation+0xfc>)
 80008f4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80008f6:	4b21      	ldr	r3, [pc, #132]	@ (800097c <ST7735_SetRotation+0xf8>)
 80008f8:	781a      	ldrb	r2, [r3, #0]
 80008fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <ST7735_SetRotation+0xf4>)
 80008fc:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80008fe:	e021      	b.n	8000944 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000900:	2300      	movs	r3, #0
 8000902:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000904:	4b19      	ldr	r3, [pc, #100]	@ (800096c <ST7735_SetRotation+0xe8>)
 8000906:	22a0      	movs	r2, #160	@ 0xa0
 8000908:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800090a:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <ST7735_SetRotation+0xec>)
 800090c:	2280      	movs	r2, #128	@ 0x80
 800090e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000910:	4b18      	ldr	r3, [pc, #96]	@ (8000974 <ST7735_SetRotation+0xf0>)
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <ST7735_SetRotation+0xf4>)
 8000916:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000918:	4b18      	ldr	r3, [pc, #96]	@ (800097c <ST7735_SetRotation+0xf8>)
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <ST7735_SetRotation+0xfc>)
 800091e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000920:	e010      	b.n	8000944 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000922:	2360      	movs	r3, #96	@ 0x60
 8000924:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <ST7735_SetRotation+0xec>)
 8000928:	22a0      	movs	r2, #160	@ 0xa0
 800092a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <ST7735_SetRotation+0xe8>)
 800092e:	2280      	movs	r2, #128	@ 0x80
 8000930:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <ST7735_SetRotation+0xf0>)
 8000934:	781a      	ldrb	r2, [r3, #0]
 8000936:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <ST7735_SetRotation+0xfc>)
 8000938:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <ST7735_SetRotation+0xf8>)
 800093c:	781a      	ldrb	r2, [r3, #0]
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <ST7735_SetRotation+0xf4>)
 8000940:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000942:	bf00      	nop
  }
  ST7735_Select();
 8000944:	f7ff fe80 	bl	8000648 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000948:	2036      	movs	r0, #54	@ 0x36
 800094a:	f7ff fea9 	bl	80006a0 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800094e:	f107 030f 	add.w	r3, r7, #15
 8000952:	2101      	movs	r1, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff febd 	bl	80006d4 <ST7735_WriteData>
  ST7735_Unselect();
 800095a:	f7ff fe81 	bl	8000660 <ST7735_Unselect>
}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000090 	.word	0x20000090
 800096c:	2000008e 	.word	0x2000008e
 8000970:	2000008c 	.word	0x2000008c
 8000974:	20000091 	.word	0x20000091
 8000978:	20000093 	.word	0x20000093
 800097c:	20000092 	.word	0x20000092
 8000980:	20000094 	.word	0x20000094

08000984 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000984:	b082      	sub	sp, #8
 8000986:	b590      	push	{r4, r7, lr}
 8000988:	b089      	sub	sp, #36	@ 0x24
 800098a:	af00      	add	r7, sp, #0
 800098c:	637b      	str	r3, [r7, #52]	@ 0x34
 800098e:	4603      	mov	r3, r0
 8000990:	80fb      	strh	r3, [r7, #6]
 8000992:	460b      	mov	r3, r1
 8000994:	80bb      	strh	r3, [r7, #4]
 8000996:	4613      	mov	r3, r2
 8000998:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	b2d8      	uxtb	r0, r3
 800099e:	88bb      	ldrh	r3, [r7, #4]
 80009a0:	b2d9      	uxtb	r1, r3
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80009aa:	4413      	add	r3, r2
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	3b01      	subs	r3, #1
 80009b0:	b2dc      	uxtb	r4, r3
 80009b2:	88bb      	ldrh	r3, [r7, #4]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80009ba:	4413      	add	r3, r2
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	3b01      	subs	r3, #1
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4622      	mov	r2, r4
 80009c4:	f7ff feea 	bl	800079c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
 80009cc:	e043      	b.n	8000a56 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80009ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	3b20      	subs	r3, #32
 80009d4:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80009d8:	fb01 f303 	mul.w	r3, r1, r3
 80009dc:	4619      	mov	r1, r3
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	440b      	add	r3, r1
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
 80009ee:	e029      	b.n	8000a44 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80009f0:	697a      	ldr	r2, [r7, #20]
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00e      	beq.n	8000a1e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000a00:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000a02:	0a1b      	lsrs	r3, r3, #8
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	743b      	strb	r3, [r7, #16]
 8000a0a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	2102      	movs	r1, #2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fe5c 	bl	80006d4 <ST7735_WriteData>
 8000a1c:	e00f      	b.n	8000a3e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000a1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000a22:	0a1b      	lsrs	r3, r3, #8
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	733b      	strb	r3, [r7, #12]
 8000a2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	2102      	movs	r1, #2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fe4b 	bl	80006d4 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	3301      	adds	r3, #1
 8000a42:	61bb      	str	r3, [r7, #24]
 8000a44:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000a48:	461a      	mov	r2, r3
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d3cf      	bcc.n	80009f0 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	3301      	adds	r3, #1
 8000a54:	61fb      	str	r3, [r7, #28]
 8000a56:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d3b5      	bcc.n	80009ce <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	3724      	adds	r7, #36	@ 0x24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000a6e:	b002      	add	sp, #8
 8000a70:	4770      	bx	lr
	...

08000a74 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a74:	b082      	sub	sp, #8
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af04      	add	r7, sp, #16
 8000a7c:	603a      	str	r2, [r7, #0]
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	4603      	mov	r3, r0
 8000a82:	80fb      	strh	r3, [r7, #6]
 8000a84:	460b      	mov	r3, r1
 8000a86:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000a88:	f7ff fdde 	bl	8000648 <ST7735_Select>

    while(*str) {
 8000a8c:	e033      	b.n	8000af6 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	7d3a      	ldrb	r2, [r7, #20]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a1f      	ldr	r2, [pc, #124]	@ (8000b14 <ST7735_WriteString+0xa0>)
 8000a96:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	db16      	blt.n	8000acc <ST7735_WriteString+0x58>
            x = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000aa2:	7d7b      	ldrb	r3, [r7, #21]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	88bb      	ldrh	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000aac:	88bb      	ldrh	r3, [r7, #4]
 8000aae:	7d7a      	ldrb	r2, [r7, #21]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a19      	ldr	r2, [pc, #100]	@ (8000b18 <ST7735_WriteString+0xa4>)
 8000ab4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	da21      	bge.n	8000b00 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b20      	cmp	r3, #32
 8000ac2:	d103      	bne.n	8000acc <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	603b      	str	r3, [r7, #0]
                continue;
 8000aca:	e014      	b.n	8000af6 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	88b9      	ldrh	r1, [r7, #4]
 8000ad2:	88f8      	ldrh	r0, [r7, #6]
 8000ad4:	8c3b      	ldrh	r3, [r7, #32]
 8000ad6:	9302      	str	r3, [sp, #8]
 8000ad8:	8bbb      	ldrh	r3, [r7, #28]
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	f7ff ff4f 	bl	8000984 <ST7735_WriteChar>
        x += font.width;
 8000ae6:	7d3b      	ldrb	r3, [r7, #20]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	4413      	add	r3, r2
 8000aee:	80fb      	strh	r3, [r7, #6]
        str++;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1c7      	bne.n	8000a8e <ST7735_WriteString+0x1a>
 8000afe:	e000      	b.n	8000b02 <ST7735_WriteString+0x8e>
                break;
 8000b00:	bf00      	nop
    }

    ST7735_Unselect();
 8000b02:	f7ff fdad 	bl	8000660 <ST7735_Unselect>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b10:	b002      	add	sp, #8
 8000b12:	4770      	bx	lr
 8000b14:	2000008c 	.word	0x2000008c
 8000b18:	2000008e 	.word	0x2000008e

08000b1c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4604      	mov	r4, r0
 8000b24:	4608      	mov	r0, r1
 8000b26:	4611      	mov	r1, r2
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4623      	mov	r3, r4
 8000b2c:	80fb      	strh	r3, [r7, #6]
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80bb      	strh	r3, [r7, #4]
 8000b32:	460b      	mov	r3, r1
 8000b34:	807b      	strh	r3, [r7, #2]
 8000b36:	4613      	mov	r3, r2
 8000b38:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	4a37      	ldr	r2, [pc, #220]	@ (8000c1c <ST7735_FillRectangle+0x100>)
 8000b3e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b42:	4293      	cmp	r3, r2
 8000b44:	da66      	bge.n	8000c14 <ST7735_FillRectangle+0xf8>
 8000b46:	88bb      	ldrh	r3, [r7, #4]
 8000b48:	4a35      	ldr	r2, [pc, #212]	@ (8000c20 <ST7735_FillRectangle+0x104>)
 8000b4a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	da60      	bge.n	8000c14 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8000b52:	88fa      	ldrh	r2, [r7, #6]
 8000b54:	887b      	ldrh	r3, [r7, #2]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a30      	ldr	r2, [pc, #192]	@ (8000c1c <ST7735_FillRectangle+0x100>)
 8000b5a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	dd06      	ble.n	8000b70 <ST7735_FillRectangle+0x54>
 8000b62:	4b2e      	ldr	r3, [pc, #184]	@ (8000c1c <ST7735_FillRectangle+0x100>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000b70:	88ba      	ldrh	r2, [r7, #4]
 8000b72:	883b      	ldrh	r3, [r7, #0]
 8000b74:	4413      	add	r3, r2
 8000b76:	4a2a      	ldr	r2, [pc, #168]	@ (8000c20 <ST7735_FillRectangle+0x104>)
 8000b78:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	dd06      	ble.n	8000b8e <ST7735_FillRectangle+0x72>
 8000b80:	4b27      	ldr	r3, [pc, #156]	@ (8000c20 <ST7735_FillRectangle+0x104>)
 8000b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000b8e:	f7ff fd5b 	bl	8000648 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	b2d8      	uxtb	r0, r3
 8000b96:	88bb      	ldrh	r3, [r7, #4]
 8000b98:	b2d9      	uxtb	r1, r3
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	887b      	ldrh	r3, [r7, #2]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	4413      	add	r3, r2
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	b2dc      	uxtb	r4, r3
 8000baa:	88bb      	ldrh	r3, [r7, #4]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	883b      	ldrh	r3, [r7, #0]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4413      	add	r3, r2
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4622      	mov	r2, r4
 8000bbc:	f7ff fdee 	bl	800079c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000bc0:	8c3b      	ldrh	r3, [r7, #32]
 8000bc2:	0a1b      	lsrs	r3, r3, #8
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	733b      	strb	r3, [r7, #12]
 8000bca:	8c3b      	ldrh	r3, [r7, #32]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	4813      	ldr	r0, [pc, #76]	@ (8000c24 <ST7735_FillRectangle+0x108>)
 8000bd6:	f002 f869 	bl	8002cac <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000bda:	883b      	ldrh	r3, [r7, #0]
 8000bdc:	80bb      	strh	r3, [r7, #4]
 8000bde:	e013      	b.n	8000c08 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	80fb      	strh	r3, [r7, #6]
 8000be4:	e00a      	b.n	8000bfc <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000be6:	f107 010c 	add.w	r1, r7, #12
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	2202      	movs	r2, #2
 8000bf0:	480d      	ldr	r0, [pc, #52]	@ (8000c28 <ST7735_FillRectangle+0x10c>)
 8000bf2:	f002 ffa8 	bl	8003b46 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	80fb      	strh	r3, [r7, #6]
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1f1      	bne.n	8000be6 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8000c02:	88bb      	ldrh	r3, [r7, #4]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	80bb      	strh	r3, [r7, #4]
 8000c08:	88bb      	ldrh	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1e8      	bne.n	8000be0 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8000c0e:	f7ff fd27 	bl	8000660 <ST7735_Unselect>
 8000c12:	e000      	b.n	8000c16 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8000c14:	bf00      	nop
}
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd90      	pop	{r4, r7, pc}
 8000c1c:	2000008c 	.word	0x2000008c
 8000c20:	2000008e 	.word	0x2000008e
 8000c24:	40020800 	.word	0x40020800
 8000c28:	20000228 	.word	0x20000228

08000c2c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c30:	f3bf 8f4f 	dsb	sy
}
 8000c34:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <__NVIC_SystemReset+0x24>)
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c3e:	4904      	ldr	r1, [pc, #16]	@ (8000c50 <__NVIC_SystemReset+0x24>)
 8000c40:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <__NVIC_SystemReset+0x28>)
 8000c42:	4313      	orrs	r3, r2
 8000c44:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c46:	f3bf 8f4f 	dsb	sy
}
 8000c4a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <__NVIC_SystemReset+0x20>
 8000c50:	e000ed00 	.word	0xe000ed00
 8000c54:	05fa0004 	.word	0x05fa0004

08000c58 <bootloader_uart_read_data>:

uint8_t bl_rx_buffer[BL_RX_LEN];
UART_HandleTypeDef *C_UART = NULL;

void  bootloader_uart_read_data(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
    uint8_t rcv_len=0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bl_rx_buffer,0,200);
 8000c62:	22c8      	movs	r2, #200	@ 0xc8
 8000c64:	2100      	movs	r1, #0
 8000c66:	481e      	ldr	r0, [pc, #120]	@ (8000ce0 <bootloader_uart_read_data+0x88>)
 8000c68:	f004 f890 	bl	8004d8c <memset>
        HAL_UART_Receive(C_UART,bl_rx_buffer,1,HAL_MAX_DELAY);
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <bootloader_uart_read_data+0x8c>)
 8000c6e:	6818      	ldr	r0, [r3, #0]
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	2201      	movs	r2, #1
 8000c76:	491a      	ldr	r1, [pc, #104]	@ (8000ce0 <bootloader_uart_read_data+0x88>)
 8000c78:	f003 fa61 	bl	800413e <HAL_UART_Receive>
		rcv_len= bl_rx_buffer[0];
 8000c7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <bootloader_uart_read_data+0x88>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART,&bl_rx_buffer[1],rcv_len,HAL_MAX_DELAY);
 8000c82:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <bootloader_uart_read_data+0x8c>)
 8000c84:	6818      	ldr	r0, [r3, #0]
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	4916      	ldr	r1, [pc, #88]	@ (8000ce8 <bootloader_uart_read_data+0x90>)
 8000c90:	f003 fa55 	bl	800413e <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <bootloader_uart_read_data+0x88>)
 8000c96:	785b      	ldrb	r3, [r3, #1]
 8000c98:	3b51      	subs	r3, #81	@ 0x51
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d81a      	bhi.n	8000cd4 <bootloader_uart_read_data+0x7c>
 8000c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8000ca4 <bootloader_uart_read_data+0x4c>)
 8000ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca4:	08000cb5 	.word	0x08000cb5
 8000ca8:	08000cbd 	.word	0x08000cbd
 8000cac:	08000cc5 	.word	0x08000cc5
 8000cb0:	08000ccd 	.word	0x08000ccd
		{
            case BL_GET_CID:
                bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000cb4:	480a      	ldr	r0, [pc, #40]	@ (8000ce0 <bootloader_uart_read_data+0x88>)
 8000cb6:	f000 f8e1 	bl	8000e7c <bootloader_handle_getcid_cmd>
                break;
 8000cba:	e00f      	b.n	8000cdc <bootloader_uart_read_data+0x84>
            case BL_GO_TO_RESET:
            	bootloader_go_reset_cmd(bl_rx_buffer);
 8000cbc:	4808      	ldr	r0, [pc, #32]	@ (8000ce0 <bootloader_uart_read_data+0x88>)
 8000cbe:	f000 f893 	bl	8000de8 <bootloader_go_reset_cmd>
                break;
 8000cc2:	e00b      	b.n	8000cdc <bootloader_uart_read_data+0x84>
            case BL_FLASH_ERASE:
                bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000cc4:	4806      	ldr	r0, [pc, #24]	@ (8000ce0 <bootloader_uart_read_data+0x88>)
 8000cc6:	f000 f925 	bl	8000f14 <bootloader_handle_flash_erase_cmd>
                break;
 8000cca:	e007      	b.n	8000cdc <bootloader_uart_read_data+0x84>
            case BL_MEM_WRITE:
                bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000ccc:	4804      	ldr	r0, [pc, #16]	@ (8000ce0 <bootloader_uart_read_data+0x88>)
 8000cce:	f000 f98b 	bl	8000fe8 <bootloader_handle_mem_write_cmd>
                break;
 8000cd2:	e003      	b.n	8000cdc <bootloader_uart_read_data+0x84>
            default:
                printf("BL_MSG:Invalid command code received from host \n");
 8000cd4:	4805      	ldr	r0, [pc, #20]	@ (8000cec <bootloader_uart_read_data+0x94>)
 8000cd6:	f003 ff23 	bl	8004b20 <puts>
                break;
 8000cda:	bf00      	nop
		memset(bl_rx_buffer,0,200);
 8000cdc:	e7c1      	b.n	8000c62 <bootloader_uart_read_data+0xa>
 8000cde:	bf00      	nop
 8000ce0:	20000098 	.word	0x20000098
 8000ce4:	20000160 	.word	0x20000160
 8000ce8:	20000099 	.word	0x20000099
 8000cec:	08005c4c 	.word	0x08005c4c

08000cf0 <bootloader_jump_to_user_app>:
		}
	}
}

void bootloader_jump_to_user_app(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08c      	sub	sp, #48	@ 0x30
 8000cf4:	af00      	add	r7, sp, #0
	 void (*app_reset_handler)(void);

	    printf("BL_MSG: bootloader_jump_to_user_app\n");
 8000cf6:	4833      	ldr	r0, [pc, #204]	@ (8000dc4 <bootloader_jump_to_user_app+0xd4>)
 8000cf8:	f003 ff12 	bl	8004b20 <puts>

	    uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 8000cfc:	4b32      	ldr	r3, [pc, #200]	@ (8000dc8 <bootloader_jump_to_user_app+0xd8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	62bb      	str	r3, [r7, #40]	@ 0x28
	    uint32_t reset_handler_address = *(volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS + 4);
 8000d02:	4b32      	ldr	r3, [pc, #200]	@ (8000dcc <bootloader_jump_to_user_app+0xdc>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24

	    char msg[23];
		snprintf(msg, sizeof(msg), "MSP: 0x%08lX\n", msp_value);
 8000d08:	1d38      	adds	r0, r7, #4
 8000d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d0c:	4a30      	ldr	r2, [pc, #192]	@ (8000dd0 <bootloader_jump_to_user_app+0xe0>)
 8000d0e:	2117      	movs	r1, #23
 8000d10:	f003 ff0e 	bl	8004b30 <sniprintf>
		printf("%s",msg);
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	482e      	ldr	r0, [pc, #184]	@ (8000dd4 <bootloader_jump_to_user_app+0xe4>)
 8000d1a:	f003 fe99 	bl	8004a50 <iprintf>
		print_To_display(msg);
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 fc55 	bl	80015d0 <print_To_display>

		snprintf(msg, sizeof(msg), "Reset: 0x%08lX\n", reset_handler_address);
 8000d26:	1d38      	adds	r0, r7, #4
 8000d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2a:	4a2b      	ldr	r2, [pc, #172]	@ (8000dd8 <bootloader_jump_to_user_app+0xe8>)
 8000d2c:	2117      	movs	r1, #23
 8000d2e:	f003 feff 	bl	8004b30 <sniprintf>
		printf("%s",msg);
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	4619      	mov	r1, r3
 8000d36:	4827      	ldr	r0, [pc, #156]	@ (8000dd4 <bootloader_jump_to_user_app+0xe4>)
 8000d38:	f003 fe8a 	bl	8004a50 <iprintf>
		print_To_display(msg);
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fc46 	bl	80015d0 <print_To_display>

		HAL_Delay(1000);
 8000d44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d48:	f001 f9d0 	bl	80020ec <HAL_Delay>

	    HAL_RCC_DeInit();
 8000d4c:	f002 fadc 	bl	8003308 <HAL_RCC_DeInit>
		HAL_DeInit();
 8000d50:	f001 f946 	bl	8001fe0 <HAL_DeInit>

		SysTick->CTRL = 0;
 8000d54:	4b21      	ldr	r3, [pc, #132]	@ (8000ddc <bootloader_jump_to_user_app+0xec>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 8000d5a:	4b20      	ldr	r3, [pc, #128]	@ (8000ddc <bootloader_jump_to_user_app+0xec>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
 8000d60:	4b1e      	ldr	r3, [pc, #120]	@ (8000ddc <bootloader_jump_to_user_app+0xec>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]

		for (int i = 0; i < 8; i++) {
 8000d66:	2300      	movs	r3, #0
 8000d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d6a:	e010      	b.n	8000d8e <bootloader_jump_to_user_app+0x9e>
			NVIC->ICER[i] = 0xFFFFFFFF;
 8000d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8000de0 <bootloader_jump_to_user_app+0xf0>)
 8000d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d70:	3320      	adds	r3, #32
 8000d72:	f04f 31ff 	mov.w	r1, #4294967295
 8000d76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			NVIC->ICPR[i] = 0xFFFFFFFF;
 8000d7a:	4a19      	ldr	r2, [pc, #100]	@ (8000de0 <bootloader_jump_to_user_app+0xf0>)
 8000d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d7e:	3360      	adds	r3, #96	@ 0x60
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295
 8000d84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 8; i++) {
 8000d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d90:	2b07      	cmp	r3, #7
 8000d92:	ddeb      	ble.n	8000d6c <bootloader_jump_to_user_app+0x7c>
		}

	    SCB->VTOR = FLASH_SECTOR2_BASE_ADDRESS;
 8000d94:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <bootloader_jump_to_user_app+0xf4>)
 8000d96:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc8 <bootloader_jump_to_user_app+0xd8>)
 8000d98:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d9a:	f3bf 8f4f 	dsb	sy
}
 8000d9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000da0:	f3bf 8f6f 	isb	sy
}
 8000da4:	bf00      	nop
 8000da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000da8:	61fb      	str	r3, [r7, #28]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	f383 8808 	msr	MSP, r3
}
 8000db0:	bf00      	nop
		__DSB();
		__ISB();
	    __set_MSP(msp_value);

	    app_reset_handler = (void *)reset_handler_address;
 8000db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db4:	623b      	str	r3, [r7, #32]
	    app_reset_handler();
 8000db6:	6a3b      	ldr	r3, [r7, #32]
 8000db8:	4798      	blx	r3

}
 8000dba:	bf00      	nop
 8000dbc:	3730      	adds	r7, #48	@ 0x30
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	08005c7c 	.word	0x08005c7c
 8000dc8:	08008000 	.word	0x08008000
 8000dcc:	08008004 	.word	0x08008004
 8000dd0:	08005ca0 	.word	0x08005ca0
 8000dd4:	08005cb0 	.word	0x08005cb0
 8000dd8:	08005cb4 	.word	0x08005cb4
 8000ddc:	e000e010 	.word	0xe000e010
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <bootloader_go_reset_cmd>:

void bootloader_go_reset_cmd(uint8_t *pBuffer)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	printf("BL_MSG:bootloader_go_reset_cmd\n");
 8000df0:	481c      	ldr	r0, [pc, #112]	@ (8000e64 <bootloader_go_reset_cmd+0x7c>)
 8000df2:	f003 fe95 	bl	8004b20 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e68 <bootloader_go_reset_cmd+0x80>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	60fb      	str	r3, [r7, #12]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	3b04      	subs	r3, #4
 8000e02:	4a19      	ldr	r2, [pc, #100]	@ (8000e68 <bootloader_go_reset_cmd+0x80>)
 8000e04:	4413      	add	r3, r2
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60bb      	str	r3, [r7, #8]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3b04      	subs	r3, #4
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	4619      	mov	r1, r3
 8000e12:	4815      	ldr	r0, [pc, #84]	@ (8000e68 <bootloader_go_reset_cmd+0x80>)
 8000e14:	f000 f9b8 	bl	8001188 <bootloader_verify_crc>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d118      	bne.n	8000e50 <bootloader_go_reset_cmd+0x68>
	{
		 printf("BL_MSG:checksum success !!\n");
 8000e1e:	4813      	ldr	r0, [pc, #76]	@ (8000e6c <bootloader_go_reset_cmd+0x84>)
 8000e20:	f003 fe7e 	bl	8004b20 <puts>
		 bootloader_send_ack(pBuffer[0],0);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f97c 	bl	8001128 <bootloader_send_ack>
		 bootloader_uart_write_data(ADDR_VALID, 1);
 8000e30:	2101      	movs	r1, #1
 8000e32:	2000      	movs	r0, #0
 8000e34:	f000 f9dc 	bl	80011f0 <bootloader_uart_write_data>
		 printf("BL_MSG:Going to reset... !!\n");
 8000e38:	480d      	ldr	r0, [pc, #52]	@ (8000e70 <bootloader_go_reset_cmd+0x88>)
 8000e3a:	f003 fe71 	bl	8004b20 <puts>
		 print_To_display("update completed!");
 8000e3e:	480d      	ldr	r0, [pc, #52]	@ (8000e74 <bootloader_go_reset_cmd+0x8c>)
 8000e40:	f000 fbc6 	bl	80015d0 <print_To_display>
		 HAL_Delay(1000);
 8000e44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e48:	f001 f950 	bl	80020ec <HAL_Delay>
		 NVIC_SystemReset();
 8000e4c:	f7ff feee 	bl	8000c2c <__NVIC_SystemReset>
	}
	else
	{
		 printf("BL_MSG:checksum fail !!\n");
 8000e50:	4809      	ldr	r0, [pc, #36]	@ (8000e78 <bootloader_go_reset_cmd+0x90>)
 8000e52:	f003 fe65 	bl	8004b20 <puts>
		 bootloader_send_nack();
 8000e56:	f000 f983 	bl	8001160 <bootloader_send_nack>
	}
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	08005cc4 	.word	0x08005cc4
 8000e68:	20000098 	.word	0x20000098
 8000e6c:	08005ce4 	.word	0x08005ce4
 8000e70:	08005d00 	.word	0x08005d00
 8000e74:	08005d1c 	.word	0x08005d1c
 8000e78:	08005d30 	.word	0x08005d30

08000e7c <bootloader_handle_getcid_cmd>:

 void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
 {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 	uint16_t bl_cid_num = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	81fb      	strh	r3, [r7, #14]
 	printf("BL_MSG:bootloader_handle_getcid_cmd\n");
 8000e88:	481d      	ldr	r0, [pc, #116]	@ (8000f00 <bootloader_handle_getcid_cmd+0x84>)
 8000e8a:	f003 fe49 	bl	8004b20 <puts>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f04 <bootloader_handle_getcid_cmd+0x88>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3b04      	subs	r3, #4
 8000e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8000f04 <bootloader_handle_getcid_cmd+0x88>)
 8000e9c:	4413      	add	r3, r2
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	613b      	str	r3, [r7, #16]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3b04      	subs	r3, #4
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4816      	ldr	r0, [pc, #88]	@ (8000f04 <bootloader_handle_getcid_cmd+0x88>)
 8000eac:	f000 f96c 	bl	8001188 <bootloader_verify_crc>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d11a      	bne.n	8000eec <bootloader_handle_getcid_cmd+0x70>
 	{
         printf("BL_MSG:checksum success !!\n");
 8000eb6:	4814      	ldr	r0, [pc, #80]	@ (8000f08 <bootloader_handle_getcid_cmd+0x8c>)
 8000eb8:	f003 fe32 	bl	8004b20 <puts>
         bootloader_send_ack(pBuffer[0],2);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f930 	bl	8001128 <bootloader_send_ack>
         bl_cid_num = get_mcu_chip_id();
 8000ec8:	f000 f9a6 	bl	8001218 <get_mcu_chip_id>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	81fb      	strh	r3, [r7, #14]
         printf("BL_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
 8000ed0:	89fb      	ldrh	r3, [r7, #14]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	89fb      	ldrh	r3, [r7, #14]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	480c      	ldr	r0, [pc, #48]	@ (8000f0c <bootloader_handle_getcid_cmd+0x90>)
 8000eda:	f003 fdb9 	bl	8004a50 <iprintf>
         bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000ede:	f107 030e 	add.w	r3, r7, #14
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f983 	bl	80011f0 <bootloader_uart_write_data>
 	}else
 	{
         printf("BL_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}
 }
 8000eea:	e004      	b.n	8000ef6 <bootloader_handle_getcid_cmd+0x7a>
         printf("BL_MSG:checksum fail !!\n");
 8000eec:	4808      	ldr	r0, [pc, #32]	@ (8000f10 <bootloader_handle_getcid_cmd+0x94>)
 8000eee:	f003 fe17 	bl	8004b20 <puts>
         bootloader_send_nack();
 8000ef2:	f000 f935 	bl	8001160 <bootloader_send_nack>
 }
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	08005d48 	.word	0x08005d48
 8000f04:	20000098 	.word	0x20000098
 8000f08:	08005ce4 	.word	0x08005ce4
 8000f0c:	08005d6c 	.word	0x08005d6c
 8000f10:	08005d30 	.word	0x08005d30

08000f14 <bootloader_handle_flash_erase_cmd>:

 void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
 {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
     uint8_t erase_status = 0x00;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73fb      	strb	r3, [r7, #15]
     printf("BL_MSG:bootloader_handle_flash_erase_cmd\n");
 8000f20:	482a      	ldr	r0, [pc, #168]	@ (8000fcc <bootloader_handle_flash_erase_cmd+0xb8>)
 8000f22:	f003 fdfd 	bl	8004b20 <puts>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000f26:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd0 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	3b04      	subs	r3, #4
 8000f32:	4a27      	ldr	r2, [pc, #156]	@ (8000fd0 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000f34:	4413      	add	r3, r2
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	613b      	str	r3, [r7, #16]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3b04      	subs	r3, #4
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4619      	mov	r1, r3
 8000f42:	4823      	ldr	r0, [pc, #140]	@ (8000fd0 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000f44:	f000 f920 	bl	8001188 <bootloader_verify_crc>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d135      	bne.n	8000fba <bootloader_handle_flash_erase_cmd+0xa6>
 	{
         printf("BL_MSG:checksum success !!\n");
 8000f4e:	4821      	ldr	r0, [pc, #132]	@ (8000fd4 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000f50:	f003 fde6 	bl	8004b20 <puts>
         bootloader_send_ack(pBuffer[0],1);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f8e4 	bl	8001128 <bootloader_send_ack>
         printf("BL_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3302      	adds	r3, #2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	4619      	mov	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3303      	adds	r3, #3
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4819      	ldr	r0, [pc, #100]	@ (8000fd8 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000f72:	f003 fd6d 	bl	8004a50 <iprintf>

         HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2101      	movs	r1, #1
 8000f7a:	4818      	ldr	r0, [pc, #96]	@ (8000fdc <bootloader_handle_flash_erase_cmd+0xc8>)
 8000f7c:	f001 fe96 	bl	8002cac <HAL_GPIO_WritePin>
         erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3302      	adds	r3, #2
 8000f84:	781a      	ldrb	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3303      	adds	r3, #3
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4610      	mov	r0, r2
 8000f90:	f000 f992 	bl	80012b8 <execute_flash_erase>
 8000f94:	4603      	mov	r3, r0
 8000f96:	73fb      	strb	r3, [r7, #15]
         HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	480f      	ldr	r0, [pc, #60]	@ (8000fdc <bootloader_handle_flash_erase_cmd+0xc8>)
 8000f9e:	f001 fe85 	bl	8002cac <HAL_GPIO_WritePin>

         printf("BL_MSG: flash erase status: %#x\n",erase_status);
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480e      	ldr	r0, [pc, #56]	@ (8000fe0 <bootloader_handle_flash_erase_cmd+0xcc>)
 8000fa8:	f003 fd52 	bl	8004a50 <iprintf>

         bootloader_uart_write_data(&erase_status,1);
 8000fac:	f107 030f 	add.w	r3, r7, #15
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f91c 	bl	80011f0 <bootloader_uart_write_data>
 	}else
 	{
         printf("BL_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}
 }
 8000fb8:	e004      	b.n	8000fc4 <bootloader_handle_flash_erase_cmd+0xb0>
         printf("BL_MSG:checksum fail !!\n");
 8000fba:	480a      	ldr	r0, [pc, #40]	@ (8000fe4 <bootloader_handle_flash_erase_cmd+0xd0>)
 8000fbc:	f003 fdb0 	bl	8004b20 <puts>
         bootloader_send_nack();
 8000fc0:	f000 f8ce 	bl	8001160 <bootloader_send_nack>
 }
 8000fc4:	bf00      	nop
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	08005d88 	.word	0x08005d88
 8000fd0:	20000098 	.word	0x20000098
 8000fd4:	08005ce4 	.word	0x08005ce4
 8000fd8:	08005db4 	.word	0x08005db4
 8000fdc:	40020800 	.word	0x40020800
 8000fe0:	08005de4 	.word	0x08005de4
 8000fe4:	08005d30 	.word	0x08005d30

08000fe8 <bootloader_handle_mem_write_cmd>:


 void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
 {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b096      	sub	sp, #88	@ 0x58
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 	uint8_t addr_valid = ADDR_VALID;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 	uint8_t write_status = 0x00;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 	uint8_t chksum =0, len=0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8001002:	2300      	movs	r3, #0
 8001004:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 	len = pBuffer[0];
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 	uint8_t payload_len = pBuffer[6];
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	799b      	ldrb	r3, [r3, #6]
 8001014:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

 	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800101e:	653b      	str	r3, [r7, #80]	@ 0x50

 	chksum = pBuffer[len];
 8001020:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	4413      	add	r3, r2
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

     printf("BL_MSG:bootloader_handle_mem_write_cmd\n");
 800102e:	4835      	ldr	r0, [pc, #212]	@ (8001104 <bootloader_handle_mem_write_cmd+0x11c>)
 8001030:	f003 fd76 	bl	8004b20 <puts>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8001034:	4b34      	ldr	r3, [pc, #208]	@ (8001108 <bootloader_handle_mem_write_cmd+0x120>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	64fb      	str	r3, [r7, #76]	@ 0x4c

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800103c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800103e:	3b04      	subs	r3, #4
 8001040:	4a31      	ldr	r2, [pc, #196]	@ (8001108 <bootloader_handle_mem_write_cmd+0x120>)
 8001042:	4413      	add	r3, r2
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	64bb      	str	r3, [r7, #72]	@ 0x48


 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8001048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800104a:	3b04      	subs	r3, #4
 800104c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800104e:	4619      	mov	r1, r3
 8001050:	482d      	ldr	r0, [pc, #180]	@ (8001108 <bootloader_handle_mem_write_cmd+0x120>)
 8001052:	f000 f899 	bl	8001188 <bootloader_verify_crc>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d14a      	bne.n	80010f2 <bootloader_handle_mem_write_cmd+0x10a>
 	{
         printf("BL_MSG:checksum success !!\n");
 800105c:	482b      	ldr	r0, [pc, #172]	@ (800110c <bootloader_handle_mem_write_cmd+0x124>)
 800105e:	f003 fd5f 	bl	8004b20 <puts>

         bootloader_send_ack(pBuffer[0],1);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2101      	movs	r1, #1
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f85d 	bl	8001128 <bootloader_send_ack>

         char msg[60];
         snprintf(msg, sizeof(msg), "write addr:%#lx", mem_address);
 800106e:	f107 0008 	add.w	r0, r7, #8
 8001072:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001074:	4a26      	ldr	r2, [pc, #152]	@ (8001110 <bootloader_handle_mem_write_cmd+0x128>)
 8001076:	213c      	movs	r1, #60	@ 0x3c
 8001078:	f003 fd5a 	bl	8004b30 <sniprintf>
         printf("BL_MSG: write addr:%#lx\n", mem_address);
 800107c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800107e:	4825      	ldr	r0, [pc, #148]	@ (8001114 <bootloader_handle_mem_write_cmd+0x12c>)
 8001080:	f003 fce6 	bl	8004a50 <iprintf>
         print_To_display(msg);
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	4618      	mov	r0, r3
 800108a:	f000 faa1 	bl	80015d0 <print_To_display>

 		if( verify_address(mem_address) == ADDR_VALID )
 800108e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001090:	f000 f8d4 	bl	800123c <verify_address>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d11e      	bne.n	80010d8 <bootloader_handle_mem_write_cmd+0xf0>
 		{

             printf("BL_MSG: valid mem write address\n");
 800109a:	481f      	ldr	r0, [pc, #124]	@ (8001118 <bootloader_handle_mem_write_cmd+0x130>)
 800109c:	f003 fd40 	bl	8004b20 <puts>

             //glow the led to indicate bootloader is currently writing to memory
             HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2101      	movs	r1, #1
 80010a4:	481d      	ldr	r0, [pc, #116]	@ (800111c <bootloader_handle_mem_write_cmd+0x134>)
 80010a6:	f001 fe01 	bl	8002cac <HAL_GPIO_WritePin>

             //execute mem write
             write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3307      	adds	r3, #7
 80010ae:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 80010b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f946 	bl	8001346 <execute_mem_write>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

             //turn off the led to indicate memory write is over
             HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2101      	movs	r1, #1
 80010c4:	4815      	ldr	r0, [pc, #84]	@ (800111c <bootloader_handle_mem_write_cmd+0x134>)
 80010c6:	f001 fdf1 	bl	8002cac <HAL_GPIO_WritePin>

             //inform host about the status
             bootloader_uart_write_data(&write_status,1);
 80010ca:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 80010ce:	2101      	movs	r1, #1
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f88d 	bl	80011f0 <bootloader_uart_write_data>
 	else
 	{
         printf("BL_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}
 }
 80010d6:	e011      	b.n	80010fc <bootloader_handle_mem_write_cmd+0x114>
             printf("BL_MSG: invalid mem write address\n");
 80010d8:	4811      	ldr	r0, [pc, #68]	@ (8001120 <bootloader_handle_mem_write_cmd+0x138>)
 80010da:	f003 fd21 	bl	8004b20 <puts>
             write_status = ADDR_INVALID;
 80010de:	2301      	movs	r3, #1
 80010e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
             bootloader_uart_write_data(&write_status,1);
 80010e4:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 80010e8:	2101      	movs	r1, #1
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f880 	bl	80011f0 <bootloader_uart_write_data>
 }
 80010f0:	e004      	b.n	80010fc <bootloader_handle_mem_write_cmd+0x114>
         printf("BL_MSG:checksum fail !!\n");
 80010f2:	480c      	ldr	r0, [pc, #48]	@ (8001124 <bootloader_handle_mem_write_cmd+0x13c>)
 80010f4:	f003 fd14 	bl	8004b20 <puts>
         bootloader_send_nack();
 80010f8:	f000 f832 	bl	8001160 <bootloader_send_nack>
 }
 80010fc:	bf00      	nop
 80010fe:	3758      	adds	r7, #88	@ 0x58
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	08005e08 	.word	0x08005e08
 8001108:	20000098 	.word	0x20000098
 800110c:	08005ce4 	.word	0x08005ce4
 8001110:	08005e30 	.word	0x08005e30
 8001114:	08005e40 	.word	0x08005e40
 8001118:	08005e5c 	.word	0x08005e5c
 800111c:	40020800 	.word	0x40020800
 8001120:	08005e7c 	.word	0x08005e7c
 8001124:	08005d30 	.word	0x08005d30

08001128 <bootloader_send_ack>:


 void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
 {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	460a      	mov	r2, r1
 8001132:	71fb      	strb	r3, [r7, #7]
 8001134:	4613      	mov	r3, r2
 8001136:	71bb      	strb	r3, [r7, #6]
 	 //here we send 2 byte.. first byte is ack and the second byte is len value
 	uint8_t ack_buf[2];
 	ack_buf[0] = BL_ACK;
 8001138:	23a5      	movs	r3, #165	@ 0xa5
 800113a:	733b      	strb	r3, [r7, #12]
 	ack_buf[1] = follow_len;
 800113c:	79bb      	ldrb	r3, [r7, #6]
 800113e:	737b      	strb	r3, [r7, #13]
 	HAL_UART_Transmit(C_UART,ack_buf,2,HAL_MAX_DELAY);
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <bootloader_send_ack+0x34>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	f107 010c 	add.w	r1, r7, #12
 8001148:	f04f 33ff 	mov.w	r3, #4294967295
 800114c:	2202      	movs	r2, #2
 800114e:	f002 ff6b 	bl	8004028 <HAL_UART_Transmit>

 }
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000160 	.word	0x20000160

08001160 <bootloader_send_nack>:

 /*This function sends NACK */
 void bootloader_send_nack(void)
 {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 	uint8_t nack = BL_NACK;
 8001166:	237f      	movs	r3, #127	@ 0x7f
 8001168:	71fb      	strb	r3, [r7, #7]
 	HAL_UART_Transmit(C_UART,&nack,1,HAL_MAX_DELAY);
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <bootloader_send_nack+0x24>)
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	1df9      	adds	r1, r7, #7
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	2201      	movs	r2, #1
 8001176:	f002 ff57 	bl	8004028 <HAL_UART_Transmit>
 }
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000160 	.word	0x20000160

08001188 <bootloader_verify_crc>:

 //This verifies the CRC of the given buffer in pData .
 uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
 {
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
     uint32_t uwCRCValue=0xff;
 8001194:	23ff      	movs	r3, #255	@ 0xff
 8001196:	61fb      	str	r3, [r7, #28]

     for (uint32_t i=0 ; i < len ; i++)
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
 800119c:	e00f      	b.n	80011be <bootloader_verify_crc+0x36>
 	{
         uint32_t i_data = pData[i];
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	4413      	add	r3, r2
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	617b      	str	r3, [r7, #20]
         uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2201      	movs	r2, #1
 80011ae:	4619      	mov	r1, r3
 80011b0:	480e      	ldr	r0, [pc, #56]	@ (80011ec <bootloader_verify_crc+0x64>)
 80011b2:	f001 f8c0 	bl	8002336 <HAL_CRC_Accumulate>
 80011b6:	61f8      	str	r0, [r7, #28]
     for (uint32_t i=0 ; i < len ; i++)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	3301      	adds	r3, #1
 80011bc:	61bb      	str	r3, [r7, #24]
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d3eb      	bcc.n	800119e <bootloader_verify_crc+0x16>
 	}

 	 /* Reset CRC Calculation Unit */
   __HAL_CRC_DR_RESET(&hcrc);
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <bootloader_verify_crc+0x64>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	4b07      	ldr	r3, [pc, #28]	@ (80011ec <bootloader_verify_crc+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f042 0201 	orr.w	r2, r2, #1
 80011d4:	609a      	str	r2, [r3, #8]

 	if( uwCRCValue == crc_host)
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d101      	bne.n	80011e2 <bootloader_verify_crc+0x5a>
 	{
 		return VERIFY_CRC_SUCCESS;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <bootloader_verify_crc+0x5c>
 	}

 	return VERIFY_CRC_FAIL;
 80011e2:	2301      	movs	r3, #1
 }
 80011e4:	4618      	mov	r0, r3
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000220 	.word	0x20000220

080011f0 <bootloader_uart_write_data>:


 void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
 {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
     /*you can replace the below ST's USART driver API call with your MCUs driver API call */
 	HAL_UART_Transmit(C_UART,pBuffer,len,HAL_MAX_DELAY);
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <bootloader_uart_write_data+0x24>)
 80011fc:	6818      	ldr	r0, [r3, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b29a      	uxth	r2, r3
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	f002 ff0e 	bl	8004028 <HAL_UART_Transmit>

 }
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000160 	.word	0x20000160

08001218 <get_mcu_chip_id>:

 uint16_t get_mcu_chip_id(void)
 {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 	uint16_t cid;
 	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <get_mcu_chip_id+0x20>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	b29b      	uxth	r3, r3
 8001224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001228:	80fb      	strh	r3, [r7, #6]
 	return  cid;
 800122a:	88fb      	ldrh	r3, [r7, #6]
 }
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e0042000 	.word	0xe0042000

0800123c <verify_address>:


 uint8_t verify_address(uint32_t go_address)
 {
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800124a:	d305      	bcc.n	8001258 <verify_address+0x1c>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a15      	ldr	r2, [pc, #84]	@ (80012a4 <verify_address+0x68>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d801      	bhi.n	8001258 <verify_address+0x1c>
 	{
 		return ADDR_VALID;
 8001254:	2300      	movs	r3, #0
 8001256:	e01e      	b.n	8001296 <verify_address+0x5a>
 	}
 	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a12      	ldr	r2, [pc, #72]	@ (80012a4 <verify_address+0x68>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d305      	bcc.n	800126c <verify_address+0x30>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a11      	ldr	r2, [pc, #68]	@ (80012a8 <verify_address+0x6c>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d801      	bhi.n	800126c <verify_address+0x30>
 	{
 		return ADDR_VALID;
 8001268:	2300      	movs	r3, #0
 800126a:	e014      	b.n	8001296 <verify_address+0x5a>
 	}
 	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001272:	d305      	bcc.n	8001280 <verify_address+0x44>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a0d      	ldr	r2, [pc, #52]	@ (80012ac <verify_address+0x70>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d801      	bhi.n	8001280 <verify_address+0x44>
 	{
 		return ADDR_VALID;
 800127c:	2300      	movs	r3, #0
 800127e:	e00a      	b.n	8001296 <verify_address+0x5a>
 	}
 	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a0b      	ldr	r2, [pc, #44]	@ (80012b0 <verify_address+0x74>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d305      	bcc.n	8001294 <verify_address+0x58>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <verify_address+0x78>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d801      	bhi.n	8001294 <verify_address+0x58>
 	{
 		return ADDR_VALID;
 8001290:	2300      	movs	r3, #0
 8001292:	e000      	b.n	8001296 <verify_address+0x5a>
 	}
 	else
 		return ADDR_INVALID;
 8001294:	2301      	movs	r3, #1
 }
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	2001c000 	.word	0x2001c000
 80012a8:	20020000 	.word	0x20020000
 80012ac:	0807ffff 	.word	0x0807ffff
 80012b0:	40024000 	.word	0x40024000
 80012b4:	40025000 	.word	0x40025000

080012b8 <execute_flash_erase>:


uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
 {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	@ 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	460a      	mov	r2, r1
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	4613      	mov	r3, r2
 80012c6:	71bb      	strb	r3, [r7, #6]
 	FLASH_EraseInitTypeDef flashErase_handle;
 	uint32_t sectorError;
 	HAL_StatusTypeDef status;


 	if( number_of_sector > 8 )
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d901      	bls.n	80012d2 <execute_flash_erase+0x1a>
 		return INVALID_SECTOR;
 80012ce:	2304      	movs	r3, #4
 80012d0:	e035      	b.n	800133e <execute_flash_erase+0x86>

 	if( (sector_number == 0xff ) || (sector_number <= 7) )
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2bff      	cmp	r3, #255	@ 0xff
 80012d6:	d002      	beq.n	80012de <execute_flash_erase+0x26>
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b07      	cmp	r3, #7
 80012dc:	d82e      	bhi.n	800133c <execute_flash_erase+0x84>
 	{
 		if(sector_number == (uint8_t) 0xff)
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	2bff      	cmp	r3, #255	@ 0xff
 80012e2:	d102      	bne.n	80012ea <execute_flash_erase+0x32>
 		{
 			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80012e4:	2301      	movs	r3, #1
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	e012      	b.n	8001310 <execute_flash_erase+0x58>
 		}else
 		{
 		    /*Here we are just calculating how many sectors needs to erased */
 			uint8_t remanining_sector = 8 - sector_number;
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	f1c3 0308 	rsb	r3, r3, #8
 80012f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
             if( number_of_sector > remanining_sector)
 80012f4:	79ba      	ldrb	r2, [r7, #6]
 80012f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d902      	bls.n	8001304 <execute_flash_erase+0x4c>
             {
             	number_of_sector = remanining_sector;
 80012fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001302:	71bb      	strb	r3, [r7, #6]
             }
 			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
 			flashErase_handle.Sector = sector_number; // this is the initial sector
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	61bb      	str	r3, [r7, #24]
 			flashErase_handle.NbSectors = number_of_sector;
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	61fb      	str	r3, [r7, #28]
 		}
 		flashErase_handle.Banks = FLASH_BANK_1;
 8001310:	2301      	movs	r3, #1
 8001312:	617b      	str	r3, [r7, #20]

 		/*Get access to touch the flash registers */
 		HAL_FLASH_Unlock();
 8001314:	f001 f88c 	bl	8002430 <HAL_FLASH_Unlock>
 		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 8001318:	2302      	movs	r3, #2
 800131a:	623b      	str	r3, [r7, #32]
 		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 800131c:	f107 020c 	add.w	r2, r7, #12
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f001 f9f4 	bl	8002714 <HAL_FLASHEx_Erase>
 800132c:	4603      	mov	r3, r0
 800132e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 		HAL_FLASH_Lock();
 8001332:	f001 f89f 	bl	8002474 <HAL_FLASH_Lock>

 		return status;
 8001336:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800133a:	e000      	b.n	800133e <execute_flash_erase+0x86>
 	}


 	return INVALID_SECTOR;
 800133c:	2304      	movs	r3, #4
 }
 800133e:	4618      	mov	r0, r3
 8001340:	3728      	adds	r7, #40	@ 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <execute_mem_write>:


 uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
 {
 8001346:	b5b0      	push	{r4, r5, r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
     uint8_t status=HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	75fb      	strb	r3, [r7, #23]

     //We have to unlock flash module to get control of registers
     HAL_FLASH_Unlock();
 8001356:	f001 f86b 	bl	8002430 <HAL_FLASH_Unlock>

     for(uint32_t i = 0 ; i <len ; i++)
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	e014      	b.n	800138a <execute_mem_write+0x44>
     {
         //Here we program the flash byte by byte
         status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	18d1      	adds	r1, r2, r3
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4413      	add	r3, r2
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2200      	movs	r2, #0
 8001372:	461c      	mov	r4, r3
 8001374:	4615      	mov	r5, r2
 8001376:	4622      	mov	r2, r4
 8001378:	462b      	mov	r3, r5
 800137a:	2000      	movs	r0, #0
 800137c:	f001 f806 	bl	800238c <HAL_FLASH_Program>
 8001380:	4603      	mov	r3, r0
 8001382:	75fb      	strb	r3, [r7, #23]
     for(uint32_t i = 0 ; i <len ; i++)
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	3301      	adds	r3, #1
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	429a      	cmp	r2, r3
 8001390:	d3e6      	bcc.n	8001360 <execute_mem_write+0x1a>
     }

     HAL_FLASH_Lock();
 8001392:	f001 f86f 	bl	8002474 <HAL_FLASH_Lock>

     return status;
 8001396:	7dfb      	ldrb	r3, [r7, #23]
 }
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bdb0      	pop	{r4, r5, r7, pc}

080013a0 <InitializeDisplay>:

uint8_t current_line = 0;
char display_buffer[MAX_DISPLAY_LINES][23];

void InitializeDisplay(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af04      	add	r7, sp, #16
    ST7735_Init(0);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7ff fa40 	bl	800082c <ST7735_Init>
    fillScreen(BLACK);
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff f931 	bl	8000614 <fillScreen>
    ST7735_SetRotation(1);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f7ff fa66 	bl	8000884 <ST7735_SetRotation>
    // Clear display buffer
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	e00f      	b.n	80013de <InitializeDisplay+0x3e>
        memset(display_buffer[i], 0, 23);
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	1a9b      	subs	r3, r3, r2
 80013ca:	4a18      	ldr	r2, [pc, #96]	@ (800142c <InitializeDisplay+0x8c>)
 80013cc:	4413      	add	r3, r2
 80013ce:	2217      	movs	r2, #23
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 fcda 	bl	8004d8c <memset>
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3301      	adds	r3, #1
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b07      	cmp	r3, #7
 80013e2:	ddec      	ble.n	80013be <InitializeDisplay+0x1e>
    }
    current_line = 0;
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <InitializeDisplay+0x90>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]

    // Display header
    ST7735_WriteString(5, 5, "Bootloader v1.0", Font_7x10, GREEN, BLACK);
 80013ea:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <InitializeDisplay+0x94>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	9202      	str	r2, [sp, #8]
 80013f0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80013f4:	9201      	str	r2, [sp, #4]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	9200      	str	r2, [sp, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001438 <InitializeDisplay+0x98>)
 80013fe:	2105      	movs	r1, #5
 8001400:	2005      	movs	r0, #5
 8001402:	f7ff fb37 	bl	8000a74 <ST7735_WriteString>
    ST7735_WriteString(5, 18, "Status Messages:", Font_7x10, YELLOW, BLACK);
 8001406:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <InitializeDisplay+0x94>)
 8001408:	2200      	movs	r2, #0
 800140a:	9202      	str	r2, [sp, #8]
 800140c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001410:	9201      	str	r2, [sp, #4]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	9200      	str	r2, [sp, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a08      	ldr	r2, [pc, #32]	@ (800143c <InitializeDisplay+0x9c>)
 800141a:	2112      	movs	r1, #18
 800141c:	2005      	movs	r0, #5
 800141e:	f7ff fb29 	bl	8000a74 <ST7735_WriteString>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000168 	.word	0x20000168
 8001430:	20000164 	.word	0x20000164
 8001434:	20000000 	.word	0x20000000
 8001438:	08005ea0 	.word	0x08005ea0
 800143c:	08005eb0 	.word	0x08005eb0

08001440 <ScrollDisplay>:
        memset(display_buffer[i], 0, 23);
    }
}

void ScrollDisplay(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af04      	add	r7, sp, #16
    for(int i = 0; i < MAX_DISPLAY_LINES - 1; i++) {
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	e016      	b.n	800147a <ScrollDisplay+0x3a>
        strcpy(display_buffer[i], display_buffer[i + 1]);
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	1a9b      	subs	r3, r3, r2
 8001458:	4a2b      	ldr	r2, [pc, #172]	@ (8001508 <ScrollDisplay+0xc8>)
 800145a:	1898      	adds	r0, r3, r2
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	4a27      	ldr	r2, [pc, #156]	@ (8001508 <ScrollDisplay+0xc8>)
 800146c:	4413      	add	r3, r2
 800146e:	4619      	mov	r1, r3
 8001470:	f003 fd1b 	bl	8004eaa <strcpy>
    for(int i = 0; i < MAX_DISPLAY_LINES - 1; i++) {
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3301      	adds	r3, #1
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b06      	cmp	r3, #6
 800147e:	dde5      	ble.n	800144c <ScrollDisplay+0xc>
    }

    // Clear the last line
    memset(display_buffer[MAX_DISPLAY_LINES - 1], 0, 23);
 8001480:	2217      	movs	r2, #23
 8001482:	2100      	movs	r1, #0
 8001484:	4821      	ldr	r0, [pc, #132]	@ (800150c <ScrollDisplay+0xcc>)
 8001486:	f003 fc81 	bl	8004d8c <memset>

    // Redraw all lines
    fillRect(0, 30, DISPLAY_WIDTH, MAX_DISPLAY_LINES * LINE_HEIGHT, BLACK);
 800148a:	2300      	movs	r3, #0
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2360      	movs	r3, #96	@ 0x60
 8001490:	22a0      	movs	r2, #160	@ 0xa0
 8001492:	211e      	movs	r1, #30
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff f8a1 	bl	80005dc <fillRect>

    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	e02b      	b.n	80014f8 <ScrollDisplay+0xb8>
        if(strlen(display_buffer[i]) > 0) {
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	4a16      	ldr	r2, [pc, #88]	@ (8001508 <ScrollDisplay+0xc8>)
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d01d      	beq.n	80014f2 <ScrollDisplay+0xb2>
            ST7735_WriteString(5, 30 + (i * LINE_HEIGHT), display_buffer[i], Font_7x10, WHITE, BLACK);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	0052      	lsls	r2, r2, #1
 80014be:	4413      	add	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	331e      	adds	r3, #30
 80014c6:	b299      	uxth	r1, r3
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001508 <ScrollDisplay+0xc8>)
 80014d6:	1898      	adds	r0, r3, r2
 80014d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001510 <ScrollDisplay+0xd0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	9202      	str	r2, [sp, #8]
 80014de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014e2:	9201      	str	r2, [sp, #4]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	9200      	str	r2, [sp, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4602      	mov	r2, r0
 80014ec:	2005      	movs	r0, #5
 80014ee:	f7ff fac1 	bl	8000a74 <ST7735_WriteString>
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	2b07      	cmp	r3, #7
 80014fc:	ddd0      	ble.n	80014a0 <ScrollDisplay+0x60>
        }
    }
}
 80014fe:	bf00      	nop
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000168 	.word	0x20000168
 800150c:	20000209 	.word	0x20000209
 8001510:	20000000 	.word	0x20000000

08001514 <DisplayMessage>:


void DisplayMessage(const char* message)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af04      	add	r7, sp, #16
 800151a:	6078      	str	r0, [r7, #4]
    if(!message) return;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d04b      	beq.n	80015ba <DisplayMessage+0xa6>

    // If we've reached the bottom, scroll up
    if(current_line >= MAX_DISPLAY_LINES) {
 8001522:	4b28      	ldr	r3, [pc, #160]	@ (80015c4 <DisplayMessage+0xb0>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b07      	cmp	r3, #7
 8001528:	d904      	bls.n	8001534 <DisplayMessage+0x20>
        ScrollDisplay();
 800152a:	f7ff ff89 	bl	8001440 <ScrollDisplay>
        current_line = MAX_DISPLAY_LINES - 1;
 800152e:	4b25      	ldr	r3, [pc, #148]	@ (80015c4 <DisplayMessage+0xb0>)
 8001530:	2207      	movs	r2, #7
 8001532:	701a      	strb	r2, [r3, #0]
    }

    strncpy(display_buffer[current_line], message, 22);
 8001534:	4b23      	ldr	r3, [pc, #140]	@ (80015c4 <DisplayMessage+0xb0>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	4a20      	ldr	r2, [pc, #128]	@ (80015c8 <DisplayMessage+0xb4>)
 8001546:	4413      	add	r3, r2
 8001548:	2216      	movs	r2, #22
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	4618      	mov	r0, r3
 800154e:	f003 fc25 	bl	8004d9c <strncpy>
    display_buffer[current_line][22] = '\0';
 8001552:	4b1c      	ldr	r3, [pc, #112]	@ (80015c4 <DisplayMessage+0xb0>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	491b      	ldr	r1, [pc, #108]	@ (80015c8 <DisplayMessage+0xb4>)
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	440b      	add	r3, r1
 8001566:	3316      	adds	r3, #22
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]

    // Display the message
    ST7735_WriteString(5, 30 + (current_line * LINE_HEIGHT), display_buffer[current_line], Font_7x10, WHITE, BLACK);
 800156c:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <DisplayMessage+0xb0>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	0052      	lsls	r2, r2, #1
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	b29b      	uxth	r3, r3
 800157a:	331e      	adds	r3, #30
 800157c:	b299      	uxth	r1, r3
 800157e:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <DisplayMessage+0xb0>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	1a9b      	subs	r3, r3, r2
 800158e:	4a0e      	ldr	r2, [pc, #56]	@ (80015c8 <DisplayMessage+0xb4>)
 8001590:	1898      	adds	r0, r3, r2
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <DisplayMessage+0xb8>)
 8001594:	2200      	movs	r2, #0
 8001596:	9202      	str	r2, [sp, #8]
 8001598:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800159c:	9201      	str	r2, [sp, #4]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	9200      	str	r2, [sp, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4602      	mov	r2, r0
 80015a6:	2005      	movs	r0, #5
 80015a8:	f7ff fa64 	bl	8000a74 <ST7735_WriteString>

    current_line++;
 80015ac:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <DisplayMessage+0xb0>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	4b03      	ldr	r3, [pc, #12]	@ (80015c4 <DisplayMessage+0xb0>)
 80015b6:	701a      	strb	r2, [r3, #0]
 80015b8:	e000      	b.n	80015bc <DisplayMessage+0xa8>
    if(!message) return;
 80015ba:	bf00      	nop
}
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000164 	.word	0x20000164
 80015c8:	20000168 	.word	0x20000168
 80015cc:	20000000 	.word	0x20000000

080015d0 <print_To_display>:

void print_To_display(char *format,...)
{
 80015d0:	b40f      	push	{r0, r1, r2, r3}
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b096      	sub	sp, #88	@ 0x58
 80015d6:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80015d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015dc:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 fb32 	bl	8004c50 <vsiprintf>
	// Also display on screen
	DisplayMessage(str);
 80015ec:	f107 0308 	add.w	r3, r7, #8
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff8f 	bl	8001514 <DisplayMessage>
    va_start(args, format);
    vsprintf(str, format, args);
    DisplayMessage(str);
    va_end(args);
#endif
}
 80015f6:	bf00      	nop
 80015f8:	3758      	adds	r7, #88	@ 0x58
 80015fa:	46bd      	mov	sp, r7
 80015fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001600:	b004      	add	sp, #16
 8001602:	4770      	bx	lr

08001604 <bootloader_main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void bootloader_main(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 800160a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800160e:	4819      	ldr	r0, [pc, #100]	@ (8001674 <bootloader_main+0x70>)
 8001610:	f001 fb34 	bl	8002c7c <HAL_GPIO_ReadPin>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d108      	bne.n	800162c <bootloader_main+0x28>
	{
		C_UART = &huart5;
 800161a:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <bootloader_main+0x74>)
 800161c:	4a17      	ldr	r2, [pc, #92]	@ (800167c <bootloader_main+0x78>)
 800161e:	601a      	str	r2, [r3, #0]
		printf("button pressed...entering the bootloader mode\n");
 8001620:	4817      	ldr	r0, [pc, #92]	@ (8001680 <bootloader_main+0x7c>)
 8001622:	f003 fa7d 	bl	8004b20 <puts>
		bootloader_uart_read_data();
 8001626:	f7ff fb17 	bl	8000c58 <bootloader_uart_read_data>
		{
			printf("No valid BOOT_CMD received...jumping to application\n\r");
			bootloader_jump_to_user_app();
		}
	}
}
 800162a:	e01e      	b.n	800166a <bootloader_main+0x66>
		uint8_t rx_byte = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	71bb      	strb	r3, [r7, #6]
		status = HAL_UART_Receive(&huart3, &rx_byte, 1, UART_TIMEOUT_MS);
 8001630:	1db9      	adds	r1, r7, #6
 8001632:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001636:	2201      	movs	r2, #1
 8001638:	4812      	ldr	r0, [pc, #72]	@ (8001684 <bootloader_main+0x80>)
 800163a:	f002 fd80 	bl	800413e <HAL_UART_Receive>
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
		if (status == HAL_OK && rx_byte == BOOT_CMD)
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10b      	bne.n	8001660 <bootloader_main+0x5c>
 8001648:	79bb      	ldrb	r3, [r7, #6]
 800164a:	2b50      	cmp	r3, #80	@ 0x50
 800164c:	d108      	bne.n	8001660 <bootloader_main+0x5c>
			C_UART = &huart3;
 800164e:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <bootloader_main+0x74>)
 8001650:	4a0c      	ldr	r2, [pc, #48]	@ (8001684 <bootloader_main+0x80>)
 8001652:	601a      	str	r2, [r3, #0]
			printf("BOOT_CMD (0x50) received...entering bootloader mode\n\r");
 8001654:	480c      	ldr	r0, [pc, #48]	@ (8001688 <bootloader_main+0x84>)
 8001656:	f003 f9fb 	bl	8004a50 <iprintf>
			bootloader_uart_read_data();
 800165a:	f7ff fafd 	bl	8000c58 <bootloader_uart_read_data>
}
 800165e:	e004      	b.n	800166a <bootloader_main+0x66>
			printf("No valid BOOT_CMD received...jumping to application\n\r");
 8001660:	480a      	ldr	r0, [pc, #40]	@ (800168c <bootloader_main+0x88>)
 8001662:	f003 f9f5 	bl	8004a50 <iprintf>
			bootloader_jump_to_user_app();
 8001666:	f7ff fb43 	bl	8000cf0 <bootloader_jump_to_user_app>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40020800 	.word	0x40020800
 8001678:	20000160 	.word	0x20000160
 800167c:	20000280 	.word	0x20000280
 8001680:	08005ec4 	.word	0x08005ec4
 8001684:	20000310 	.word	0x20000310
 8001688:	08005ef4 	.word	0x08005ef4
 800168c:	08005f2c 	.word	0x08005f2c

08001690 <__io_putchar>:

#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001698:	1d39      	adds	r1, r7, #4
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	2201      	movs	r2, #1
 80016a0:	4803      	ldr	r0, [pc, #12]	@ (80016b0 <__io_putchar+0x20>)
 80016a2:	f002 fcc1 	bl	8004028 <HAL_UART_Transmit>
	return ch;
 80016a6:	687b      	ldr	r3, [r7, #4]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200002c8 	.word	0x200002c8

080016b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b8:	f000 fc70 	bl	8001f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016bc:	f000 f818 	bl	80016f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c0:	f000 f952 	bl	8001968 <MX_GPIO_Init>
  MX_CRC_Init();
 80016c4:	f000 f886 	bl	80017d4 <MX_CRC_Init>
  MX_USART2_UART_Init();
 80016c8:	f000 f8fa 	bl	80018c0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80016cc:	f000 f922 	bl	8001914 <MX_USART3_UART_Init>
  MX_UART5_Init();
 80016d0:	f000 f8cc 	bl	800186c <MX_UART5_Init>
  MX_SPI1_Init();
 80016d4:	f000 f892 	bl	80017fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  InitializeDisplay();
 80016d8:	f7ff fe62 	bl	80013a0 <InitializeDisplay>
  printf("bootloader running....\n");
 80016dc:	4803      	ldr	r0, [pc, #12]	@ (80016ec <main+0x38>)
 80016de:	f003 fa1f 	bl	8004b20 <puts>
  bootloader_main();
 80016e2:	f7ff ff8f 	bl	8001604 <bootloader_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016e6:	bf00      	nop
 80016e8:	e7fd      	b.n	80016e6 <main+0x32>
 80016ea:	bf00      	nop
 80016ec:	08005f64 	.word	0x08005f64

080016f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b094      	sub	sp, #80	@ 0x50
 80016f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	2234      	movs	r2, #52	@ 0x34
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 fb44 	bl	8004d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	4b2c      	ldr	r3, [pc, #176]	@ (80017cc <SystemClock_Config+0xdc>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	4a2b      	ldr	r2, [pc, #172]	@ (80017cc <SystemClock_Config+0xdc>)
 800171e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001722:	6413      	str	r3, [r2, #64]	@ 0x40
 8001724:	4b29      	ldr	r3, [pc, #164]	@ (80017cc <SystemClock_Config+0xdc>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001730:	2300      	movs	r3, #0
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	4b26      	ldr	r3, [pc, #152]	@ (80017d0 <SystemClock_Config+0xe0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a25      	ldr	r2, [pc, #148]	@ (80017d0 <SystemClock_Config+0xe0>)
 800173a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b23      	ldr	r3, [pc, #140]	@ (80017d0 <SystemClock_Config+0xe0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800174c:	2302      	movs	r3, #2
 800174e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001750:	2301      	movs	r3, #1
 8001752:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001754:	2310      	movs	r3, #16
 8001756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001758:	2302      	movs	r3, #2
 800175a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800175c:	2300      	movs	r3, #0
 800175e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001760:	2308      	movs	r3, #8
 8001762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001764:	23b4      	movs	r3, #180	@ 0xb4
 8001766:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001768:	2302      	movs	r3, #2
 800176a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800176c:	2302      	movs	r3, #2
 800176e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001770:	2302      	movs	r3, #2
 8001772:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4618      	mov	r0, r3
 800177a:	f001 febd 	bl	80034f8 <HAL_RCC_OscConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001784:	f000 f970 	bl	8001a68 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001788:	f001 faaa 	bl	8002ce0 <HAL_PWREx_EnableOverDrive>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001792:	f000 f969 	bl	8001a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001796:	230f      	movs	r3, #15
 8001798:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179a:	2302      	movs	r3, #2
 800179c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017a2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	2105      	movs	r1, #5
 80017b4:	4618      	mov	r0, r3
 80017b6:	f001 fae3 	bl	8002d80 <HAL_RCC_ClockConfig>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80017c0:	f000 f952 	bl	8001a68 <Error_Handler>
  }
}
 80017c4:	bf00      	nop
 80017c6:	3750      	adds	r7, #80	@ 0x50
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40007000 	.word	0x40007000

080017d4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <MX_CRC_Init+0x20>)
 80017da:	4a07      	ldr	r2, [pc, #28]	@ (80017f8 <MX_CRC_Init+0x24>)
 80017dc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017de:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <MX_CRC_Init+0x20>)
 80017e0:	f000 fd8d 	bl	80022fe <HAL_CRC_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80017ea:	f000 f93d 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000220 	.word	0x20000220
 80017f8:	40023000 	.word	0x40023000

080017fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001800:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <MX_SPI1_Init+0x68>)
 8001802:	4a19      	ldr	r2, [pc, #100]	@ (8001868 <MX_SPI1_Init+0x6c>)
 8001804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001806:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <MX_SPI1_Init+0x68>)
 8001808:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800180c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800180e:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <MX_SPI1_Init+0x68>)
 8001810:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001814:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001816:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <MX_SPI1_Init+0x68>)
 8001818:	2200      	movs	r2, #0
 800181a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800181c:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <MX_SPI1_Init+0x68>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <MX_SPI1_Init+0x68>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001828:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <MX_SPI1_Init+0x68>)
 800182a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800182e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <MX_SPI1_Init+0x68>)
 8001832:	2210      	movs	r2, #16
 8001834:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001836:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <MX_SPI1_Init+0x68>)
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800183c:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <MX_SPI1_Init+0x68>)
 800183e:	2200      	movs	r2, #0
 8001840:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001842:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <MX_SPI1_Init+0x68>)
 8001844:	2200      	movs	r2, #0
 8001846:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <MX_SPI1_Init+0x68>)
 800184a:	220a      	movs	r2, #10
 800184c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800184e:	4805      	ldr	r0, [pc, #20]	@ (8001864 <MX_SPI1_Init+0x68>)
 8001850:	f002 f8f0 	bl	8003a34 <HAL_SPI_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800185a:	f000 f905 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000228 	.word	0x20000228
 8001868:	40013000 	.word	0x40013000

0800186c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <MX_UART5_Init+0x4c>)
 8001872:	4a12      	ldr	r2, [pc, #72]	@ (80018bc <MX_UART5_Init+0x50>)
 8001874:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001876:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <MX_UART5_Init+0x4c>)
 8001878:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800187c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800187e:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <MX_UART5_Init+0x4c>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001884:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <MX_UART5_Init+0x4c>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800188a:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <MX_UART5_Init+0x4c>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001890:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <MX_UART5_Init+0x4c>)
 8001892:	220c      	movs	r2, #12
 8001894:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001896:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <MX_UART5_Init+0x4c>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <MX_UART5_Init+0x4c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80018a2:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <MX_UART5_Init+0x4c>)
 80018a4:	f002 fb70 	bl	8003f88 <HAL_UART_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80018ae:	f000 f8db 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000280 	.word	0x20000280
 80018bc:	40005000 	.word	0x40005000

080018c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018c4:	4b11      	ldr	r3, [pc, #68]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	@ (8001910 <MX_USART2_UART_Init+0x50>)
 80018c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018e4:	4b09      	ldr	r3, [pc, #36]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018e6:	220c      	movs	r2, #12
 80018e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018f8:	f002 fb46 	bl	8003f88 <HAL_UART_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001902:	f000 f8b1 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200002c8 	.word	0x200002c8
 8001910:	40004400 	.word	0x40004400

08001914 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <MX_USART3_UART_Init+0x4c>)
 800191a:	4a12      	ldr	r2, [pc, #72]	@ (8001964 <MX_USART3_UART_Init+0x50>)
 800191c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <MX_USART3_UART_Init+0x4c>)
 8001920:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001924:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <MX_USART3_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <MX_USART3_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001932:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <MX_USART3_UART_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001938:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <MX_USART3_UART_Init+0x4c>)
 800193a:	220c      	movs	r2, #12
 800193c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193e:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <MX_USART3_UART_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <MX_USART3_UART_Init+0x4c>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800194a:	4805      	ldr	r0, [pc, #20]	@ (8001960 <MX_USART3_UART_Init+0x4c>)
 800194c:	f002 fb1c 	bl	8003f88 <HAL_UART_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001956:	f000 f887 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000310 	.word	0x20000310
 8001964:	40004800 	.word	0x40004800

08001968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	@ 0x28
 800196c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b36      	ldr	r3, [pc, #216]	@ (8001a5c <MX_GPIO_Init+0xf4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a35      	ldr	r2, [pc, #212]	@ (8001a5c <MX_GPIO_Init+0xf4>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b33      	ldr	r3, [pc, #204]	@ (8001a5c <MX_GPIO_Init+0xf4>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a5c <MX_GPIO_Init+0xf4>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	4a2e      	ldr	r2, [pc, #184]	@ (8001a5c <MX_GPIO_Init+0xf4>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019aa:	4b2c      	ldr	r3, [pc, #176]	@ (8001a5c <MX_GPIO_Init+0xf4>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b28      	ldr	r3, [pc, #160]	@ (8001a5c <MX_GPIO_Init+0xf4>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a27      	ldr	r2, [pc, #156]	@ (8001a5c <MX_GPIO_Init+0xf4>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b25      	ldr	r3, [pc, #148]	@ (8001a5c <MX_GPIO_Init+0xf4>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b21      	ldr	r3, [pc, #132]	@ (8001a5c <MX_GPIO_Init+0xf4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	4a20      	ldr	r2, [pc, #128]	@ (8001a5c <MX_GPIO_Init+0xf4>)
 80019dc:	f043 0308 	orr.w	r3, r3, #8
 80019e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a5c <MX_GPIO_Init+0xf4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD2_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2111      	movs	r1, #17
 80019f2:	481b      	ldr	r0, [pc, #108]	@ (8001a60 <MX_GPIO_Init+0xf8>)
 80019f4:	f001 f95a 	bl	8002cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2112      	movs	r1, #18
 80019fc:	4819      	ldr	r0, [pc, #100]	@ (8001a64 <MX_GPIO_Init+0xfc>)
 80019fe:	f001 f955 	bl	8002cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4619      	mov	r1, r3
 8001a16:	4812      	ldr	r0, [pc, #72]	@ (8001a60 <MX_GPIO_Init+0xf8>)
 8001a18:	f000 ff9c 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PC4 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_4;
 8001a1c:	2311      	movs	r3, #17
 8001a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	480b      	ldr	r0, [pc, #44]	@ (8001a60 <MX_GPIO_Init+0xf8>)
 8001a34:	f000 ff8e 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001a38:	2312      	movs	r3, #18
 8001a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4805      	ldr	r0, [pc, #20]	@ (8001a64 <MX_GPIO_Init+0xfc>)
 8001a50:	f000 ff80 	bl	8002954 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a54:	bf00      	nop
 8001a56:	3728      	adds	r7, #40	@ 0x28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020800 	.word	0x40020800
 8001a64:	40020000 	.word	0x40020000

08001a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <Error_Handler+0x8>

08001a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	4a08      	ldr	r2, [pc, #32]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800

08001ac4 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b00 <HAL_CRC_MspInit+0x3c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d10d      	bne.n	8001af2 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <HAL_CRC_MspInit+0x40>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	4a09      	ldr	r2, [pc, #36]	@ (8001b04 <HAL_CRC_MspInit+0x40>)
 8001ae0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae6:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <HAL_CRC_MspInit+0x40>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40023000 	.word	0x40023000
 8001b04:	40023800 	.word	0x40023800

08001b08 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	@ 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a19      	ldr	r2, [pc, #100]	@ (8001b8c <HAL_SPI_MspInit+0x84>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d12b      	bne.n	8001b82 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <HAL_SPI_MspInit+0x88>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b32:	4a17      	ldr	r2, [pc, #92]	@ (8001b90 <HAL_SPI_MspInit+0x88>)
 8001b34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <HAL_SPI_MspInit+0x88>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <HAL_SPI_MspInit+0x88>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a10      	ldr	r2, [pc, #64]	@ (8001b90 <HAL_SPI_MspInit+0x88>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b0e      	ldr	r3, [pc, #56]	@ (8001b90 <HAL_SPI_MspInit+0x88>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b62:	23a0      	movs	r3, #160	@ 0xa0
 8001b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b72:	2305      	movs	r3, #5
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <HAL_SPI_MspInit+0x8c>)
 8001b7e:	f000 fee9 	bl	8002954 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b82:	bf00      	nop
 8001b84:	3728      	adds	r7, #40	@ 0x28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40013000 	.word	0x40013000
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020000 	.word	0x40020000

08001b98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b090      	sub	sp, #64	@ 0x40
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a6a      	ldr	r2, [pc, #424]	@ (8001d60 <HAL_UART_MspInit+0x1c8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d14b      	bne.n	8001c52 <HAL_UART_MspInit+0xba>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bbe:	4b69      	ldr	r3, [pc, #420]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	4a68      	ldr	r2, [pc, #416]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001bc4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bca:	4b66      	ldr	r3, [pc, #408]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bda:	4b62      	ldr	r3, [pc, #392]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	4a61      	ldr	r2, [pc, #388]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be6:	4b5f      	ldr	r3, [pc, #380]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
 8001bf6:	4b5b      	ldr	r3, [pc, #364]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a5a      	ldr	r2, [pc, #360]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001bfc:	f043 0308 	orr.w	r3, r3, #8
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b58      	ldr	r3, [pc, #352]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	623b      	str	r3, [r7, #32]
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c20:	2308      	movs	r3, #8
 8001c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c28:	4619      	mov	r1, r3
 8001c2a:	484f      	ldr	r0, [pc, #316]	@ (8001d68 <HAL_UART_MspInit+0x1d0>)
 8001c2c:	f000 fe92 	bl	8002954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c30:	2304      	movs	r3, #4
 8001c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c40:	2308      	movs	r3, #8
 8001c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4848      	ldr	r0, [pc, #288]	@ (8001d6c <HAL_UART_MspInit+0x1d4>)
 8001c4c:	f000 fe82 	bl	8002954 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c50:	e081      	b.n	8001d56 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a46      	ldr	r2, [pc, #280]	@ (8001d70 <HAL_UART_MspInit+0x1d8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d12c      	bne.n	8001cb6 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	4b40      	ldr	r3, [pc, #256]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c64:	4a3f      	ldr	r2, [pc, #252]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001c66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	4b39      	ldr	r3, [pc, #228]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c80:	4a38      	ldr	r2, [pc, #224]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c88:	4b36      	ldr	r3, [pc, #216]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c94:	230c      	movs	r3, #12
 8001c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca4:	2307      	movs	r3, #7
 8001ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cac:	4619      	mov	r1, r3
 8001cae:	4831      	ldr	r0, [pc, #196]	@ (8001d74 <HAL_UART_MspInit+0x1dc>)
 8001cb0:	f000 fe50 	bl	8002954 <HAL_GPIO_Init>
}
 8001cb4:	e04f      	b.n	8001d56 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART3)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a2f      	ldr	r2, [pc, #188]	@ (8001d78 <HAL_UART_MspInit+0x1e0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d14a      	bne.n	8001d56 <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	4b27      	ldr	r3, [pc, #156]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	4a26      	ldr	r2, [pc, #152]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001cca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cce:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd0:	4b24      	ldr	r3, [pc, #144]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	4b20      	ldr	r3, [pc, #128]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cec:	4b1d      	ldr	r3, [pc, #116]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d00:	4a18      	ldr	r2, [pc, #96]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001d02:	f043 0302 	orr.w	r3, r3, #2
 8001d06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d08:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <HAL_UART_MspInit+0x1cc>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d14:	2320      	movs	r3, #32
 8001d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d24:	2307      	movs	r3, #7
 8001d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	480e      	ldr	r0, [pc, #56]	@ (8001d68 <HAL_UART_MspInit+0x1d0>)
 8001d30:	f000 fe10 	bl	8002954 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d46:	2307      	movs	r3, #7
 8001d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d4e:	4619      	mov	r1, r3
 8001d50:	480a      	ldr	r0, [pc, #40]	@ (8001d7c <HAL_UART_MspInit+0x1e4>)
 8001d52:	f000 fdff 	bl	8002954 <HAL_GPIO_Init>
}
 8001d56:	bf00      	nop
 8001d58:	3740      	adds	r7, #64	@ 0x40
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40005000 	.word	0x40005000
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020800 	.word	0x40020800
 8001d6c:	40020c00 	.word	0x40020c00
 8001d70:	40004400 	.word	0x40004400
 8001d74:	40020000 	.word	0x40020000
 8001d78:	40004800 	.word	0x40004800
 8001d7c:	40020400 	.word	0x40020400

08001d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <NMI_Handler+0x4>

08001d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <HardFault_Handler+0x4>

08001d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <MemManage_Handler+0x4>

08001d98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <BusFault_Handler+0x4>

08001da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <UsageFault_Handler+0x4>

08001da8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd6:	f000 f969 	bl	80020ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	e00a      	b.n	8001e06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001df0:	f3af 8000 	nop.w
 8001df4:	4601      	mov	r1, r0
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	60ba      	str	r2, [r7, #8]
 8001dfc:	b2ca      	uxtb	r2, r1
 8001dfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3301      	adds	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	dbf0      	blt.n	8001df0 <_read+0x12>
  }

  return len;
 8001e0e:	687b      	ldr	r3, [r7, #4]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	e009      	b.n	8001e3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	60ba      	str	r2, [r7, #8]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fc2c 	bl	8001690 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	dbf1      	blt.n	8001e2a <_write+0x12>
  }
  return len;
 8001e46:	687b      	ldr	r3, [r7, #4]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <_close>:

int _close(int file)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e78:	605a      	str	r2, [r3, #4]
  return 0;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <_isatty>:

int _isatty(int file)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e90:	2301      	movs	r3, #1
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b085      	sub	sp, #20
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec0:	4a14      	ldr	r2, [pc, #80]	@ (8001f14 <_sbrk+0x5c>)
 8001ec2:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <_sbrk+0x60>)
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ecc:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d102      	bne.n	8001eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <_sbrk+0x64>)
 8001ed6:	4a12      	ldr	r2, [pc, #72]	@ (8001f20 <_sbrk+0x68>)
 8001ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eda:	4b10      	ldr	r3, [pc, #64]	@ (8001f1c <_sbrk+0x64>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d207      	bcs.n	8001ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee8:	f002 ffb2 	bl	8004e50 <__errno>
 8001eec:	4603      	mov	r3, r0
 8001eee:	220c      	movs	r2, #12
 8001ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef6:	e009      	b.n	8001f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef8:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <_sbrk+0x64>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001efe:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <_sbrk+0x64>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	4a05      	ldr	r2, [pc, #20]	@ (8001f1c <_sbrk+0x64>)
 8001f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20020000 	.word	0x20020000
 8001f18:	00000400 	.word	0x00000400
 8001f1c:	20000358 	.word	0x20000358
 8001f20:	200004d0 	.word	0x200004d0

08001f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f28:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <SystemInit+0x20>)
 8001f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f2e:	4a05      	ldr	r2, [pc, #20]	@ (8001f44 <SystemInit+0x20>)
 8001f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f4c:	f7ff ffea 	bl	8001f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f50:	480c      	ldr	r0, [pc, #48]	@ (8001f84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f52:	490d      	ldr	r1, [pc, #52]	@ (8001f88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f54:	4a0d      	ldr	r2, [pc, #52]	@ (8001f8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f58:	e002      	b.n	8001f60 <LoopCopyDataInit>

08001f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5e:	3304      	adds	r3, #4

08001f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f64:	d3f9      	bcc.n	8001f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f66:	4a0a      	ldr	r2, [pc, #40]	@ (8001f90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f68:	4c0a      	ldr	r4, [pc, #40]	@ (8001f94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f6c:	e001      	b.n	8001f72 <LoopFillZerobss>

08001f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f70:	3204      	adds	r2, #4

08001f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f74:	d3fb      	bcc.n	8001f6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f76:	f002 ff71 	bl	8004e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f7a:	f7ff fb9b 	bl	80016b4 <main>
  bx  lr    
 8001f7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f8c:	080067b8 	.word	0x080067b8
  ldr r2, =_sbss
 8001f90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f94:	200004cc 	.word	0x200004cc

08001f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f98:	e7fe      	b.n	8001f98 <ADC_IRQHandler>
	...

08001f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <HAL_Init+0x40>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8001fdc <HAL_Init+0x40>)
 8001fa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <HAL_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001fdc <HAL_Init+0x40>)
 8001fb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb8:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <HAL_Init+0x40>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a07      	ldr	r2, [pc, #28]	@ (8001fdc <HAL_Init+0x40>)
 8001fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f000 f967 	bl	8002298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fca:	200f      	movs	r0, #15
 8001fcc:	f000 f83e 	bl	800204c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd0:	f7ff fd50 	bl	8001a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023c00 	.word	0x40023c00

08001fe0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <HAL_DeInit+0x4c>)
 8001fe6:	4a12      	ldr	r2, [pc, #72]	@ (8002030 <HAL_DeInit+0x50>)
 8001fe8:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001fea:	4b10      	ldr	r3, [pc, #64]	@ (800202c <HAL_DeInit+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <HAL_DeInit+0x4c>)
 8001ff2:	4a10      	ldr	r2, [pc, #64]	@ (8002034 <HAL_DeInit+0x54>)
 8001ff4:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <HAL_DeInit+0x4c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <HAL_DeInit+0x4c>)
 8001ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8002038 <HAL_DeInit+0x58>)
 8002000:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8002002:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <HAL_DeInit+0x4c>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8002008:	4b08      	ldr	r3, [pc, #32]	@ (800202c <HAL_DeInit+0x4c>)
 800200a:	2281      	movs	r2, #129	@ 0x81
 800200c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800200e:	4b07      	ldr	r3, [pc, #28]	@ (800202c <HAL_DeInit+0x4c>)
 8002010:	2200      	movs	r2, #0
 8002012:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8002014:	4b05      	ldr	r3, [pc, #20]	@ (800202c <HAL_DeInit+0x4c>)
 8002016:	2203      	movs	r2, #3
 8002018:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 800201a:	4b04      	ldr	r3, [pc, #16]	@ (800202c <HAL_DeInit+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002020:	f000 f80c 	bl	800203c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800
 8002030:	3fffc9ff 	.word	0x3fffc9ff
 8002034:	00c77933 	.word	0x00c77933
 8002038:	206010ff 	.word	0x206010ff

0800203c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002054:	4b12      	ldr	r3, [pc, #72]	@ (80020a0 <HAL_InitTick+0x54>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <HAL_InitTick+0x58>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002062:	fbb3 f3f1 	udiv	r3, r3, r1
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f93b 	bl	80022e6 <HAL_SYSTICK_Config>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e00e      	b.n	8002098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b0f      	cmp	r3, #15
 800207e:	d80a      	bhi.n	8002096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002080:	2200      	movs	r2, #0
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f000 f911 	bl	80022ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800208c:	4a06      	ldr	r2, [pc, #24]	@ (80020a8 <HAL_InitTick+0x5c>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e000      	b.n	8002098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000008 	.word	0x20000008
 80020a4:	20000010 	.word	0x20000010
 80020a8:	2000000c 	.word	0x2000000c

080020ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <HAL_IncTick+0x20>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <HAL_IncTick+0x24>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	4a04      	ldr	r2, [pc, #16]	@ (80020d0 <HAL_IncTick+0x24>)
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000010 	.word	0x20000010
 80020d0:	2000035c 	.word	0x2000035c

080020d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b03      	ldr	r3, [pc, #12]	@ (80020e8 <HAL_GetTick+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	2000035c 	.word	0x2000035c

080020ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f4:	f7ff ffee 	bl	80020d4 <HAL_GetTick>
 80020f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002104:	d005      	beq.n	8002112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002106:	4b0a      	ldr	r3, [pc, #40]	@ (8002130 <HAL_Delay+0x44>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002112:	bf00      	nop
 8002114:	f7ff ffde 	bl	80020d4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	429a      	cmp	r2, r3
 8002122:	d8f7      	bhi.n	8002114 <HAL_Delay+0x28>
  {
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000010 	.word	0x20000010

08002134 <__NVIC_SetPriorityGrouping>:
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002144:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002150:	4013      	ands	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800215c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002166:	4a04      	ldr	r2, [pc, #16]	@ (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	60d3      	str	r3, [r2, #12]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_GetPriorityGrouping>:
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002180:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <__NVIC_GetPriorityGrouping+0x18>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	f003 0307 	and.w	r3, r3, #7
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_SetPriority>:
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	6039      	str	r1, [r7, #0]
 80021a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	db0a      	blt.n	80021c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	490c      	ldr	r1, [pc, #48]	@ (80021e4 <__NVIC_SetPriority+0x4c>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	0112      	lsls	r2, r2, #4
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	440b      	add	r3, r1
 80021bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80021c0:	e00a      	b.n	80021d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4908      	ldr	r1, [pc, #32]	@ (80021e8 <__NVIC_SetPriority+0x50>)
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	3b04      	subs	r3, #4
 80021d0:	0112      	lsls	r2, r2, #4
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	440b      	add	r3, r1
 80021d6:	761a      	strb	r2, [r3, #24]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000e100 	.word	0xe000e100
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <NVIC_EncodePriority>:
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	@ 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f1c3 0307 	rsb	r3, r3, #7
 8002206:	2b04      	cmp	r3, #4
 8002208:	bf28      	it	cs
 800220a:	2304      	movcs	r3, #4
 800220c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3304      	adds	r3, #4
 8002212:	2b06      	cmp	r3, #6
 8002214:	d902      	bls.n	800221c <NVIC_EncodePriority+0x30>
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3b03      	subs	r3, #3
 800221a:	e000      	b.n	800221e <NVIC_EncodePriority+0x32>
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	f04f 32ff 	mov.w	r2, #4294967295
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43da      	mvns	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	401a      	ands	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002234:	f04f 31ff 	mov.w	r1, #4294967295
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	43d9      	mvns	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	4313      	orrs	r3, r2
}
 8002246:	4618      	mov	r0, r3
 8002248:	3724      	adds	r7, #36	@ 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3b01      	subs	r3, #1
 8002260:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002264:	d301      	bcc.n	800226a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002266:	2301      	movs	r3, #1
 8002268:	e00f      	b.n	800228a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226a:	4a0a      	ldr	r2, [pc, #40]	@ (8002294 <SysTick_Config+0x40>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002272:	210f      	movs	r1, #15
 8002274:	f04f 30ff 	mov.w	r0, #4294967295
 8002278:	f7ff ff8e 	bl	8002198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <SysTick_Config+0x40>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002282:	4b04      	ldr	r3, [pc, #16]	@ (8002294 <SysTick_Config+0x40>)
 8002284:	2207      	movs	r2, #7
 8002286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	e000e010 	.word	0xe000e010

08002298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ff47 	bl	8002134 <__NVIC_SetPriorityGrouping>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b086      	sub	sp, #24
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c0:	f7ff ff5c 	bl	800217c <__NVIC_GetPriorityGrouping>
 80022c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	6978      	ldr	r0, [r7, #20]
 80022cc:	f7ff ff8e 	bl	80021ec <NVIC_EncodePriority>
 80022d0:	4602      	mov	r2, r0
 80022d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff5d 	bl	8002198 <__NVIC_SetPriority>
}
 80022de:	bf00      	nop
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ffb0 	bl	8002254 <SysTick_Config>
 80022f4:	4603      	mov	r3, r0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e00e      	b.n	800232e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	795b      	ldrb	r3, [r3, #5]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d105      	bne.n	8002326 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff fbcf 	bl	8001ac4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002336:	b480      	push	{r7}
 8002338:	b087      	sub	sp, #28
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2202      	movs	r2, #2
 800234a:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	e00a      	b.n	8002368 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	441a      	add	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	3301      	adds	r3, #1
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	429a      	cmp	r2, r3
 800236e:	d3f0      	bcc.n	8002352 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2201      	movs	r2, #1
 800237c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800237e:	693b      	ldr	r3, [r7, #16]
}
 8002380:	4618      	mov	r0, r3
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800239a:	4b23      	ldr	r3, [pc, #140]	@ (8002428 <HAL_FLASH_Program+0x9c>)
 800239c:	7e1b      	ldrb	r3, [r3, #24]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_FLASH_Program+0x1a>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e03b      	b.n	800241e <HAL_FLASH_Program+0x92>
 80023a6:	4b20      	ldr	r3, [pc, #128]	@ (8002428 <HAL_FLASH_Program+0x9c>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023ac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80023b0:	f000 f870 	bl	8002494 <FLASH_WaitForLastOperation>
 80023b4:	4603      	mov	r3, r0
 80023b6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80023b8:	7dfb      	ldrb	r3, [r7, #23]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d12b      	bne.n	8002416 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d105      	bne.n	80023d0 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80023c4:	783b      	ldrb	r3, [r7, #0]
 80023c6:	4619      	mov	r1, r3
 80023c8:	68b8      	ldr	r0, [r7, #8]
 80023ca:	f000 f91b 	bl	8002604 <FLASH_Program_Byte>
 80023ce:	e016      	b.n	80023fe <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d105      	bne.n	80023e2 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80023d6:	883b      	ldrh	r3, [r7, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	68b8      	ldr	r0, [r7, #8]
 80023dc:	f000 f8ee 	bl	80025bc <FLASH_Program_HalfWord>
 80023e0:	e00d      	b.n	80023fe <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d105      	bne.n	80023f4 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	4619      	mov	r1, r3
 80023ec:	68b8      	ldr	r0, [r7, #8]
 80023ee:	f000 f8c3 	bl	8002578 <FLASH_Program_Word>
 80023f2:	e004      	b.n	80023fe <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80023f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023f8:	68b8      	ldr	r0, [r7, #8]
 80023fa:	f000 f88b 	bl	8002514 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023fe:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002402:	f000 f847 	bl	8002494 <FLASH_WaitForLastOperation>
 8002406:	4603      	mov	r3, r0
 8002408:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800240a:	4b08      	ldr	r3, [pc, #32]	@ (800242c <HAL_FLASH_Program+0xa0>)
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	4a07      	ldr	r2, [pc, #28]	@ (800242c <HAL_FLASH_Program+0xa0>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002416:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <HAL_FLASH_Program+0x9c>)
 8002418:	2200      	movs	r2, #0
 800241a:	761a      	strb	r2, [r3, #24]

  return status;
 800241c:	7dfb      	ldrb	r3, [r7, #23]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000360 	.word	0x20000360
 800242c:	40023c00 	.word	0x40023c00

08002430 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800243a:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <HAL_FLASH_Unlock+0x38>)
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	da0b      	bge.n	800245a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002442:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <HAL_FLASH_Unlock+0x38>)
 8002444:	4a09      	ldr	r2, [pc, #36]	@ (800246c <HAL_FLASH_Unlock+0x3c>)
 8002446:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002448:	4b07      	ldr	r3, [pc, #28]	@ (8002468 <HAL_FLASH_Unlock+0x38>)
 800244a:	4a09      	ldr	r2, [pc, #36]	@ (8002470 <HAL_FLASH_Unlock+0x40>)
 800244c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800244e:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <HAL_FLASH_Unlock+0x38>)
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	da01      	bge.n	800245a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800245a:	79fb      	ldrb	r3, [r7, #7]
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	40023c00 	.word	0x40023c00
 800246c:	45670123 	.word	0x45670123
 8002470:	cdef89ab 	.word	0xcdef89ab

08002474 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002478:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <HAL_FLASH_Lock+0x1c>)
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	4a04      	ldr	r2, [pc, #16]	@ (8002490 <HAL_FLASH_Lock+0x1c>)
 800247e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002482:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	40023c00 	.word	0x40023c00

08002494 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80024a0:	4b1a      	ldr	r3, [pc, #104]	@ (800250c <FLASH_WaitForLastOperation+0x78>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80024a6:	f7ff fe15 	bl	80020d4 <HAL_GetTick>
 80024aa:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80024ac:	e010      	b.n	80024d0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b4:	d00c      	beq.n	80024d0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <FLASH_WaitForLastOperation+0x38>
 80024bc:	f7ff fe0a 	bl	80020d4 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d201      	bcs.n	80024d0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e019      	b.n	8002504 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80024d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002510 <FLASH_WaitForLastOperation+0x7c>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1e8      	bne.n	80024ae <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80024dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002510 <FLASH_WaitForLastOperation+0x7c>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80024e8:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <FLASH_WaitForLastOperation+0x7c>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80024ee:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <FLASH_WaitForLastOperation+0x7c>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80024fa:	f000 f8a5 	bl	8002648 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0

}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000360 	.word	0x20000360
 8002510:	40023c00 	.word	0x40023c00

08002514 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002520:	4b14      	ldr	r3, [pc, #80]	@ (8002574 <FLASH_Program_DoubleWord+0x60>)
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	4a13      	ldr	r2, [pc, #76]	@ (8002574 <FLASH_Program_DoubleWord+0x60>)
 8002526:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800252a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800252c:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <FLASH_Program_DoubleWord+0x60>)
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	4a10      	ldr	r2, [pc, #64]	@ (8002574 <FLASH_Program_DoubleWord+0x60>)
 8002532:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002536:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002538:	4b0e      	ldr	r3, [pc, #56]	@ (8002574 <FLASH_Program_DoubleWord+0x60>)
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	4a0d      	ldr	r2, [pc, #52]	@ (8002574 <FLASH_Program_DoubleWord+0x60>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800254a:	f3bf 8f6f 	isb	sy
}
 800254e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002550:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	000a      	movs	r2, r1
 800255e:	2300      	movs	r3, #0
 8002560:	68f9      	ldr	r1, [r7, #12]
 8002562:	3104      	adds	r1, #4
 8002564:	4613      	mov	r3, r2
 8002566:	600b      	str	r3, [r1, #0]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	40023c00 	.word	0x40023c00

08002578 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002582:	4b0d      	ldr	r3, [pc, #52]	@ (80025b8 <FLASH_Program_Word+0x40>)
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	4a0c      	ldr	r2, [pc, #48]	@ (80025b8 <FLASH_Program_Word+0x40>)
 8002588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800258c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800258e:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <FLASH_Program_Word+0x40>)
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	4a09      	ldr	r2, [pc, #36]	@ (80025b8 <FLASH_Program_Word+0x40>)
 8002594:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002598:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800259a:	4b07      	ldr	r3, [pc, #28]	@ (80025b8 <FLASH_Program_Word+0x40>)
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	4a06      	ldr	r2, [pc, #24]	@ (80025b8 <FLASH_Program_Word+0x40>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	601a      	str	r2, [r3, #0]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	40023c00 	.word	0x40023c00

080025bc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002600 <FLASH_Program_HalfWord+0x44>)
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002600 <FLASH_Program_HalfWord+0x44>)
 80025ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80025d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <FLASH_Program_HalfWord+0x44>)
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	4a09      	ldr	r2, [pc, #36]	@ (8002600 <FLASH_Program_HalfWord+0x44>)
 80025da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025e0:	4b07      	ldr	r3, [pc, #28]	@ (8002600 <FLASH_Program_HalfWord+0x44>)
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	4a06      	ldr	r2, [pc, #24]	@ (8002600 <FLASH_Program_HalfWord+0x44>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	801a      	strh	r2, [r3, #0]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40023c00 	.word	0x40023c00

08002604 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002610:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <FLASH_Program_Byte+0x40>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	4a0b      	ldr	r2, [pc, #44]	@ (8002644 <FLASH_Program_Byte+0x40>)
 8002616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800261a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800261c:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <FLASH_Program_Byte+0x40>)
 800261e:	4a09      	ldr	r2, [pc, #36]	@ (8002644 <FLASH_Program_Byte+0x40>)
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002624:	4b07      	ldr	r3, [pc, #28]	@ (8002644 <FLASH_Program_Byte+0x40>)
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	4a06      	ldr	r2, [pc, #24]	@ (8002644 <FLASH_Program_Byte+0x40>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	78fa      	ldrb	r2, [r7, #3]
 8002634:	701a      	strb	r2, [r3, #0]
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40023c00 	.word	0x40023c00

08002648 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800264c:	4b2f      	ldr	r3, [pc, #188]	@ (800270c <FLASH_SetErrorCode+0xc4>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002658:	4b2d      	ldr	r3, [pc, #180]	@ (8002710 <FLASH_SetErrorCode+0xc8>)
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	f043 0310 	orr.w	r3, r3, #16
 8002660:	4a2b      	ldr	r2, [pc, #172]	@ (8002710 <FLASH_SetErrorCode+0xc8>)
 8002662:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002664:	4b29      	ldr	r3, [pc, #164]	@ (800270c <FLASH_SetErrorCode+0xc4>)
 8002666:	2210      	movs	r2, #16
 8002668:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800266a:	4b28      	ldr	r3, [pc, #160]	@ (800270c <FLASH_SetErrorCode+0xc4>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b00      	cmp	r3, #0
 8002674:	d008      	beq.n	8002688 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002676:	4b26      	ldr	r3, [pc, #152]	@ (8002710 <FLASH_SetErrorCode+0xc8>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f043 0308 	orr.w	r3, r3, #8
 800267e:	4a24      	ldr	r2, [pc, #144]	@ (8002710 <FLASH_SetErrorCode+0xc8>)
 8002680:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002682:	4b22      	ldr	r3, [pc, #136]	@ (800270c <FLASH_SetErrorCode+0xc4>)
 8002684:	2220      	movs	r2, #32
 8002686:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002688:	4b20      	ldr	r3, [pc, #128]	@ (800270c <FLASH_SetErrorCode+0xc4>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002694:	4b1e      	ldr	r3, [pc, #120]	@ (8002710 <FLASH_SetErrorCode+0xc8>)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	4a1c      	ldr	r2, [pc, #112]	@ (8002710 <FLASH_SetErrorCode+0xc8>)
 800269e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80026a0:	4b1a      	ldr	r3, [pc, #104]	@ (800270c <FLASH_SetErrorCode+0xc4>)
 80026a2:	2240      	movs	r2, #64	@ 0x40
 80026a4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80026a6:	4b19      	ldr	r3, [pc, #100]	@ (800270c <FLASH_SetErrorCode+0xc4>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d008      	beq.n	80026c4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80026b2:	4b17      	ldr	r3, [pc, #92]	@ (8002710 <FLASH_SetErrorCode+0xc8>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f043 0302 	orr.w	r3, r3, #2
 80026ba:	4a15      	ldr	r2, [pc, #84]	@ (8002710 <FLASH_SetErrorCode+0xc8>)
 80026bc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80026be:	4b13      	ldr	r3, [pc, #76]	@ (800270c <FLASH_SetErrorCode+0xc4>)
 80026c0:	2280      	movs	r2, #128	@ 0x80
 80026c2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80026c4:	4b11      	ldr	r3, [pc, #68]	@ (800270c <FLASH_SetErrorCode+0xc4>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d009      	beq.n	80026e4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80026d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002710 <FLASH_SetErrorCode+0xc8>)
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002710 <FLASH_SetErrorCode+0xc8>)
 80026da:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <FLASH_SetErrorCode+0xc4>)
 80026de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026e2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80026e4:	4b09      	ldr	r3, [pc, #36]	@ (800270c <FLASH_SetErrorCode+0xc4>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80026f0:	4b07      	ldr	r3, [pc, #28]	@ (8002710 <FLASH_SetErrorCode+0xc8>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	f043 0320 	orr.w	r3, r3, #32
 80026f8:	4a05      	ldr	r2, [pc, #20]	@ (8002710 <FLASH_SetErrorCode+0xc8>)
 80026fa:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80026fc:	4b03      	ldr	r3, [pc, #12]	@ (800270c <FLASH_SetErrorCode+0xc4>)
 80026fe:	2202      	movs	r2, #2
 8002700:	60da      	str	r2, [r3, #12]
  }
}
 8002702:	bf00      	nop
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40023c00 	.word	0x40023c00
 8002710:	20000360 	.word	0x20000360

08002714 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002722:	4b31      	ldr	r3, [pc, #196]	@ (80027e8 <HAL_FLASHEx_Erase+0xd4>)
 8002724:	7e1b      	ldrb	r3, [r3, #24]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_FLASHEx_Erase+0x1a>
 800272a:	2302      	movs	r3, #2
 800272c:	e058      	b.n	80027e0 <HAL_FLASHEx_Erase+0xcc>
 800272e:	4b2e      	ldr	r3, [pc, #184]	@ (80027e8 <HAL_FLASHEx_Erase+0xd4>)
 8002730:	2201      	movs	r2, #1
 8002732:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002734:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002738:	f7ff feac 	bl	8002494 <FLASH_WaitForLastOperation>
 800273c:	4603      	mov	r3, r0
 800273e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d148      	bne.n	80027d8 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f04f 32ff 	mov.w	r2, #4294967295
 800274c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d115      	bne.n	8002782 <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4619      	mov	r1, r3
 8002762:	4610      	mov	r0, r2
 8002764:	f000 f844 	bl	80027f0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002768:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800276c:	f7ff fe92 	bl	8002494 <FLASH_WaitForLastOperation>
 8002770:	4603      	mov	r3, r0
 8002772:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002774:	4b1d      	ldr	r3, [pc, #116]	@ (80027ec <HAL_FLASHEx_Erase+0xd8>)
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	4a1c      	ldr	r2, [pc, #112]	@ (80027ec <HAL_FLASHEx_Erase+0xd8>)
 800277a:	f023 0304 	bic.w	r3, r3, #4
 800277e:	6113      	str	r3, [r2, #16]
 8002780:	e028      	b.n	80027d4 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	e01c      	b.n	80027c4 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	4619      	mov	r1, r3
 8002792:	68b8      	ldr	r0, [r7, #8]
 8002794:	f000 f850 	bl	8002838 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002798:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800279c:	f7ff fe7a 	bl	8002494 <FLASH_WaitForLastOperation>
 80027a0:	4603      	mov	r3, r0
 80027a2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80027a4:	4b11      	ldr	r3, [pc, #68]	@ (80027ec <HAL_FLASHEx_Erase+0xd8>)
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	4a10      	ldr	r2, [pc, #64]	@ (80027ec <HAL_FLASHEx_Erase+0xd8>)
 80027aa:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80027ae:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	601a      	str	r2, [r3, #0]
          break;
 80027bc:	e00a      	b.n	80027d4 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	3301      	adds	r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	4413      	add	r3, r2
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d3da      	bcc.n	800278a <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80027d4:	f000 f878 	bl	80028c8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80027d8:	4b03      	ldr	r3, [pc, #12]	@ (80027e8 <HAL_FLASHEx_Erase+0xd4>)
 80027da:	2200      	movs	r2, #0
 80027dc:	761a      	strb	r2, [r3, #24]

  return status;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000360 	.word	0x20000360
 80027ec:	40023c00 	.word	0x40023c00

080027f0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80027fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002834 <FLASH_MassErase+0x44>)
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	4a0c      	ldr	r2, [pc, #48]	@ (8002834 <FLASH_MassErase+0x44>)
 8002802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002806:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002808:	4b0a      	ldr	r3, [pc, #40]	@ (8002834 <FLASH_MassErase+0x44>)
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	4a09      	ldr	r2, [pc, #36]	@ (8002834 <FLASH_MassErase+0x44>)
 800280e:	f043 0304 	orr.w	r3, r3, #4
 8002812:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002814:	4b07      	ldr	r3, [pc, #28]	@ (8002834 <FLASH_MassErase+0x44>)
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	4313      	orrs	r3, r2
 800281e:	4a05      	ldr	r2, [pc, #20]	@ (8002834 <FLASH_MassErase+0x44>)
 8002820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002824:	6113      	str	r3, [r2, #16]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40023c00 	.word	0x40023c00

08002838 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	e010      	b.n	8002876 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d103      	bne.n	8002862 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800285a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	e009      	b.n	8002876 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d103      	bne.n	8002870 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002868:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	e002      	b.n	8002876 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002870:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002874:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002876:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <FLASH_Erase_Sector+0x8c>)
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	4a12      	ldr	r2, [pc, #72]	@ (80028c4 <FLASH_Erase_Sector+0x8c>)
 800287c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002880:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <FLASH_Erase_Sector+0x8c>)
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	490f      	ldr	r1, [pc, #60]	@ (80028c4 <FLASH_Erase_Sector+0x8c>)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800288e:	4b0d      	ldr	r3, [pc, #52]	@ (80028c4 <FLASH_Erase_Sector+0x8c>)
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	4a0c      	ldr	r2, [pc, #48]	@ (80028c4 <FLASH_Erase_Sector+0x8c>)
 8002894:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002898:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800289a:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <FLASH_Erase_Sector+0x8c>)
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4313      	orrs	r3, r2
 80028a4:	4a07      	ldr	r2, [pc, #28]	@ (80028c4 <FLASH_Erase_Sector+0x8c>)
 80028a6:	f043 0302 	orr.w	r3, r3, #2
 80028aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80028ac:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <FLASH_Erase_Sector+0x8c>)
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	4a04      	ldr	r2, [pc, #16]	@ (80028c4 <FLASH_Erase_Sector+0x8c>)
 80028b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b6:	6113      	str	r3, [r2, #16]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	40023c00 	.word	0x40023c00

080028c8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80028cc:	4b20      	ldr	r3, [pc, #128]	@ (8002950 <FLASH_FlushCaches+0x88>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d017      	beq.n	8002908 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80028d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002950 <FLASH_FlushCaches+0x88>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002950 <FLASH_FlushCaches+0x88>)
 80028de:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028e2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80028e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002950 <FLASH_FlushCaches+0x88>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a19      	ldr	r2, [pc, #100]	@ (8002950 <FLASH_FlushCaches+0x88>)
 80028ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b17      	ldr	r3, [pc, #92]	@ (8002950 <FLASH_FlushCaches+0x88>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a16      	ldr	r2, [pc, #88]	@ (8002950 <FLASH_FlushCaches+0x88>)
 80028f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028fa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028fc:	4b14      	ldr	r3, [pc, #80]	@ (8002950 <FLASH_FlushCaches+0x88>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a13      	ldr	r2, [pc, #76]	@ (8002950 <FLASH_FlushCaches+0x88>)
 8002902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002906:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002908:	4b11      	ldr	r3, [pc, #68]	@ (8002950 <FLASH_FlushCaches+0x88>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d017      	beq.n	8002944 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002914:	4b0e      	ldr	r3, [pc, #56]	@ (8002950 <FLASH_FlushCaches+0x88>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0d      	ldr	r2, [pc, #52]	@ (8002950 <FLASH_FlushCaches+0x88>)
 800291a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800291e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002920:	4b0b      	ldr	r3, [pc, #44]	@ (8002950 <FLASH_FlushCaches+0x88>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a0a      	ldr	r2, [pc, #40]	@ (8002950 <FLASH_FlushCaches+0x88>)
 8002926:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	4b08      	ldr	r3, [pc, #32]	@ (8002950 <FLASH_FlushCaches+0x88>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a07      	ldr	r2, [pc, #28]	@ (8002950 <FLASH_FlushCaches+0x88>)
 8002932:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002936:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002938:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <FLASH_FlushCaches+0x88>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a04      	ldr	r2, [pc, #16]	@ (8002950 <FLASH_FlushCaches+0x88>)
 800293e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002942:	6013      	str	r3, [r2, #0]
  }
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40023c00 	.word	0x40023c00

08002954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	@ 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
 800296e:	e165      	b.n	8002c3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002970:	2201      	movs	r2, #1
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	429a      	cmp	r2, r3
 800298a:	f040 8154 	bne.w	8002c36 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b01      	cmp	r3, #1
 8002998:	d005      	beq.n	80029a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d130      	bne.n	8002a08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	2203      	movs	r2, #3
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4013      	ands	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029dc:	2201      	movs	r2, #1
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 0201 	and.w	r2, r3, #1
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d017      	beq.n	8002a44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	2203      	movs	r2, #3
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d123      	bne.n	8002a98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	08da      	lsrs	r2, r3, #3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3208      	adds	r2, #8
 8002a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	220f      	movs	r2, #15
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	08da      	lsrs	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3208      	adds	r2, #8
 8002a92:	69b9      	ldr	r1, [r7, #24]
 8002a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 0203 	and.w	r2, r3, #3
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 80ae 	beq.w	8002c36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	4b5d      	ldr	r3, [pc, #372]	@ (8002c54 <HAL_GPIO_Init+0x300>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae2:	4a5c      	ldr	r2, [pc, #368]	@ (8002c54 <HAL_GPIO_Init+0x300>)
 8002ae4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aea:	4b5a      	ldr	r3, [pc, #360]	@ (8002c54 <HAL_GPIO_Init+0x300>)
 8002aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002af6:	4a58      	ldr	r2, [pc, #352]	@ (8002c58 <HAL_GPIO_Init+0x304>)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	089b      	lsrs	r3, r3, #2
 8002afc:	3302      	adds	r3, #2
 8002afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	220f      	movs	r2, #15
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43db      	mvns	r3, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4013      	ands	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a4f      	ldr	r2, [pc, #316]	@ (8002c5c <HAL_GPIO_Init+0x308>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d025      	beq.n	8002b6e <HAL_GPIO_Init+0x21a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a4e      	ldr	r2, [pc, #312]	@ (8002c60 <HAL_GPIO_Init+0x30c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d01f      	beq.n	8002b6a <HAL_GPIO_Init+0x216>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4d      	ldr	r2, [pc, #308]	@ (8002c64 <HAL_GPIO_Init+0x310>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d019      	beq.n	8002b66 <HAL_GPIO_Init+0x212>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4c      	ldr	r2, [pc, #304]	@ (8002c68 <HAL_GPIO_Init+0x314>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <HAL_GPIO_Init+0x20e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4b      	ldr	r2, [pc, #300]	@ (8002c6c <HAL_GPIO_Init+0x318>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00d      	beq.n	8002b5e <HAL_GPIO_Init+0x20a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4a      	ldr	r2, [pc, #296]	@ (8002c70 <HAL_GPIO_Init+0x31c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d007      	beq.n	8002b5a <HAL_GPIO_Init+0x206>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a49      	ldr	r2, [pc, #292]	@ (8002c74 <HAL_GPIO_Init+0x320>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d101      	bne.n	8002b56 <HAL_GPIO_Init+0x202>
 8002b52:	2306      	movs	r3, #6
 8002b54:	e00c      	b.n	8002b70 <HAL_GPIO_Init+0x21c>
 8002b56:	2307      	movs	r3, #7
 8002b58:	e00a      	b.n	8002b70 <HAL_GPIO_Init+0x21c>
 8002b5a:	2305      	movs	r3, #5
 8002b5c:	e008      	b.n	8002b70 <HAL_GPIO_Init+0x21c>
 8002b5e:	2304      	movs	r3, #4
 8002b60:	e006      	b.n	8002b70 <HAL_GPIO_Init+0x21c>
 8002b62:	2303      	movs	r3, #3
 8002b64:	e004      	b.n	8002b70 <HAL_GPIO_Init+0x21c>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e002      	b.n	8002b70 <HAL_GPIO_Init+0x21c>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_GPIO_Init+0x21c>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	f002 0203 	and.w	r2, r2, #3
 8002b76:	0092      	lsls	r2, r2, #2
 8002b78:	4093      	lsls	r3, r2
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b80:	4935      	ldr	r1, [pc, #212]	@ (8002c58 <HAL_GPIO_Init+0x304>)
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	089b      	lsrs	r3, r3, #2
 8002b86:	3302      	adds	r3, #2
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b8e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c78 <HAL_GPIO_Init+0x324>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bb2:	4a31      	ldr	r2, [pc, #196]	@ (8002c78 <HAL_GPIO_Init+0x324>)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bb8:	4b2f      	ldr	r3, [pc, #188]	@ (8002c78 <HAL_GPIO_Init+0x324>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bdc:	4a26      	ldr	r2, [pc, #152]	@ (8002c78 <HAL_GPIO_Init+0x324>)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002be2:	4b25      	ldr	r3, [pc, #148]	@ (8002c78 <HAL_GPIO_Init+0x324>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c06:	4a1c      	ldr	r2, [pc, #112]	@ (8002c78 <HAL_GPIO_Init+0x324>)
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c78 <HAL_GPIO_Init+0x324>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c30:	4a11      	ldr	r2, [pc, #68]	@ (8002c78 <HAL_GPIO_Init+0x324>)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2b0f      	cmp	r3, #15
 8002c40:	f67f ae96 	bls.w	8002970 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3724      	adds	r7, #36	@ 0x24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40013800 	.word	0x40013800
 8002c5c:	40020000 	.word	0x40020000
 8002c60:	40020400 	.word	0x40020400
 8002c64:	40020800 	.word	0x40020800
 8002c68:	40020c00 	.word	0x40020c00
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40021400 	.word	0x40021400
 8002c74:	40021800 	.word	0x40021800
 8002c78:	40013c00 	.word	0x40013c00

08002c7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	887b      	ldrh	r3, [r7, #2]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
 8002c98:	e001      	b.n	8002c9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	807b      	strh	r3, [r7, #2]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cbc:	787b      	ldrb	r3, [r7, #1]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cc2:	887a      	ldrh	r2, [r7, #2]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cc8:	e003      	b.n	8002cd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cca:	887b      	ldrh	r3, [r7, #2]
 8002ccc:	041a      	lsls	r2, r3, #16
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	619a      	str	r2, [r3, #24]
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	4b20      	ldr	r3, [pc, #128]	@ (8002d70 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d70 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8002d70 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d06:	4b1b      	ldr	r3, [pc, #108]	@ (8002d74 <HAL_PWREx_EnableOverDrive+0x94>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d0c:	f7ff f9e2 	bl	80020d4 <HAL_GetTick>
 8002d10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d12:	e009      	b.n	8002d28 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d14:	f7ff f9de 	bl	80020d4 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d22:	d901      	bls.n	8002d28 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e01f      	b.n	8002d68 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d28:	4b13      	ldr	r3, [pc, #76]	@ (8002d78 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d34:	d1ee      	bne.n	8002d14 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d36:	4b11      	ldr	r3, [pc, #68]	@ (8002d7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d3c:	f7ff f9ca 	bl	80020d4 <HAL_GetTick>
 8002d40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d42:	e009      	b.n	8002d58 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d44:	f7ff f9c6 	bl	80020d4 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d52:	d901      	bls.n	8002d58 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e007      	b.n	8002d68 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d58:	4b07      	ldr	r3, [pc, #28]	@ (8002d78 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d64:	d1ee      	bne.n	8002d44 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800
 8002d74:	420e0040 	.word	0x420e0040
 8002d78:	40007000 	.word	0x40007000
 8002d7c:	420e0044 	.word	0x420e0044

08002d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0cc      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d94:	4b68      	ldr	r3, [pc, #416]	@ (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d90c      	bls.n	8002dbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b65      	ldr	r3, [pc, #404]	@ (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b63      	ldr	r3, [pc, #396]	@ (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0b8      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d020      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd4:	4b59      	ldr	r3, [pc, #356]	@ (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	4a58      	ldr	r2, [pc, #352]	@ (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002dde:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dec:	4b53      	ldr	r3, [pc, #332]	@ (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a52      	ldr	r2, [pc, #328]	@ (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002df6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df8:	4b50      	ldr	r3, [pc, #320]	@ (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	494d      	ldr	r1, [pc, #308]	@ (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d044      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d107      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1e:	4b47      	ldr	r3, [pc, #284]	@ (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d119      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e07f      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d003      	beq.n	8002e3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e06f      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e067      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e5e:	4b37      	ldr	r3, [pc, #220]	@ (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f023 0203 	bic.w	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4934      	ldr	r1, [pc, #208]	@ (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e70:	f7ff f930 	bl	80020d4 <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e78:	f7ff f92c 	bl	80020d4 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e04f      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 020c 	and.w	r2, r3, #12
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d1eb      	bne.n	8002e78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea0:	4b25      	ldr	r3, [pc, #148]	@ (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d20c      	bcs.n	8002ec8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eae:	4b22      	ldr	r3, [pc, #136]	@ (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb6:	4b20      	ldr	r3, [pc, #128]	@ (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e032      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed4:	4b19      	ldr	r3, [pc, #100]	@ (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4916      	ldr	r1, [pc, #88]	@ (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d009      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef2:	4b12      	ldr	r3, [pc, #72]	@ (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	490e      	ldr	r1, [pc, #56]	@ (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f06:	f000 f855 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	490a      	ldr	r1, [pc, #40]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002f18:	5ccb      	ldrb	r3, [r1, r3]
 8002f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1e:	4a09      	ldr	r2, [pc, #36]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f22:	4b09      	ldr	r3, [pc, #36]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff f890 	bl	800204c <HAL_InitTick>

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40023c00 	.word	0x40023c00
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	0800675c 	.word	0x0800675c
 8002f44:	20000008 	.word	0x20000008
 8002f48:	2000000c 	.word	0x2000000c

08002f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f50:	4b03      	ldr	r3, [pc, #12]	@ (8002f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f52:	681b      	ldr	r3, [r3, #0]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000008 	.word	0x20000008

08002f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f68:	f7ff fff0 	bl	8002f4c <HAL_RCC_GetHCLKFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b05      	ldr	r3, [pc, #20]	@ (8002f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	0a9b      	lsrs	r3, r3, #10
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	4903      	ldr	r1, [pc, #12]	@ (8002f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40023800 	.word	0x40023800
 8002f88:	0800676c 	.word	0x0800676c

08002f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f90:	f7ff ffdc 	bl	8002f4c <HAL_RCC_GetHCLKFreq>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b05      	ldr	r3, [pc, #20]	@ (8002fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	0b5b      	lsrs	r3, r3, #13
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	4903      	ldr	r1, [pc, #12]	@ (8002fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa2:	5ccb      	ldrb	r3, [r1, r3]
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	0800676c 	.word	0x0800676c

08002fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb8:	b0a6      	sub	sp, #152	@ 0x98
 8002fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fda:	4bc8      	ldr	r3, [pc, #800]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x348>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	2b0c      	cmp	r3, #12
 8002fe4:	f200 817e 	bhi.w	80032e4 <HAL_RCC_GetSysClockFreq+0x330>
 8002fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fee:	bf00      	nop
 8002ff0:	08003025 	.word	0x08003025
 8002ff4:	080032e5 	.word	0x080032e5
 8002ff8:	080032e5 	.word	0x080032e5
 8002ffc:	080032e5 	.word	0x080032e5
 8003000:	0800302d 	.word	0x0800302d
 8003004:	080032e5 	.word	0x080032e5
 8003008:	080032e5 	.word	0x080032e5
 800300c:	080032e5 	.word	0x080032e5
 8003010:	08003035 	.word	0x08003035
 8003014:	080032e5 	.word	0x080032e5
 8003018:	080032e5 	.word	0x080032e5
 800301c:	080032e5 	.word	0x080032e5
 8003020:	0800319f 	.word	0x0800319f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003024:	4bb6      	ldr	r3, [pc, #728]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003026:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800302a:	e15f      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800302c:	4bb5      	ldr	r3, [pc, #724]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x350>)
 800302e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003032:	e15b      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003034:	4bb1      	ldr	r3, [pc, #708]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x348>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800303c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003040:	4bae      	ldr	r3, [pc, #696]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x348>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d031      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304c:	4bab      	ldr	r3, [pc, #684]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x348>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	099b      	lsrs	r3, r3, #6
 8003052:	2200      	movs	r2, #0
 8003054:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003056:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003058:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800305a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003060:	2300      	movs	r3, #0
 8003062:	667b      	str	r3, [r7, #100]	@ 0x64
 8003064:	4ba7      	ldr	r3, [pc, #668]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x350>)
 8003066:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800306a:	462a      	mov	r2, r5
 800306c:	fb03 f202 	mul.w	r2, r3, r2
 8003070:	2300      	movs	r3, #0
 8003072:	4621      	mov	r1, r4
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	4413      	add	r3, r2
 800307a:	4aa2      	ldr	r2, [pc, #648]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x350>)
 800307c:	4621      	mov	r1, r4
 800307e:	fba1 1202 	umull	r1, r2, r1, r2
 8003082:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003084:	460a      	mov	r2, r1
 8003086:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003088:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800308a:	4413      	add	r3, r2
 800308c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800308e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003092:	2200      	movs	r2, #0
 8003094:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003096:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003098:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800309c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80030a0:	f7fd f906 	bl	80002b0 <__aeabi_uldivmod>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4613      	mov	r3, r2
 80030aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80030ae:	e064      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b0:	4b92      	ldr	r3, [pc, #584]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x348>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	099b      	lsrs	r3, r3, #6
 80030b6:	2200      	movs	r2, #0
 80030b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80030ba:	657a      	str	r2, [r7, #84]	@ 0x54
 80030bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030c4:	2300      	movs	r3, #0
 80030c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030c8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80030cc:	4622      	mov	r2, r4
 80030ce:	462b      	mov	r3, r5
 80030d0:	f04f 0000 	mov.w	r0, #0
 80030d4:	f04f 0100 	mov.w	r1, #0
 80030d8:	0159      	lsls	r1, r3, #5
 80030da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030de:	0150      	lsls	r0, r2, #5
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4621      	mov	r1, r4
 80030e6:	1a51      	subs	r1, r2, r1
 80030e8:	6139      	str	r1, [r7, #16]
 80030ea:	4629      	mov	r1, r5
 80030ec:	eb63 0301 	sbc.w	r3, r3, r1
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030fe:	4659      	mov	r1, fp
 8003100:	018b      	lsls	r3, r1, #6
 8003102:	4651      	mov	r1, sl
 8003104:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003108:	4651      	mov	r1, sl
 800310a:	018a      	lsls	r2, r1, #6
 800310c:	4651      	mov	r1, sl
 800310e:	ebb2 0801 	subs.w	r8, r2, r1
 8003112:	4659      	mov	r1, fp
 8003114:	eb63 0901 	sbc.w	r9, r3, r1
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003124:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003128:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800312c:	4690      	mov	r8, r2
 800312e:	4699      	mov	r9, r3
 8003130:	4623      	mov	r3, r4
 8003132:	eb18 0303 	adds.w	r3, r8, r3
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	462b      	mov	r3, r5
 800313a:	eb49 0303 	adc.w	r3, r9, r3
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800314c:	4629      	mov	r1, r5
 800314e:	028b      	lsls	r3, r1, #10
 8003150:	4621      	mov	r1, r4
 8003152:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003156:	4621      	mov	r1, r4
 8003158:	028a      	lsls	r2, r1, #10
 800315a:	4610      	mov	r0, r2
 800315c:	4619      	mov	r1, r3
 800315e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003162:	2200      	movs	r2, #0
 8003164:	643b      	str	r3, [r7, #64]	@ 0x40
 8003166:	647a      	str	r2, [r7, #68]	@ 0x44
 8003168:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800316c:	f7fd f8a0 	bl	80002b0 <__aeabi_uldivmod>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4613      	mov	r3, r2
 8003176:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800317a:	4b60      	ldr	r3, [pc, #384]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x348>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	0c1b      	lsrs	r3, r3, #16
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	3301      	adds	r3, #1
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800318c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003190:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800319c:	e0a6      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800319e:	4b57      	ldr	r3, [pc, #348]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x348>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031aa:	4b54      	ldr	r3, [pc, #336]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x348>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d02a      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b6:	4b51      	ldr	r3, [pc, #324]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x348>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	099b      	lsrs	r3, r3, #6
 80031bc:	2200      	movs	r2, #0
 80031be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80031c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031c8:	2100      	movs	r1, #0
 80031ca:	4b4e      	ldr	r3, [pc, #312]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x350>)
 80031cc:	fb03 f201 	mul.w	r2, r3, r1
 80031d0:	2300      	movs	r3, #0
 80031d2:	fb00 f303 	mul.w	r3, r0, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	4a4a      	ldr	r2, [pc, #296]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x350>)
 80031da:	fba0 1202 	umull	r1, r2, r0, r2
 80031de:	677a      	str	r2, [r7, #116]	@ 0x74
 80031e0:	460a      	mov	r2, r1
 80031e2:	673a      	str	r2, [r7, #112]	@ 0x70
 80031e4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80031e6:	4413      	add	r3, r2
 80031e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80031ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031ee:	2200      	movs	r2, #0
 80031f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80031f2:	637a      	str	r2, [r7, #52]	@ 0x34
 80031f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80031f8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80031fc:	f7fd f858 	bl	80002b0 <__aeabi_uldivmod>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4613      	mov	r3, r2
 8003206:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800320a:	e05b      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320c:	4b3b      	ldr	r3, [pc, #236]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x348>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	099b      	lsrs	r3, r3, #6
 8003212:	2200      	movs	r2, #0
 8003214:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003216:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321e:	623b      	str	r3, [r7, #32]
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
 8003224:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003228:	4642      	mov	r2, r8
 800322a:	464b      	mov	r3, r9
 800322c:	f04f 0000 	mov.w	r0, #0
 8003230:	f04f 0100 	mov.w	r1, #0
 8003234:	0159      	lsls	r1, r3, #5
 8003236:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800323a:	0150      	lsls	r0, r2, #5
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4641      	mov	r1, r8
 8003242:	ebb2 0a01 	subs.w	sl, r2, r1
 8003246:	4649      	mov	r1, r9
 8003248:	eb63 0b01 	sbc.w	fp, r3, r1
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003258:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800325c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003260:	ebb2 040a 	subs.w	r4, r2, sl
 8003264:	eb63 050b 	sbc.w	r5, r3, fp
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	00eb      	lsls	r3, r5, #3
 8003272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003276:	00e2      	lsls	r2, r4, #3
 8003278:	4614      	mov	r4, r2
 800327a:	461d      	mov	r5, r3
 800327c:	4643      	mov	r3, r8
 800327e:	18e3      	adds	r3, r4, r3
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	464b      	mov	r3, r9
 8003284:	eb45 0303 	adc.w	r3, r5, r3
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003296:	4629      	mov	r1, r5
 8003298:	028b      	lsls	r3, r1, #10
 800329a:	4621      	mov	r1, r4
 800329c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032a0:	4621      	mov	r1, r4
 80032a2:	028a      	lsls	r2, r1, #10
 80032a4:	4610      	mov	r0, r2
 80032a6:	4619      	mov	r1, r3
 80032a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032ac:	2200      	movs	r2, #0
 80032ae:	61bb      	str	r3, [r7, #24]
 80032b0:	61fa      	str	r2, [r7, #28]
 80032b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032b6:	f7fc fffb 	bl	80002b0 <__aeabi_uldivmod>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4613      	mov	r3, r2
 80032c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80032c4:	4b0d      	ldr	r3, [pc, #52]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x348>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	0f1b      	lsrs	r3, r3, #28
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80032d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80032d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032da:	fbb2 f3f3 	udiv	r3, r2, r3
 80032de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80032e2:	e003      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032e4:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x34c>)
 80032e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80032ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3798      	adds	r7, #152	@ 0x98
 80032f4:	46bd      	mov	sp, r7
 80032f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800
 8003300:	00f42400 	.word	0x00f42400
 8003304:	017d7840 	.word	0x017d7840

08003308 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800330e:	f7fe fee1 	bl	80020d4 <HAL_GetTick>
 8003312:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003314:	4b72      	ldr	r3, [pc, #456]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a71      	ldr	r2, [pc, #452]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003320:	e008      	b.n	8003334 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003322:	f7fe fed7 	bl	80020d4 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e0d0      	b.n	80034d6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003334:	4b6a      	ldr	r3, [pc, #424]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003340:	4b67      	ldr	r3, [pc, #412]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a66      	ldr	r2, [pc, #408]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800334a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800334c:	f7fe fec2 	bl	80020d4 <HAL_GetTick>
 8003350:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003352:	4b63      	ldr	r3, [pc, #396]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003354:	2200      	movs	r2, #0
 8003356:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003358:	e00a      	b.n	8003370 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335a:	f7fe febb 	bl	80020d4 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003368:	4293      	cmp	r3, r2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e0b2      	b.n	80034d6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003370:	4b5b      	ldr	r3, [pc, #364]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1ee      	bne.n	800335a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800337c:	f7fe feaa 	bl	80020d4 <HAL_GetTick>
 8003380:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003382:	4b57      	ldr	r3, [pc, #348]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a56      	ldr	r2, [pc, #344]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003388:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 800338c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003390:	f7fe fea0 	bl	80020d4 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	@ 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e099      	b.n	80034d6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80033a2:	4b4f      	ldr	r3, [pc, #316]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80033ae:	f7fe fe91 	bl	80020d4 <HAL_GetTick>
 80033b2:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80033b4:	4b4a      	ldr	r3, [pc, #296]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a49      	ldr	r2, [pc, #292]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 80033ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033be:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c2:	f7fe fe87 	bl	80020d4 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e080      	b.n	80034d6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80033d4:	4b42      	ldr	r3, [pc, #264]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f0      	bne.n	80033c2 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80033e0:	f7fe fe78 	bl	80020d4 <HAL_GetTick>
 80033e4:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80033e6:	4b3e      	ldr	r3, [pc, #248]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a3d      	ldr	r2, [pc, #244]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 80033ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80033f0:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033f4:	f7fe fe6e 	bl	80020d4 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e067      	b.n	80034d6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003406:	4b36      	ldr	r3, [pc, #216]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003412:	f7fe fe5f 	bl	80020d4 <HAL_GetTick>
 8003416:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8003418:	4b31      	ldr	r3, [pc, #196]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a30      	ldr	r2, [pc, #192]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 800341e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003422:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003426:	f7fe fe55 	bl	80020d4 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e04e      	b.n	80034d6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003438:	4b29      	ldr	r3, [pc, #164]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1f0      	bne.n	8003426 <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8003444:	4b26      	ldr	r3, [pc, #152]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003446:	4a27      	ldr	r2, [pc, #156]	@ (80034e4 <HAL_RCC_DeInit+0x1dc>)
 8003448:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800344a:	4b25      	ldr	r3, [pc, #148]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 800344c:	4a25      	ldr	r2, [pc, #148]	@ (80034e4 <HAL_RCC_DeInit+0x1dc>)
 800344e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 8003452:	4b23      	ldr	r3, [pc, #140]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003454:	4a24      	ldr	r2, [pc, #144]	@ (80034e8 <HAL_RCC_DeInit+0x1e0>)
 8003456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800345a:	4b21      	ldr	r3, [pc, #132]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	4a20      	ldr	r2, [pc, #128]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003460:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8003464:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003466:	4b1e      	ldr	r3, [pc, #120]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	4a1d      	ldr	r2, [pc, #116]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 800346c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003470:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8003472:	4b1b      	ldr	r3, [pc, #108]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	4a1a      	ldr	r2, [pc, #104]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003478:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800347c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 800347e:	4b18      	ldr	r3, [pc, #96]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	4a17      	ldr	r2, [pc, #92]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003484:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8003488:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800348a:	4b15      	ldr	r3, [pc, #84]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	4a14      	ldr	r2, [pc, #80]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003490:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003494:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8003496:	4b12      	ldr	r3, [pc, #72]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	4a11      	ldr	r2, [pc, #68]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 800349c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80034a2:	4b0f      	ldr	r3, [pc, #60]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 80034a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a6:	4a0e      	ldr	r2, [pc, #56]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80034ae:	4b0c      	ldr	r3, [pc, #48]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 80034b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034b2:	4a0b      	ldr	r2, [pc, #44]	@ (80034e0 <HAL_RCC_DeInit+0x1d8>)
 80034b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034b8:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80034ba:	4b0c      	ldr	r3, [pc, #48]	@ (80034ec <HAL_RCC_DeInit+0x1e4>)
 80034bc:	4a0c      	ldr	r2, [pc, #48]	@ (80034f0 <HAL_RCC_DeInit+0x1e8>)
 80034be:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034c0:	4b0c      	ldr	r3, [pc, #48]	@ (80034f4 <HAL_RCC_DeInit+0x1ec>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fe fdc1 	bl	800204c <HAL_InitTick>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 80034d4:	2300      	movs	r3, #0
  }
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800
 80034e4:	24003010 	.word	0x24003010
 80034e8:	04003010 	.word	0x04003010
 80034ec:	20000008 	.word	0x20000008
 80034f0:	00f42400 	.word	0x00f42400
 80034f4:	2000000c 	.word	0x2000000c

080034f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e28d      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 8083 	beq.w	800361e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003518:	4b94      	ldr	r3, [pc, #592]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 030c 	and.w	r3, r3, #12
 8003520:	2b04      	cmp	r3, #4
 8003522:	d019      	beq.n	8003558 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003524:	4b91      	ldr	r3, [pc, #580]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 030c 	and.w	r3, r3, #12
        || \
 800352c:	2b08      	cmp	r3, #8
 800352e:	d106      	bne.n	800353e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003530:	4b8e      	ldr	r3, [pc, #568]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003538:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800353c:	d00c      	beq.n	8003558 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353e:	4b8b      	ldr	r3, [pc, #556]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003546:	2b0c      	cmp	r3, #12
 8003548:	d112      	bne.n	8003570 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800354a:	4b88      	ldr	r3, [pc, #544]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003552:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003556:	d10b      	bne.n	8003570 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003558:	4b84      	ldr	r3, [pc, #528]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d05b      	beq.n	800361c <HAL_RCC_OscConfig+0x124>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d157      	bne.n	800361c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e25a      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003578:	d106      	bne.n	8003588 <HAL_RCC_OscConfig+0x90>
 800357a:	4b7c      	ldr	r3, [pc, #496]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a7b      	ldr	r2, [pc, #492]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e01d      	b.n	80035c4 <HAL_RCC_OscConfig+0xcc>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0xb4>
 8003592:	4b76      	ldr	r3, [pc, #472]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a75      	ldr	r2, [pc, #468]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 8003598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b73      	ldr	r3, [pc, #460]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a72      	ldr	r2, [pc, #456]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e00b      	b.n	80035c4 <HAL_RCC_OscConfig+0xcc>
 80035ac:	4b6f      	ldr	r3, [pc, #444]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a6e      	ldr	r2, [pc, #440]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 80035b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4b6c      	ldr	r3, [pc, #432]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a6b      	ldr	r2, [pc, #428]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 80035be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d013      	beq.n	80035f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7fe fd82 	bl	80020d4 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d4:	f7fe fd7e 	bl	80020d4 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	@ 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e21f      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	4b61      	ldr	r3, [pc, #388]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0xdc>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fe fd6e 	bl	80020d4 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035fc:	f7fe fd6a 	bl	80020d4 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	@ 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e20b      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	4b57      	ldr	r3, [pc, #348]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x104>
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d06f      	beq.n	800370a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800362a:	4b50      	ldr	r3, [pc, #320]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b00      	cmp	r3, #0
 8003634:	d017      	beq.n	8003666 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003636:	4b4d      	ldr	r3, [pc, #308]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
        || \
 800363e:	2b08      	cmp	r3, #8
 8003640:	d105      	bne.n	800364e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003642:	4b4a      	ldr	r3, [pc, #296]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364e:	4b47      	ldr	r3, [pc, #284]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003656:	2b0c      	cmp	r3, #12
 8003658:	d11c      	bne.n	8003694 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800365a:	4b44      	ldr	r3, [pc, #272]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d116      	bne.n	8003694 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003666:	4b41      	ldr	r3, [pc, #260]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_RCC_OscConfig+0x186>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d001      	beq.n	800367e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e1d3      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367e:	4b3b      	ldr	r3, [pc, #236]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4937      	ldr	r1, [pc, #220]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 800368e:	4313      	orrs	r3, r2
 8003690:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003692:	e03a      	b.n	800370a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d020      	beq.n	80036de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800369c:	4b34      	ldr	r3, [pc, #208]	@ (8003770 <HAL_RCC_OscConfig+0x278>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7fe fd17 	bl	80020d4 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036aa:	f7fe fd13 	bl	80020d4 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e1b4      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036bc:	4b2b      	ldr	r3, [pc, #172]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b28      	ldr	r3, [pc, #160]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4925      	ldr	r1, [pc, #148]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	600b      	str	r3, [r1, #0]
 80036dc:	e015      	b.n	800370a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036de:	4b24      	ldr	r3, [pc, #144]	@ (8003770 <HAL_RCC_OscConfig+0x278>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe fcf6 	bl	80020d4 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ec:	f7fe fcf2 	bl	80020d4 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e193      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	4b1b      	ldr	r3, [pc, #108]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d036      	beq.n	8003784 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d016      	beq.n	800374c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371e:	4b15      	ldr	r3, [pc, #84]	@ (8003774 <HAL_RCC_OscConfig+0x27c>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fe fcd6 	bl	80020d4 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372c:	f7fe fcd2 	bl	80020d4 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e173      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373e:	4b0b      	ldr	r3, [pc, #44]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 8003740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x234>
 800374a:	e01b      	b.n	8003784 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800374c:	4b09      	ldr	r3, [pc, #36]	@ (8003774 <HAL_RCC_OscConfig+0x27c>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003752:	f7fe fcbf 	bl	80020d4 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003758:	e00e      	b.n	8003778 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375a:	f7fe fcbb 	bl	80020d4 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d907      	bls.n	8003778 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e15c      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
 800376c:	40023800 	.word	0x40023800
 8003770:	42470000 	.word	0x42470000
 8003774:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003778:	4b8a      	ldr	r3, [pc, #552]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 800377a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ea      	bne.n	800375a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8097 	beq.w	80038c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003792:	2300      	movs	r3, #0
 8003794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003796:	4b83      	ldr	r3, [pc, #524]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10f      	bne.n	80037c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	4b7f      	ldr	r3, [pc, #508]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	4a7e      	ldr	r2, [pc, #504]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 80037ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037b2:	4b7c      	ldr	r3, [pc, #496]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037be:	2301      	movs	r3, #1
 80037c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c2:	4b79      	ldr	r3, [pc, #484]	@ (80039a8 <HAL_RCC_OscConfig+0x4b0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d118      	bne.n	8003800 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ce:	4b76      	ldr	r3, [pc, #472]	@ (80039a8 <HAL_RCC_OscConfig+0x4b0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a75      	ldr	r2, [pc, #468]	@ (80039a8 <HAL_RCC_OscConfig+0x4b0>)
 80037d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037da:	f7fe fc7b 	bl	80020d4 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e2:	f7fe fc77 	bl	80020d4 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e118      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f4:	4b6c      	ldr	r3, [pc, #432]	@ (80039a8 <HAL_RCC_OscConfig+0x4b0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d106      	bne.n	8003816 <HAL_RCC_OscConfig+0x31e>
 8003808:	4b66      	ldr	r3, [pc, #408]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380c:	4a65      	ldr	r2, [pc, #404]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	6713      	str	r3, [r2, #112]	@ 0x70
 8003814:	e01c      	b.n	8003850 <HAL_RCC_OscConfig+0x358>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b05      	cmp	r3, #5
 800381c:	d10c      	bne.n	8003838 <HAL_RCC_OscConfig+0x340>
 800381e:	4b61      	ldr	r3, [pc, #388]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003822:	4a60      	ldr	r2, [pc, #384]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 8003824:	f043 0304 	orr.w	r3, r3, #4
 8003828:	6713      	str	r3, [r2, #112]	@ 0x70
 800382a:	4b5e      	ldr	r3, [pc, #376]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382e:	4a5d      	ldr	r2, [pc, #372]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6713      	str	r3, [r2, #112]	@ 0x70
 8003836:	e00b      	b.n	8003850 <HAL_RCC_OscConfig+0x358>
 8003838:	4b5a      	ldr	r3, [pc, #360]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383c:	4a59      	ldr	r2, [pc, #356]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	6713      	str	r3, [r2, #112]	@ 0x70
 8003844:	4b57      	ldr	r3, [pc, #348]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003848:	4a56      	ldr	r2, [pc, #344]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 800384a:	f023 0304 	bic.w	r3, r3, #4
 800384e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d015      	beq.n	8003884 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003858:	f7fe fc3c 	bl	80020d4 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385e:	e00a      	b.n	8003876 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003860:	f7fe fc38 	bl	80020d4 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e0d7      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003876:	4b4b      	ldr	r3, [pc, #300]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0ee      	beq.n	8003860 <HAL_RCC_OscConfig+0x368>
 8003882:	e014      	b.n	80038ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003884:	f7fe fc26 	bl	80020d4 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7fe fc22 	bl	80020d4 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e0c1      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a2:	4b40      	ldr	r3, [pc, #256]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ee      	bne.n	800388c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d105      	bne.n	80038c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b4:	4b3b      	ldr	r3, [pc, #236]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	4a3a      	ldr	r2, [pc, #232]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 80038ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80ad 	beq.w	8003a24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ca:	4b36      	ldr	r3, [pc, #216]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d060      	beq.n	8003998 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d145      	bne.n	800396a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038de:	4b33      	ldr	r3, [pc, #204]	@ (80039ac <HAL_RCC_OscConfig+0x4b4>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fe fbf6 	bl	80020d4 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fe fbf2 	bl	80020d4 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e093      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fe:	4b29      	ldr	r3, [pc, #164]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69da      	ldr	r2, [r3, #28]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	019b      	lsls	r3, r3, #6
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	3b01      	subs	r3, #1
 8003924:	041b      	lsls	r3, r3, #16
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003934:	071b      	lsls	r3, r3, #28
 8003936:	491b      	ldr	r1, [pc, #108]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 8003938:	4313      	orrs	r3, r2
 800393a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800393c:	4b1b      	ldr	r3, [pc, #108]	@ (80039ac <HAL_RCC_OscConfig+0x4b4>)
 800393e:	2201      	movs	r2, #1
 8003940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003942:	f7fe fbc7 	bl	80020d4 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394a:	f7fe fbc3 	bl	80020d4 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e064      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395c:	4b11      	ldr	r3, [pc, #68]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x452>
 8003968:	e05c      	b.n	8003a24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396a:	4b10      	ldr	r3, [pc, #64]	@ (80039ac <HAL_RCC_OscConfig+0x4b4>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fe fbb0 	bl	80020d4 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003978:	f7fe fbac 	bl	80020d4 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e04d      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398a:	4b06      	ldr	r3, [pc, #24]	@ (80039a4 <HAL_RCC_OscConfig+0x4ac>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0x480>
 8003996:	e045      	b.n	8003a24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d107      	bne.n	80039b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e040      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
 80039a4:	40023800 	.word	0x40023800
 80039a8:	40007000 	.word	0x40007000
 80039ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a30 <HAL_RCC_OscConfig+0x538>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d030      	beq.n	8003a20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d129      	bne.n	8003a20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d122      	bne.n	8003a20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039e0:	4013      	ands	r3, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d119      	bne.n	8003a20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f6:	085b      	lsrs	r3, r3, #1
 80039f8:	3b01      	subs	r3, #1
 80039fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d10f      	bne.n	8003a20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d107      	bne.n	8003a20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800

08003a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e07b      	b.n	8003b3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d108      	bne.n	8003a60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a56:	d009      	beq.n	8003a6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	61da      	str	r2, [r3, #28]
 8003a5e:	e005      	b.n	8003a6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fe f83e 	bl	8001b08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aa2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af0:	ea42 0103 	orr.w	r1, r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	0c1b      	lsrs	r3, r3, #16
 8003b0a:	f003 0104 	and.w	r1, r3, #4
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b12:	f003 0210 	and.w	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b088      	sub	sp, #32
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b56:	f7fe fabd 	bl	80020d4 <HAL_GetTick>
 8003b5a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d001      	beq.n	8003b70 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e12a      	b.n	8003dc6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <HAL_SPI_Transmit+0x36>
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e122      	b.n	8003dc6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_SPI_Transmit+0x48>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e11b      	b.n	8003dc6 <HAL_SPI_Transmit+0x280>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2203      	movs	r2, #3
 8003b9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	88fa      	ldrh	r2, [r7, #6]
 8003bae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	88fa      	ldrh	r2, [r7, #6]
 8003bb4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bdc:	d10f      	bne.n	8003bfe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c08:	2b40      	cmp	r3, #64	@ 0x40
 8003c0a:	d007      	beq.n	8003c1c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c24:	d152      	bne.n	8003ccc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_SPI_Transmit+0xee>
 8003c2e:	8b7b      	ldrh	r3, [r7, #26]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d145      	bne.n	8003cc0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c38:	881a      	ldrh	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c44:	1c9a      	adds	r2, r3, #2
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c58:	e032      	b.n	8003cc0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d112      	bne.n	8003c8e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6c:	881a      	ldrh	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c78:	1c9a      	adds	r2, r3, #2
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c8c:	e018      	b.n	8003cc0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c8e:	f7fe fa21 	bl	80020d4 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d803      	bhi.n	8003ca6 <HAL_SPI_Transmit+0x160>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d102      	bne.n	8003cac <HAL_SPI_Transmit+0x166>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d109      	bne.n	8003cc0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e082      	b.n	8003dc6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1c7      	bne.n	8003c5a <HAL_SPI_Transmit+0x114>
 8003cca:	e053      	b.n	8003d74 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_SPI_Transmit+0x194>
 8003cd4:	8b7b      	ldrh	r3, [r7, #26]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d147      	bne.n	8003d6a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	7812      	ldrb	r2, [r2, #0]
 8003ce6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d00:	e033      	b.n	8003d6a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d113      	bne.n	8003d38 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	7812      	ldrb	r2, [r2, #0]
 8003d1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d36:	e018      	b.n	8003d6a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d38:	f7fe f9cc 	bl	80020d4 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d803      	bhi.n	8003d50 <HAL_SPI_Transmit+0x20a>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4e:	d102      	bne.n	8003d56 <HAL_SPI_Transmit+0x210>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e02d      	b.n	8003dc6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1c6      	bne.n	8003d02 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	6839      	ldr	r1, [r7, #0]
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f8b1 	bl	8003ee0 <SPI_EndRxTxTransaction>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2220      	movs	r2, #32
 8003d88:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10a      	bne.n	8003da8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
  }
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3720      	adds	r7, #32
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003de0:	f7fe f978 	bl	80020d4 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	4413      	add	r3, r2
 8003dee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003df0:	f7fe f970 	bl	80020d4 <HAL_GetTick>
 8003df4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003df6:	4b39      	ldr	r3, [pc, #228]	@ (8003edc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	015b      	lsls	r3, r3, #5
 8003dfc:	0d1b      	lsrs	r3, r3, #20
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	fb02 f303 	mul.w	r3, r2, r3
 8003e04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e06:	e055      	b.n	8003eb4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0e:	d051      	beq.n	8003eb4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e10:	f7fe f960 	bl	80020d4 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d902      	bls.n	8003e26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d13d      	bne.n	8003ea2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e3e:	d111      	bne.n	8003e64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e48:	d004      	beq.n	8003e54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e52:	d107      	bne.n	8003e64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e6c:	d10f      	bne.n	8003e8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e018      	b.n	8003ed4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	e002      	b.n	8003eb4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	bf0c      	ite	eq
 8003ec4:	2301      	moveq	r3, #1
 8003ec6:	2300      	movne	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d19a      	bne.n	8003e08 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3720      	adds	r7, #32
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000008 	.word	0x20000008

08003ee0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff ff6a 	bl	8003dd0 <SPI_WaitFlagStateUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f06:	f043 0220 	orr.w	r2, r3, #32
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e032      	b.n	8003f78 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f12:	4b1b      	ldr	r3, [pc, #108]	@ (8003f80 <SPI_EndRxTxTransaction+0xa0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1b      	ldr	r2, [pc, #108]	@ (8003f84 <SPI_EndRxTxTransaction+0xa4>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	0d5b      	lsrs	r3, r3, #21
 8003f1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f30:	d112      	bne.n	8003f58 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2180      	movs	r1, #128	@ 0x80
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f7ff ff47 	bl	8003dd0 <SPI_WaitFlagStateUntilTimeout>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d016      	beq.n	8003f76 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4c:	f043 0220 	orr.w	r2, r3, #32
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e00f      	b.n	8003f78 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f6e:	2b80      	cmp	r3, #128	@ 0x80
 8003f70:	d0f2      	beq.n	8003f58 <SPI_EndRxTxTransaction+0x78>
 8003f72:	e000      	b.n	8003f76 <SPI_EndRxTxTransaction+0x96>
        break;
 8003f74:	bf00      	nop
  }

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20000008 	.word	0x20000008
 8003f84:	165e9f81 	.word	0x165e9f81

08003f88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e042      	b.n	8004020 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fd fdf2 	bl	8001b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2224      	movs	r2, #36	@ 0x24
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fa09 	bl	80043e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	@ 0x28
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b20      	cmp	r3, #32
 8004046:	d175      	bne.n	8004134 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_UART_Transmit+0x2c>
 800404e:	88fb      	ldrh	r3, [r7, #6]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e06e      	b.n	8004136 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2221      	movs	r2, #33	@ 0x21
 8004062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004066:	f7fe f835 	bl	80020d4 <HAL_GetTick>
 800406a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	88fa      	ldrh	r2, [r7, #6]
 8004070:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	88fa      	ldrh	r2, [r7, #6]
 8004076:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004080:	d108      	bne.n	8004094 <HAL_UART_Transmit+0x6c>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d104      	bne.n	8004094 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	61bb      	str	r3, [r7, #24]
 8004092:	e003      	b.n	800409c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004098:	2300      	movs	r3, #0
 800409a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800409c:	e02e      	b.n	80040fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2200      	movs	r2, #0
 80040a6:	2180      	movs	r1, #128	@ 0x80
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f8df 	bl	800426c <UART_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e03a      	b.n	8004136 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10b      	bne.n	80040de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	3302      	adds	r3, #2
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	e007      	b.n	80040ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	781a      	ldrb	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	3301      	adds	r3, #1
 80040ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1cb      	bne.n	800409e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2200      	movs	r2, #0
 800410e:	2140      	movs	r1, #64	@ 0x40
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f8ab 	bl	800426c <UART_WaitOnFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e006      	b.n	8004136 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	e000      	b.n	8004136 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004134:	2302      	movs	r3, #2
  }
}
 8004136:	4618      	mov	r0, r3
 8004138:	3720      	adds	r7, #32
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b08a      	sub	sp, #40	@ 0x28
 8004142:	af02      	add	r7, sp, #8
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	4613      	mov	r3, r2
 800414c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b20      	cmp	r3, #32
 800415c:	f040 8081 	bne.w	8004262 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_UART_Receive+0x2e>
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e079      	b.n	8004264 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2222      	movs	r2, #34	@ 0x22
 800417a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004184:	f7fd ffa6 	bl	80020d4 <HAL_GetTick>
 8004188:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	88fa      	ldrh	r2, [r7, #6]
 800418e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	88fa      	ldrh	r2, [r7, #6]
 8004194:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800419e:	d108      	bne.n	80041b2 <HAL_UART_Receive+0x74>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d104      	bne.n	80041b2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	e003      	b.n	80041ba <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80041ba:	e047      	b.n	800424c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2200      	movs	r2, #0
 80041c4:	2120      	movs	r1, #32
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f850 	bl	800426c <UART_WaitOnFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d005      	beq.n	80041de <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e042      	b.n	8004264 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10c      	bne.n	80041fe <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	3302      	adds	r3, #2
 80041fa:	61bb      	str	r3, [r7, #24]
 80041fc:	e01f      	b.n	800423e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004206:	d007      	beq.n	8004218 <HAL_UART_Receive+0xda>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10a      	bne.n	8004226 <HAL_UART_Receive+0xe8>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d106      	bne.n	8004226 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	b2da      	uxtb	r2, r3
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	e008      	b.n	8004238 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004232:	b2da      	uxtb	r2, r3
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	3301      	adds	r3, #1
 800423c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1b2      	bne.n	80041bc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	e000      	b.n	8004264 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004262:	2302      	movs	r3, #2
  }
}
 8004264:	4618      	mov	r0, r3
 8004266:	3720      	adds	r7, #32
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	4613      	mov	r3, r2
 800427a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427c:	e03b      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004284:	d037      	beq.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004286:	f7fd ff25 	bl	80020d4 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	6a3a      	ldr	r2, [r7, #32]
 8004292:	429a      	cmp	r2, r3
 8004294:	d302      	bcc.n	800429c <UART_WaitOnFlagUntilTimeout+0x30>
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e03a      	b.n	8004316 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d023      	beq.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b80      	cmp	r3, #128	@ 0x80
 80042b2:	d020      	beq.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b40      	cmp	r3, #64	@ 0x40
 80042b8:	d01d      	beq.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d116      	bne.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f81d 	bl	800431e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2208      	movs	r2, #8
 80042e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e00f      	b.n	8004316 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4013      	ands	r3, r2
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	429a      	cmp	r2, r3
 8004304:	bf0c      	ite	eq
 8004306:	2301      	moveq	r3, #1
 8004308:	2300      	movne	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	429a      	cmp	r2, r3
 8004312:	d0b4      	beq.n	800427e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800431e:	b480      	push	{r7}
 8004320:	b095      	sub	sp, #84	@ 0x54
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004338:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800433c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004346:	643a      	str	r2, [r7, #64]	@ 0x40
 8004348:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800434c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e5      	bne.n	8004326 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3314      	adds	r3, #20
 8004360:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	61fb      	str	r3, [r7, #28]
   return(result);
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3314      	adds	r3, #20
 8004378:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800437a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800437c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004380:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004382:	e841 2300 	strex	r3, r2, [r1]
 8004386:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e5      	bne.n	800435a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004392:	2b01      	cmp	r3, #1
 8004394:	d119      	bne.n	80043ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f023 0310 	bic.w	r3, r3, #16
 80043ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	330c      	adds	r3, #12
 80043b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043b6:	61ba      	str	r2, [r7, #24]
 80043b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6979      	ldr	r1, [r7, #20]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	613b      	str	r3, [r7, #16]
   return(result);
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e5      	bne.n	8004396 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80043d8:	bf00      	nop
 80043da:	3754      	adds	r7, #84	@ 0x54
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e8:	b0c0      	sub	sp, #256	@ 0x100
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004400:	68d9      	ldr	r1, [r3, #12]
 8004402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	ea40 0301 	orr.w	r3, r0, r1
 800440c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800440e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	431a      	orrs	r2, r3
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	431a      	orrs	r2, r3
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800443c:	f021 010c 	bic.w	r1, r1, #12
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800444a:	430b      	orrs	r3, r1
 800444c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800445a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445e:	6999      	ldr	r1, [r3, #24]
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	ea40 0301 	orr.w	r3, r0, r1
 800446a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	4b8f      	ldr	r3, [pc, #572]	@ (80046b0 <UART_SetConfig+0x2cc>)
 8004474:	429a      	cmp	r2, r3
 8004476:	d005      	beq.n	8004484 <UART_SetConfig+0xa0>
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	4b8d      	ldr	r3, [pc, #564]	@ (80046b4 <UART_SetConfig+0x2d0>)
 8004480:	429a      	cmp	r2, r3
 8004482:	d104      	bne.n	800448e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004484:	f7fe fd82 	bl	8002f8c <HAL_RCC_GetPCLK2Freq>
 8004488:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800448c:	e003      	b.n	8004496 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800448e:	f7fe fd69 	bl	8002f64 <HAL_RCC_GetPCLK1Freq>
 8004492:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044a0:	f040 810c 	bne.w	80046bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80044b6:	4622      	mov	r2, r4
 80044b8:	462b      	mov	r3, r5
 80044ba:	1891      	adds	r1, r2, r2
 80044bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044be:	415b      	adcs	r3, r3
 80044c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044c6:	4621      	mov	r1, r4
 80044c8:	eb12 0801 	adds.w	r8, r2, r1
 80044cc:	4629      	mov	r1, r5
 80044ce:	eb43 0901 	adc.w	r9, r3, r1
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044e6:	4690      	mov	r8, r2
 80044e8:	4699      	mov	r9, r3
 80044ea:	4623      	mov	r3, r4
 80044ec:	eb18 0303 	adds.w	r3, r8, r3
 80044f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044f4:	462b      	mov	r3, r5
 80044f6:	eb49 0303 	adc.w	r3, r9, r3
 80044fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800450a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800450e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004512:	460b      	mov	r3, r1
 8004514:	18db      	adds	r3, r3, r3
 8004516:	653b      	str	r3, [r7, #80]	@ 0x50
 8004518:	4613      	mov	r3, r2
 800451a:	eb42 0303 	adc.w	r3, r2, r3
 800451e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004520:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004524:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004528:	f7fb fec2 	bl	80002b0 <__aeabi_uldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4b61      	ldr	r3, [pc, #388]	@ (80046b8 <UART_SetConfig+0x2d4>)
 8004532:	fba3 2302 	umull	r2, r3, r3, r2
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	011c      	lsls	r4, r3, #4
 800453a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800453e:	2200      	movs	r2, #0
 8004540:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004544:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004548:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800454c:	4642      	mov	r2, r8
 800454e:	464b      	mov	r3, r9
 8004550:	1891      	adds	r1, r2, r2
 8004552:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004554:	415b      	adcs	r3, r3
 8004556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004558:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800455c:	4641      	mov	r1, r8
 800455e:	eb12 0a01 	adds.w	sl, r2, r1
 8004562:	4649      	mov	r1, r9
 8004564:	eb43 0b01 	adc.w	fp, r3, r1
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004574:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004578:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800457c:	4692      	mov	sl, r2
 800457e:	469b      	mov	fp, r3
 8004580:	4643      	mov	r3, r8
 8004582:	eb1a 0303 	adds.w	r3, sl, r3
 8004586:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800458a:	464b      	mov	r3, r9
 800458c:	eb4b 0303 	adc.w	r3, fp, r3
 8004590:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80045a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045a8:	460b      	mov	r3, r1
 80045aa:	18db      	adds	r3, r3, r3
 80045ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80045ae:	4613      	mov	r3, r2
 80045b0:	eb42 0303 	adc.w	r3, r2, r3
 80045b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80045ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80045be:	f7fb fe77 	bl	80002b0 <__aeabi_uldivmod>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	4b3b      	ldr	r3, [pc, #236]	@ (80046b8 <UART_SetConfig+0x2d4>)
 80045ca:	fba3 2301 	umull	r2, r3, r3, r1
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	2264      	movs	r2, #100	@ 0x64
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	1acb      	subs	r3, r1, r3
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045de:	4b36      	ldr	r3, [pc, #216]	@ (80046b8 <UART_SetConfig+0x2d4>)
 80045e0:	fba3 2302 	umull	r2, r3, r3, r2
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045ec:	441c      	add	r4, r3
 80045ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004600:	4642      	mov	r2, r8
 8004602:	464b      	mov	r3, r9
 8004604:	1891      	adds	r1, r2, r2
 8004606:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004608:	415b      	adcs	r3, r3
 800460a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800460c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004610:	4641      	mov	r1, r8
 8004612:	1851      	adds	r1, r2, r1
 8004614:	6339      	str	r1, [r7, #48]	@ 0x30
 8004616:	4649      	mov	r1, r9
 8004618:	414b      	adcs	r3, r1
 800461a:	637b      	str	r3, [r7, #52]	@ 0x34
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004628:	4659      	mov	r1, fp
 800462a:	00cb      	lsls	r3, r1, #3
 800462c:	4651      	mov	r1, sl
 800462e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004632:	4651      	mov	r1, sl
 8004634:	00ca      	lsls	r2, r1, #3
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	4603      	mov	r3, r0
 800463c:	4642      	mov	r2, r8
 800463e:	189b      	adds	r3, r3, r2
 8004640:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004644:	464b      	mov	r3, r9
 8004646:	460a      	mov	r2, r1
 8004648:	eb42 0303 	adc.w	r3, r2, r3
 800464c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800465c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004660:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004664:	460b      	mov	r3, r1
 8004666:	18db      	adds	r3, r3, r3
 8004668:	62bb      	str	r3, [r7, #40]	@ 0x28
 800466a:	4613      	mov	r3, r2
 800466c:	eb42 0303 	adc.w	r3, r2, r3
 8004670:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004672:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004676:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800467a:	f7fb fe19 	bl	80002b0 <__aeabi_uldivmod>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4b0d      	ldr	r3, [pc, #52]	@ (80046b8 <UART_SetConfig+0x2d4>)
 8004684:	fba3 1302 	umull	r1, r3, r3, r2
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	2164      	movs	r1, #100	@ 0x64
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	3332      	adds	r3, #50	@ 0x32
 8004696:	4a08      	ldr	r2, [pc, #32]	@ (80046b8 <UART_SetConfig+0x2d4>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	f003 0207 	and.w	r2, r3, #7
 80046a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4422      	add	r2, r4
 80046aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046ac:	e106      	b.n	80048bc <UART_SetConfig+0x4d8>
 80046ae:	bf00      	nop
 80046b0:	40011000 	.word	0x40011000
 80046b4:	40011400 	.word	0x40011400
 80046b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046c0:	2200      	movs	r2, #0
 80046c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046ce:	4642      	mov	r2, r8
 80046d0:	464b      	mov	r3, r9
 80046d2:	1891      	adds	r1, r2, r2
 80046d4:	6239      	str	r1, [r7, #32]
 80046d6:	415b      	adcs	r3, r3
 80046d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046de:	4641      	mov	r1, r8
 80046e0:	1854      	adds	r4, r2, r1
 80046e2:	4649      	mov	r1, r9
 80046e4:	eb43 0501 	adc.w	r5, r3, r1
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	00eb      	lsls	r3, r5, #3
 80046f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046f6:	00e2      	lsls	r2, r4, #3
 80046f8:	4614      	mov	r4, r2
 80046fa:	461d      	mov	r5, r3
 80046fc:	4643      	mov	r3, r8
 80046fe:	18e3      	adds	r3, r4, r3
 8004700:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004704:	464b      	mov	r3, r9
 8004706:	eb45 0303 	adc.w	r3, r5, r3
 800470a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800470e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800471a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800472a:	4629      	mov	r1, r5
 800472c:	008b      	lsls	r3, r1, #2
 800472e:	4621      	mov	r1, r4
 8004730:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004734:	4621      	mov	r1, r4
 8004736:	008a      	lsls	r2, r1, #2
 8004738:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800473c:	f7fb fdb8 	bl	80002b0 <__aeabi_uldivmod>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4b60      	ldr	r3, [pc, #384]	@ (80048c8 <UART_SetConfig+0x4e4>)
 8004746:	fba3 2302 	umull	r2, r3, r3, r2
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	011c      	lsls	r4, r3, #4
 800474e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004752:	2200      	movs	r2, #0
 8004754:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004758:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800475c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004760:	4642      	mov	r2, r8
 8004762:	464b      	mov	r3, r9
 8004764:	1891      	adds	r1, r2, r2
 8004766:	61b9      	str	r1, [r7, #24]
 8004768:	415b      	adcs	r3, r3
 800476a:	61fb      	str	r3, [r7, #28]
 800476c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004770:	4641      	mov	r1, r8
 8004772:	1851      	adds	r1, r2, r1
 8004774:	6139      	str	r1, [r7, #16]
 8004776:	4649      	mov	r1, r9
 8004778:	414b      	adcs	r3, r1
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004788:	4659      	mov	r1, fp
 800478a:	00cb      	lsls	r3, r1, #3
 800478c:	4651      	mov	r1, sl
 800478e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004792:	4651      	mov	r1, sl
 8004794:	00ca      	lsls	r2, r1, #3
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	4603      	mov	r3, r0
 800479c:	4642      	mov	r2, r8
 800479e:	189b      	adds	r3, r3, r2
 80047a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047a4:	464b      	mov	r3, r9
 80047a6:	460a      	mov	r2, r1
 80047a8:	eb42 0303 	adc.w	r3, r2, r3
 80047ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047c8:	4649      	mov	r1, r9
 80047ca:	008b      	lsls	r3, r1, #2
 80047cc:	4641      	mov	r1, r8
 80047ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047d2:	4641      	mov	r1, r8
 80047d4:	008a      	lsls	r2, r1, #2
 80047d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047da:	f7fb fd69 	bl	80002b0 <__aeabi_uldivmod>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4611      	mov	r1, r2
 80047e4:	4b38      	ldr	r3, [pc, #224]	@ (80048c8 <UART_SetConfig+0x4e4>)
 80047e6:	fba3 2301 	umull	r2, r3, r3, r1
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	2264      	movs	r2, #100	@ 0x64
 80047ee:	fb02 f303 	mul.w	r3, r2, r3
 80047f2:	1acb      	subs	r3, r1, r3
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	3332      	adds	r3, #50	@ 0x32
 80047f8:	4a33      	ldr	r2, [pc, #204]	@ (80048c8 <UART_SetConfig+0x4e4>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004804:	441c      	add	r4, r3
 8004806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800480a:	2200      	movs	r2, #0
 800480c:	673b      	str	r3, [r7, #112]	@ 0x70
 800480e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004810:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004814:	4642      	mov	r2, r8
 8004816:	464b      	mov	r3, r9
 8004818:	1891      	adds	r1, r2, r2
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	415b      	adcs	r3, r3
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004824:	4641      	mov	r1, r8
 8004826:	1851      	adds	r1, r2, r1
 8004828:	6039      	str	r1, [r7, #0]
 800482a:	4649      	mov	r1, r9
 800482c:	414b      	adcs	r3, r1
 800482e:	607b      	str	r3, [r7, #4]
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800483c:	4659      	mov	r1, fp
 800483e:	00cb      	lsls	r3, r1, #3
 8004840:	4651      	mov	r1, sl
 8004842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004846:	4651      	mov	r1, sl
 8004848:	00ca      	lsls	r2, r1, #3
 800484a:	4610      	mov	r0, r2
 800484c:	4619      	mov	r1, r3
 800484e:	4603      	mov	r3, r0
 8004850:	4642      	mov	r2, r8
 8004852:	189b      	adds	r3, r3, r2
 8004854:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004856:	464b      	mov	r3, r9
 8004858:	460a      	mov	r2, r1
 800485a:	eb42 0303 	adc.w	r3, r2, r3
 800485e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	663b      	str	r3, [r7, #96]	@ 0x60
 800486a:	667a      	str	r2, [r7, #100]	@ 0x64
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004878:	4649      	mov	r1, r9
 800487a:	008b      	lsls	r3, r1, #2
 800487c:	4641      	mov	r1, r8
 800487e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004882:	4641      	mov	r1, r8
 8004884:	008a      	lsls	r2, r1, #2
 8004886:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800488a:	f7fb fd11 	bl	80002b0 <__aeabi_uldivmod>
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	4b0d      	ldr	r3, [pc, #52]	@ (80048c8 <UART_SetConfig+0x4e4>)
 8004894:	fba3 1302 	umull	r1, r3, r3, r2
 8004898:	095b      	lsrs	r3, r3, #5
 800489a:	2164      	movs	r1, #100	@ 0x64
 800489c:	fb01 f303 	mul.w	r3, r1, r3
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	3332      	adds	r3, #50	@ 0x32
 80048a6:	4a08      	ldr	r2, [pc, #32]	@ (80048c8 <UART_SetConfig+0x4e4>)
 80048a8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	f003 020f 	and.w	r2, r3, #15
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4422      	add	r2, r4
 80048ba:	609a      	str	r2, [r3, #8]
}
 80048bc:	bf00      	nop
 80048be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048c2:	46bd      	mov	sp, r7
 80048c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048c8:	51eb851f 	.word	0x51eb851f

080048cc <std>:
 80048cc:	2300      	movs	r3, #0
 80048ce:	b510      	push	{r4, lr}
 80048d0:	4604      	mov	r4, r0
 80048d2:	e9c0 3300 	strd	r3, r3, [r0]
 80048d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048da:	6083      	str	r3, [r0, #8]
 80048dc:	8181      	strh	r1, [r0, #12]
 80048de:	6643      	str	r3, [r0, #100]	@ 0x64
 80048e0:	81c2      	strh	r2, [r0, #14]
 80048e2:	6183      	str	r3, [r0, #24]
 80048e4:	4619      	mov	r1, r3
 80048e6:	2208      	movs	r2, #8
 80048e8:	305c      	adds	r0, #92	@ 0x5c
 80048ea:	f000 fa4f 	bl	8004d8c <memset>
 80048ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004924 <std+0x58>)
 80048f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80048f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004928 <std+0x5c>)
 80048f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048f6:	4b0d      	ldr	r3, [pc, #52]	@ (800492c <std+0x60>)
 80048f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004930 <std+0x64>)
 80048fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80048fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004934 <std+0x68>)
 8004900:	6224      	str	r4, [r4, #32]
 8004902:	429c      	cmp	r4, r3
 8004904:	d006      	beq.n	8004914 <std+0x48>
 8004906:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800490a:	4294      	cmp	r4, r2
 800490c:	d002      	beq.n	8004914 <std+0x48>
 800490e:	33d0      	adds	r3, #208	@ 0xd0
 8004910:	429c      	cmp	r4, r3
 8004912:	d105      	bne.n	8004920 <std+0x54>
 8004914:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800491c:	f000 bac2 	b.w	8004ea4 <__retarget_lock_init_recursive>
 8004920:	bd10      	pop	{r4, pc}
 8004922:	bf00      	nop
 8004924:	08004b9d 	.word	0x08004b9d
 8004928:	08004bbf 	.word	0x08004bbf
 800492c:	08004bf7 	.word	0x08004bf7
 8004930:	08004c1b 	.word	0x08004c1b
 8004934:	20000380 	.word	0x20000380

08004938 <stdio_exit_handler>:
 8004938:	4a02      	ldr	r2, [pc, #8]	@ (8004944 <stdio_exit_handler+0xc>)
 800493a:	4903      	ldr	r1, [pc, #12]	@ (8004948 <stdio_exit_handler+0x10>)
 800493c:	4803      	ldr	r0, [pc, #12]	@ (800494c <stdio_exit_handler+0x14>)
 800493e:	f000 b869 	b.w	8004a14 <_fwalk_sglue>
 8004942:	bf00      	nop
 8004944:	20000014 	.word	0x20000014
 8004948:	08005a01 	.word	0x08005a01
 800494c:	20000024 	.word	0x20000024

08004950 <cleanup_stdio>:
 8004950:	6841      	ldr	r1, [r0, #4]
 8004952:	4b0c      	ldr	r3, [pc, #48]	@ (8004984 <cleanup_stdio+0x34>)
 8004954:	4299      	cmp	r1, r3
 8004956:	b510      	push	{r4, lr}
 8004958:	4604      	mov	r4, r0
 800495a:	d001      	beq.n	8004960 <cleanup_stdio+0x10>
 800495c:	f001 f850 	bl	8005a00 <_fflush_r>
 8004960:	68a1      	ldr	r1, [r4, #8]
 8004962:	4b09      	ldr	r3, [pc, #36]	@ (8004988 <cleanup_stdio+0x38>)
 8004964:	4299      	cmp	r1, r3
 8004966:	d002      	beq.n	800496e <cleanup_stdio+0x1e>
 8004968:	4620      	mov	r0, r4
 800496a:	f001 f849 	bl	8005a00 <_fflush_r>
 800496e:	68e1      	ldr	r1, [r4, #12]
 8004970:	4b06      	ldr	r3, [pc, #24]	@ (800498c <cleanup_stdio+0x3c>)
 8004972:	4299      	cmp	r1, r3
 8004974:	d004      	beq.n	8004980 <cleanup_stdio+0x30>
 8004976:	4620      	mov	r0, r4
 8004978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800497c:	f001 b840 	b.w	8005a00 <_fflush_r>
 8004980:	bd10      	pop	{r4, pc}
 8004982:	bf00      	nop
 8004984:	20000380 	.word	0x20000380
 8004988:	200003e8 	.word	0x200003e8
 800498c:	20000450 	.word	0x20000450

08004990 <global_stdio_init.part.0>:
 8004990:	b510      	push	{r4, lr}
 8004992:	4b0b      	ldr	r3, [pc, #44]	@ (80049c0 <global_stdio_init.part.0+0x30>)
 8004994:	4c0b      	ldr	r4, [pc, #44]	@ (80049c4 <global_stdio_init.part.0+0x34>)
 8004996:	4a0c      	ldr	r2, [pc, #48]	@ (80049c8 <global_stdio_init.part.0+0x38>)
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	4620      	mov	r0, r4
 800499c:	2200      	movs	r2, #0
 800499e:	2104      	movs	r1, #4
 80049a0:	f7ff ff94 	bl	80048cc <std>
 80049a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80049a8:	2201      	movs	r2, #1
 80049aa:	2109      	movs	r1, #9
 80049ac:	f7ff ff8e 	bl	80048cc <std>
 80049b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80049b4:	2202      	movs	r2, #2
 80049b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ba:	2112      	movs	r1, #18
 80049bc:	f7ff bf86 	b.w	80048cc <std>
 80049c0:	200004b8 	.word	0x200004b8
 80049c4:	20000380 	.word	0x20000380
 80049c8:	08004939 	.word	0x08004939

080049cc <__sfp_lock_acquire>:
 80049cc:	4801      	ldr	r0, [pc, #4]	@ (80049d4 <__sfp_lock_acquire+0x8>)
 80049ce:	f000 ba6a 	b.w	8004ea6 <__retarget_lock_acquire_recursive>
 80049d2:	bf00      	nop
 80049d4:	200004c1 	.word	0x200004c1

080049d8 <__sfp_lock_release>:
 80049d8:	4801      	ldr	r0, [pc, #4]	@ (80049e0 <__sfp_lock_release+0x8>)
 80049da:	f000 ba65 	b.w	8004ea8 <__retarget_lock_release_recursive>
 80049de:	bf00      	nop
 80049e0:	200004c1 	.word	0x200004c1

080049e4 <__sinit>:
 80049e4:	b510      	push	{r4, lr}
 80049e6:	4604      	mov	r4, r0
 80049e8:	f7ff fff0 	bl	80049cc <__sfp_lock_acquire>
 80049ec:	6a23      	ldr	r3, [r4, #32]
 80049ee:	b11b      	cbz	r3, 80049f8 <__sinit+0x14>
 80049f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049f4:	f7ff bff0 	b.w	80049d8 <__sfp_lock_release>
 80049f8:	4b04      	ldr	r3, [pc, #16]	@ (8004a0c <__sinit+0x28>)
 80049fa:	6223      	str	r3, [r4, #32]
 80049fc:	4b04      	ldr	r3, [pc, #16]	@ (8004a10 <__sinit+0x2c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1f5      	bne.n	80049f0 <__sinit+0xc>
 8004a04:	f7ff ffc4 	bl	8004990 <global_stdio_init.part.0>
 8004a08:	e7f2      	b.n	80049f0 <__sinit+0xc>
 8004a0a:	bf00      	nop
 8004a0c:	08004951 	.word	0x08004951
 8004a10:	200004b8 	.word	0x200004b8

08004a14 <_fwalk_sglue>:
 8004a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a18:	4607      	mov	r7, r0
 8004a1a:	4688      	mov	r8, r1
 8004a1c:	4614      	mov	r4, r2
 8004a1e:	2600      	movs	r6, #0
 8004a20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a24:	f1b9 0901 	subs.w	r9, r9, #1
 8004a28:	d505      	bpl.n	8004a36 <_fwalk_sglue+0x22>
 8004a2a:	6824      	ldr	r4, [r4, #0]
 8004a2c:	2c00      	cmp	r4, #0
 8004a2e:	d1f7      	bne.n	8004a20 <_fwalk_sglue+0xc>
 8004a30:	4630      	mov	r0, r6
 8004a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a36:	89ab      	ldrh	r3, [r5, #12]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d907      	bls.n	8004a4c <_fwalk_sglue+0x38>
 8004a3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a40:	3301      	adds	r3, #1
 8004a42:	d003      	beq.n	8004a4c <_fwalk_sglue+0x38>
 8004a44:	4629      	mov	r1, r5
 8004a46:	4638      	mov	r0, r7
 8004a48:	47c0      	blx	r8
 8004a4a:	4306      	orrs	r6, r0
 8004a4c:	3568      	adds	r5, #104	@ 0x68
 8004a4e:	e7e9      	b.n	8004a24 <_fwalk_sglue+0x10>

08004a50 <iprintf>:
 8004a50:	b40f      	push	{r0, r1, r2, r3}
 8004a52:	b507      	push	{r0, r1, r2, lr}
 8004a54:	4906      	ldr	r1, [pc, #24]	@ (8004a70 <iprintf+0x20>)
 8004a56:	ab04      	add	r3, sp, #16
 8004a58:	6808      	ldr	r0, [r1, #0]
 8004a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a5e:	6881      	ldr	r1, [r0, #8]
 8004a60:	9301      	str	r3, [sp, #4]
 8004a62:	f000 fca5 	bl	80053b0 <_vfiprintf_r>
 8004a66:	b003      	add	sp, #12
 8004a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a6c:	b004      	add	sp, #16
 8004a6e:	4770      	bx	lr
 8004a70:	20000020 	.word	0x20000020

08004a74 <_puts_r>:
 8004a74:	6a03      	ldr	r3, [r0, #32]
 8004a76:	b570      	push	{r4, r5, r6, lr}
 8004a78:	6884      	ldr	r4, [r0, #8]
 8004a7a:	4605      	mov	r5, r0
 8004a7c:	460e      	mov	r6, r1
 8004a7e:	b90b      	cbnz	r3, 8004a84 <_puts_r+0x10>
 8004a80:	f7ff ffb0 	bl	80049e4 <__sinit>
 8004a84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a86:	07db      	lsls	r3, r3, #31
 8004a88:	d405      	bmi.n	8004a96 <_puts_r+0x22>
 8004a8a:	89a3      	ldrh	r3, [r4, #12]
 8004a8c:	0598      	lsls	r0, r3, #22
 8004a8e:	d402      	bmi.n	8004a96 <_puts_r+0x22>
 8004a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a92:	f000 fa08 	bl	8004ea6 <__retarget_lock_acquire_recursive>
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	0719      	lsls	r1, r3, #28
 8004a9a:	d502      	bpl.n	8004aa2 <_puts_r+0x2e>
 8004a9c:	6923      	ldr	r3, [r4, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d135      	bne.n	8004b0e <_puts_r+0x9a>
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f000 f91b 	bl	8004ce0 <__swsetup_r>
 8004aaa:	b380      	cbz	r0, 8004b0e <_puts_r+0x9a>
 8004aac:	f04f 35ff 	mov.w	r5, #4294967295
 8004ab0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ab2:	07da      	lsls	r2, r3, #31
 8004ab4:	d405      	bmi.n	8004ac2 <_puts_r+0x4e>
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	059b      	lsls	r3, r3, #22
 8004aba:	d402      	bmi.n	8004ac2 <_puts_r+0x4e>
 8004abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004abe:	f000 f9f3 	bl	8004ea8 <__retarget_lock_release_recursive>
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	bd70      	pop	{r4, r5, r6, pc}
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	da04      	bge.n	8004ad4 <_puts_r+0x60>
 8004aca:	69a2      	ldr	r2, [r4, #24]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	dc17      	bgt.n	8004b00 <_puts_r+0x8c>
 8004ad0:	290a      	cmp	r1, #10
 8004ad2:	d015      	beq.n	8004b00 <_puts_r+0x8c>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	6022      	str	r2, [r4, #0]
 8004ada:	7019      	strb	r1, [r3, #0]
 8004adc:	68a3      	ldr	r3, [r4, #8]
 8004ade:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	60a3      	str	r3, [r4, #8]
 8004ae6:	2900      	cmp	r1, #0
 8004ae8:	d1ed      	bne.n	8004ac6 <_puts_r+0x52>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	da11      	bge.n	8004b12 <_puts_r+0x9e>
 8004aee:	4622      	mov	r2, r4
 8004af0:	210a      	movs	r1, #10
 8004af2:	4628      	mov	r0, r5
 8004af4:	f000 f8b6 	bl	8004c64 <__swbuf_r>
 8004af8:	3001      	adds	r0, #1
 8004afa:	d0d7      	beq.n	8004aac <_puts_r+0x38>
 8004afc:	250a      	movs	r5, #10
 8004afe:	e7d7      	b.n	8004ab0 <_puts_r+0x3c>
 8004b00:	4622      	mov	r2, r4
 8004b02:	4628      	mov	r0, r5
 8004b04:	f000 f8ae 	bl	8004c64 <__swbuf_r>
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d1e7      	bne.n	8004adc <_puts_r+0x68>
 8004b0c:	e7ce      	b.n	8004aac <_puts_r+0x38>
 8004b0e:	3e01      	subs	r6, #1
 8004b10:	e7e4      	b.n	8004adc <_puts_r+0x68>
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	6022      	str	r2, [r4, #0]
 8004b18:	220a      	movs	r2, #10
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	e7ee      	b.n	8004afc <_puts_r+0x88>
	...

08004b20 <puts>:
 8004b20:	4b02      	ldr	r3, [pc, #8]	@ (8004b2c <puts+0xc>)
 8004b22:	4601      	mov	r1, r0
 8004b24:	6818      	ldr	r0, [r3, #0]
 8004b26:	f7ff bfa5 	b.w	8004a74 <_puts_r>
 8004b2a:	bf00      	nop
 8004b2c:	20000020 	.word	0x20000020

08004b30 <sniprintf>:
 8004b30:	b40c      	push	{r2, r3}
 8004b32:	b530      	push	{r4, r5, lr}
 8004b34:	4b18      	ldr	r3, [pc, #96]	@ (8004b98 <sniprintf+0x68>)
 8004b36:	1e0c      	subs	r4, r1, #0
 8004b38:	681d      	ldr	r5, [r3, #0]
 8004b3a:	b09d      	sub	sp, #116	@ 0x74
 8004b3c:	da08      	bge.n	8004b50 <sniprintf+0x20>
 8004b3e:	238b      	movs	r3, #139	@ 0x8b
 8004b40:	602b      	str	r3, [r5, #0]
 8004b42:	f04f 30ff 	mov.w	r0, #4294967295
 8004b46:	b01d      	add	sp, #116	@ 0x74
 8004b48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b4c:	b002      	add	sp, #8
 8004b4e:	4770      	bx	lr
 8004b50:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004b54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004b5e:	bf14      	ite	ne
 8004b60:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004b64:	4623      	moveq	r3, r4
 8004b66:	9304      	str	r3, [sp, #16]
 8004b68:	9307      	str	r3, [sp, #28]
 8004b6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b6e:	9002      	str	r0, [sp, #8]
 8004b70:	9006      	str	r0, [sp, #24]
 8004b72:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b76:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004b78:	ab21      	add	r3, sp, #132	@ 0x84
 8004b7a:	a902      	add	r1, sp, #8
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	9301      	str	r3, [sp, #4]
 8004b80:	f000 faf0 	bl	8005164 <_svfiprintf_r>
 8004b84:	1c43      	adds	r3, r0, #1
 8004b86:	bfbc      	itt	lt
 8004b88:	238b      	movlt	r3, #139	@ 0x8b
 8004b8a:	602b      	strlt	r3, [r5, #0]
 8004b8c:	2c00      	cmp	r4, #0
 8004b8e:	d0da      	beq.n	8004b46 <sniprintf+0x16>
 8004b90:	9b02      	ldr	r3, [sp, #8]
 8004b92:	2200      	movs	r2, #0
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	e7d6      	b.n	8004b46 <sniprintf+0x16>
 8004b98:	20000020 	.word	0x20000020

08004b9c <__sread>:
 8004b9c:	b510      	push	{r4, lr}
 8004b9e:	460c      	mov	r4, r1
 8004ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba4:	f000 f930 	bl	8004e08 <_read_r>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	bfab      	itete	ge
 8004bac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004bae:	89a3      	ldrhlt	r3, [r4, #12]
 8004bb0:	181b      	addge	r3, r3, r0
 8004bb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004bb6:	bfac      	ite	ge
 8004bb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004bba:	81a3      	strhlt	r3, [r4, #12]
 8004bbc:	bd10      	pop	{r4, pc}

08004bbe <__swrite>:
 8004bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc2:	461f      	mov	r7, r3
 8004bc4:	898b      	ldrh	r3, [r1, #12]
 8004bc6:	05db      	lsls	r3, r3, #23
 8004bc8:	4605      	mov	r5, r0
 8004bca:	460c      	mov	r4, r1
 8004bcc:	4616      	mov	r6, r2
 8004bce:	d505      	bpl.n	8004bdc <__swrite+0x1e>
 8004bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f000 f904 	bl	8004de4 <_lseek_r>
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004be2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004be6:	81a3      	strh	r3, [r4, #12]
 8004be8:	4632      	mov	r2, r6
 8004bea:	463b      	mov	r3, r7
 8004bec:	4628      	mov	r0, r5
 8004bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf2:	f000 b91b 	b.w	8004e2c <_write_r>

08004bf6 <__sseek>:
 8004bf6:	b510      	push	{r4, lr}
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bfe:	f000 f8f1 	bl	8004de4 <_lseek_r>
 8004c02:	1c43      	adds	r3, r0, #1
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	bf15      	itete	ne
 8004c08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c12:	81a3      	strheq	r3, [r4, #12]
 8004c14:	bf18      	it	ne
 8004c16:	81a3      	strhne	r3, [r4, #12]
 8004c18:	bd10      	pop	{r4, pc}

08004c1a <__sclose>:
 8004c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c1e:	f000 b8d1 	b.w	8004dc4 <_close_r>
	...

08004c24 <_vsiprintf_r>:
 8004c24:	b510      	push	{r4, lr}
 8004c26:	b09a      	sub	sp, #104	@ 0x68
 8004c28:	2400      	movs	r4, #0
 8004c2a:	9100      	str	r1, [sp, #0]
 8004c2c:	9104      	str	r1, [sp, #16]
 8004c2e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c32:	9105      	str	r1, [sp, #20]
 8004c34:	9102      	str	r1, [sp, #8]
 8004c36:	4905      	ldr	r1, [pc, #20]	@ (8004c4c <_vsiprintf_r+0x28>)
 8004c38:	9103      	str	r1, [sp, #12]
 8004c3a:	4669      	mov	r1, sp
 8004c3c:	9419      	str	r4, [sp, #100]	@ 0x64
 8004c3e:	f000 fa91 	bl	8005164 <_svfiprintf_r>
 8004c42:	9b00      	ldr	r3, [sp, #0]
 8004c44:	701c      	strb	r4, [r3, #0]
 8004c46:	b01a      	add	sp, #104	@ 0x68
 8004c48:	bd10      	pop	{r4, pc}
 8004c4a:	bf00      	nop
 8004c4c:	ffff0208 	.word	0xffff0208

08004c50 <vsiprintf>:
 8004c50:	4613      	mov	r3, r2
 8004c52:	460a      	mov	r2, r1
 8004c54:	4601      	mov	r1, r0
 8004c56:	4802      	ldr	r0, [pc, #8]	@ (8004c60 <vsiprintf+0x10>)
 8004c58:	6800      	ldr	r0, [r0, #0]
 8004c5a:	f7ff bfe3 	b.w	8004c24 <_vsiprintf_r>
 8004c5e:	bf00      	nop
 8004c60:	20000020 	.word	0x20000020

08004c64 <__swbuf_r>:
 8004c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c66:	460e      	mov	r6, r1
 8004c68:	4614      	mov	r4, r2
 8004c6a:	4605      	mov	r5, r0
 8004c6c:	b118      	cbz	r0, 8004c76 <__swbuf_r+0x12>
 8004c6e:	6a03      	ldr	r3, [r0, #32]
 8004c70:	b90b      	cbnz	r3, 8004c76 <__swbuf_r+0x12>
 8004c72:	f7ff feb7 	bl	80049e4 <__sinit>
 8004c76:	69a3      	ldr	r3, [r4, #24]
 8004c78:	60a3      	str	r3, [r4, #8]
 8004c7a:	89a3      	ldrh	r3, [r4, #12]
 8004c7c:	071a      	lsls	r2, r3, #28
 8004c7e:	d501      	bpl.n	8004c84 <__swbuf_r+0x20>
 8004c80:	6923      	ldr	r3, [r4, #16]
 8004c82:	b943      	cbnz	r3, 8004c96 <__swbuf_r+0x32>
 8004c84:	4621      	mov	r1, r4
 8004c86:	4628      	mov	r0, r5
 8004c88:	f000 f82a 	bl	8004ce0 <__swsetup_r>
 8004c8c:	b118      	cbz	r0, 8004c96 <__swbuf_r+0x32>
 8004c8e:	f04f 37ff 	mov.w	r7, #4294967295
 8004c92:	4638      	mov	r0, r7
 8004c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	6922      	ldr	r2, [r4, #16]
 8004c9a:	1a98      	subs	r0, r3, r2
 8004c9c:	6963      	ldr	r3, [r4, #20]
 8004c9e:	b2f6      	uxtb	r6, r6
 8004ca0:	4283      	cmp	r3, r0
 8004ca2:	4637      	mov	r7, r6
 8004ca4:	dc05      	bgt.n	8004cb2 <__swbuf_r+0x4e>
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	4628      	mov	r0, r5
 8004caa:	f000 fea9 	bl	8005a00 <_fflush_r>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d1ed      	bne.n	8004c8e <__swbuf_r+0x2a>
 8004cb2:	68a3      	ldr	r3, [r4, #8]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	60a3      	str	r3, [r4, #8]
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	6022      	str	r2, [r4, #0]
 8004cbe:	701e      	strb	r6, [r3, #0]
 8004cc0:	6962      	ldr	r2, [r4, #20]
 8004cc2:	1c43      	adds	r3, r0, #1
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d004      	beq.n	8004cd2 <__swbuf_r+0x6e>
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	07db      	lsls	r3, r3, #31
 8004ccc:	d5e1      	bpl.n	8004c92 <__swbuf_r+0x2e>
 8004cce:	2e0a      	cmp	r6, #10
 8004cd0:	d1df      	bne.n	8004c92 <__swbuf_r+0x2e>
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	f000 fe93 	bl	8005a00 <_fflush_r>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d0d9      	beq.n	8004c92 <__swbuf_r+0x2e>
 8004cde:	e7d6      	b.n	8004c8e <__swbuf_r+0x2a>

08004ce0 <__swsetup_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	4b29      	ldr	r3, [pc, #164]	@ (8004d88 <__swsetup_r+0xa8>)
 8004ce4:	4605      	mov	r5, r0
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	460c      	mov	r4, r1
 8004cea:	b118      	cbz	r0, 8004cf4 <__swsetup_r+0x14>
 8004cec:	6a03      	ldr	r3, [r0, #32]
 8004cee:	b90b      	cbnz	r3, 8004cf4 <__swsetup_r+0x14>
 8004cf0:	f7ff fe78 	bl	80049e4 <__sinit>
 8004cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cf8:	0719      	lsls	r1, r3, #28
 8004cfa:	d422      	bmi.n	8004d42 <__swsetup_r+0x62>
 8004cfc:	06da      	lsls	r2, r3, #27
 8004cfe:	d407      	bmi.n	8004d10 <__swsetup_r+0x30>
 8004d00:	2209      	movs	r2, #9
 8004d02:	602a      	str	r2, [r5, #0]
 8004d04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d08:	81a3      	strh	r3, [r4, #12]
 8004d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0e:	e033      	b.n	8004d78 <__swsetup_r+0x98>
 8004d10:	0758      	lsls	r0, r3, #29
 8004d12:	d512      	bpl.n	8004d3a <__swsetup_r+0x5a>
 8004d14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d16:	b141      	cbz	r1, 8004d2a <__swsetup_r+0x4a>
 8004d18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d1c:	4299      	cmp	r1, r3
 8004d1e:	d002      	beq.n	8004d26 <__swsetup_r+0x46>
 8004d20:	4628      	mov	r0, r5
 8004d22:	f000 f8cb 	bl	8004ebc <_free_r>
 8004d26:	2300      	movs	r3, #0
 8004d28:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d2a:	89a3      	ldrh	r3, [r4, #12]
 8004d2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004d30:	81a3      	strh	r3, [r4, #12]
 8004d32:	2300      	movs	r3, #0
 8004d34:	6063      	str	r3, [r4, #4]
 8004d36:	6923      	ldr	r3, [r4, #16]
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	89a3      	ldrh	r3, [r4, #12]
 8004d3c:	f043 0308 	orr.w	r3, r3, #8
 8004d40:	81a3      	strh	r3, [r4, #12]
 8004d42:	6923      	ldr	r3, [r4, #16]
 8004d44:	b94b      	cbnz	r3, 8004d5a <__swsetup_r+0x7a>
 8004d46:	89a3      	ldrh	r3, [r4, #12]
 8004d48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d50:	d003      	beq.n	8004d5a <__swsetup_r+0x7a>
 8004d52:	4621      	mov	r1, r4
 8004d54:	4628      	mov	r0, r5
 8004d56:	f000 fea1 	bl	8005a9c <__smakebuf_r>
 8004d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d5e:	f013 0201 	ands.w	r2, r3, #1
 8004d62:	d00a      	beq.n	8004d7a <__swsetup_r+0x9a>
 8004d64:	2200      	movs	r2, #0
 8004d66:	60a2      	str	r2, [r4, #8]
 8004d68:	6962      	ldr	r2, [r4, #20]
 8004d6a:	4252      	negs	r2, r2
 8004d6c:	61a2      	str	r2, [r4, #24]
 8004d6e:	6922      	ldr	r2, [r4, #16]
 8004d70:	b942      	cbnz	r2, 8004d84 <__swsetup_r+0xa4>
 8004d72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004d76:	d1c5      	bne.n	8004d04 <__swsetup_r+0x24>
 8004d78:	bd38      	pop	{r3, r4, r5, pc}
 8004d7a:	0799      	lsls	r1, r3, #30
 8004d7c:	bf58      	it	pl
 8004d7e:	6962      	ldrpl	r2, [r4, #20]
 8004d80:	60a2      	str	r2, [r4, #8]
 8004d82:	e7f4      	b.n	8004d6e <__swsetup_r+0x8e>
 8004d84:	2000      	movs	r0, #0
 8004d86:	e7f7      	b.n	8004d78 <__swsetup_r+0x98>
 8004d88:	20000020 	.word	0x20000020

08004d8c <memset>:
 8004d8c:	4402      	add	r2, r0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d100      	bne.n	8004d96 <memset+0xa>
 8004d94:	4770      	bx	lr
 8004d96:	f803 1b01 	strb.w	r1, [r3], #1
 8004d9a:	e7f9      	b.n	8004d90 <memset+0x4>

08004d9c <strncpy>:
 8004d9c:	b510      	push	{r4, lr}
 8004d9e:	3901      	subs	r1, #1
 8004da0:	4603      	mov	r3, r0
 8004da2:	b132      	cbz	r2, 8004db2 <strncpy+0x16>
 8004da4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004da8:	f803 4b01 	strb.w	r4, [r3], #1
 8004dac:	3a01      	subs	r2, #1
 8004dae:	2c00      	cmp	r4, #0
 8004db0:	d1f7      	bne.n	8004da2 <strncpy+0x6>
 8004db2:	441a      	add	r2, r3
 8004db4:	2100      	movs	r1, #0
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d100      	bne.n	8004dbc <strncpy+0x20>
 8004dba:	bd10      	pop	{r4, pc}
 8004dbc:	f803 1b01 	strb.w	r1, [r3], #1
 8004dc0:	e7f9      	b.n	8004db6 <strncpy+0x1a>
	...

08004dc4 <_close_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4d06      	ldr	r5, [pc, #24]	@ (8004de0 <_close_r+0x1c>)
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	f7fd f83e 	bl	8001e50 <_close>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d102      	bne.n	8004dde <_close_r+0x1a>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	b103      	cbz	r3, 8004dde <_close_r+0x1a>
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	200004bc 	.word	0x200004bc

08004de4 <_lseek_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	4d07      	ldr	r5, [pc, #28]	@ (8004e04 <_lseek_r+0x20>)
 8004de8:	4604      	mov	r4, r0
 8004dea:	4608      	mov	r0, r1
 8004dec:	4611      	mov	r1, r2
 8004dee:	2200      	movs	r2, #0
 8004df0:	602a      	str	r2, [r5, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	f7fd f853 	bl	8001e9e <_lseek>
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	d102      	bne.n	8004e02 <_lseek_r+0x1e>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	b103      	cbz	r3, 8004e02 <_lseek_r+0x1e>
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
 8004e04:	200004bc 	.word	0x200004bc

08004e08 <_read_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4d07      	ldr	r5, [pc, #28]	@ (8004e28 <_read_r+0x20>)
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	4608      	mov	r0, r1
 8004e10:	4611      	mov	r1, r2
 8004e12:	2200      	movs	r2, #0
 8004e14:	602a      	str	r2, [r5, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f7fc ffe1 	bl	8001dde <_read>
 8004e1c:	1c43      	adds	r3, r0, #1
 8004e1e:	d102      	bne.n	8004e26 <_read_r+0x1e>
 8004e20:	682b      	ldr	r3, [r5, #0]
 8004e22:	b103      	cbz	r3, 8004e26 <_read_r+0x1e>
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	bd38      	pop	{r3, r4, r5, pc}
 8004e28:	200004bc 	.word	0x200004bc

08004e2c <_write_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	4d07      	ldr	r5, [pc, #28]	@ (8004e4c <_write_r+0x20>)
 8004e30:	4604      	mov	r4, r0
 8004e32:	4608      	mov	r0, r1
 8004e34:	4611      	mov	r1, r2
 8004e36:	2200      	movs	r2, #0
 8004e38:	602a      	str	r2, [r5, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f7fc ffec 	bl	8001e18 <_write>
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	d102      	bne.n	8004e4a <_write_r+0x1e>
 8004e44:	682b      	ldr	r3, [r5, #0]
 8004e46:	b103      	cbz	r3, 8004e4a <_write_r+0x1e>
 8004e48:	6023      	str	r3, [r4, #0]
 8004e4a:	bd38      	pop	{r3, r4, r5, pc}
 8004e4c:	200004bc 	.word	0x200004bc

08004e50 <__errno>:
 8004e50:	4b01      	ldr	r3, [pc, #4]	@ (8004e58 <__errno+0x8>)
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	20000020 	.word	0x20000020

08004e5c <__libc_init_array>:
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	4d0d      	ldr	r5, [pc, #52]	@ (8004e94 <__libc_init_array+0x38>)
 8004e60:	4c0d      	ldr	r4, [pc, #52]	@ (8004e98 <__libc_init_array+0x3c>)
 8004e62:	1b64      	subs	r4, r4, r5
 8004e64:	10a4      	asrs	r4, r4, #2
 8004e66:	2600      	movs	r6, #0
 8004e68:	42a6      	cmp	r6, r4
 8004e6a:	d109      	bne.n	8004e80 <__libc_init_array+0x24>
 8004e6c:	4d0b      	ldr	r5, [pc, #44]	@ (8004e9c <__libc_init_array+0x40>)
 8004e6e:	4c0c      	ldr	r4, [pc, #48]	@ (8004ea0 <__libc_init_array+0x44>)
 8004e70:	f000 fee0 	bl	8005c34 <_init>
 8004e74:	1b64      	subs	r4, r4, r5
 8004e76:	10a4      	asrs	r4, r4, #2
 8004e78:	2600      	movs	r6, #0
 8004e7a:	42a6      	cmp	r6, r4
 8004e7c:	d105      	bne.n	8004e8a <__libc_init_array+0x2e>
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
 8004e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e84:	4798      	blx	r3
 8004e86:	3601      	adds	r6, #1
 8004e88:	e7ee      	b.n	8004e68 <__libc_init_array+0xc>
 8004e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e8e:	4798      	blx	r3
 8004e90:	3601      	adds	r6, #1
 8004e92:	e7f2      	b.n	8004e7a <__libc_init_array+0x1e>
 8004e94:	080067b0 	.word	0x080067b0
 8004e98:	080067b0 	.word	0x080067b0
 8004e9c:	080067b0 	.word	0x080067b0
 8004ea0:	080067b4 	.word	0x080067b4

08004ea4 <__retarget_lock_init_recursive>:
 8004ea4:	4770      	bx	lr

08004ea6 <__retarget_lock_acquire_recursive>:
 8004ea6:	4770      	bx	lr

08004ea8 <__retarget_lock_release_recursive>:
 8004ea8:	4770      	bx	lr

08004eaa <strcpy>:
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004eb0:	f803 2b01 	strb.w	r2, [r3], #1
 8004eb4:	2a00      	cmp	r2, #0
 8004eb6:	d1f9      	bne.n	8004eac <strcpy+0x2>
 8004eb8:	4770      	bx	lr
	...

08004ebc <_free_r>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	4605      	mov	r5, r0
 8004ec0:	2900      	cmp	r1, #0
 8004ec2:	d041      	beq.n	8004f48 <_free_r+0x8c>
 8004ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ec8:	1f0c      	subs	r4, r1, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	bfb8      	it	lt
 8004ece:	18e4      	addlt	r4, r4, r3
 8004ed0:	f000 f8e0 	bl	8005094 <__malloc_lock>
 8004ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f4c <_free_r+0x90>)
 8004ed6:	6813      	ldr	r3, [r2, #0]
 8004ed8:	b933      	cbnz	r3, 8004ee8 <_free_r+0x2c>
 8004eda:	6063      	str	r3, [r4, #4]
 8004edc:	6014      	str	r4, [r2, #0]
 8004ede:	4628      	mov	r0, r5
 8004ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ee4:	f000 b8dc 	b.w	80050a0 <__malloc_unlock>
 8004ee8:	42a3      	cmp	r3, r4
 8004eea:	d908      	bls.n	8004efe <_free_r+0x42>
 8004eec:	6820      	ldr	r0, [r4, #0]
 8004eee:	1821      	adds	r1, r4, r0
 8004ef0:	428b      	cmp	r3, r1
 8004ef2:	bf01      	itttt	eq
 8004ef4:	6819      	ldreq	r1, [r3, #0]
 8004ef6:	685b      	ldreq	r3, [r3, #4]
 8004ef8:	1809      	addeq	r1, r1, r0
 8004efa:	6021      	streq	r1, [r4, #0]
 8004efc:	e7ed      	b.n	8004eda <_free_r+0x1e>
 8004efe:	461a      	mov	r2, r3
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	b10b      	cbz	r3, 8004f08 <_free_r+0x4c>
 8004f04:	42a3      	cmp	r3, r4
 8004f06:	d9fa      	bls.n	8004efe <_free_r+0x42>
 8004f08:	6811      	ldr	r1, [r2, #0]
 8004f0a:	1850      	adds	r0, r2, r1
 8004f0c:	42a0      	cmp	r0, r4
 8004f0e:	d10b      	bne.n	8004f28 <_free_r+0x6c>
 8004f10:	6820      	ldr	r0, [r4, #0]
 8004f12:	4401      	add	r1, r0
 8004f14:	1850      	adds	r0, r2, r1
 8004f16:	4283      	cmp	r3, r0
 8004f18:	6011      	str	r1, [r2, #0]
 8004f1a:	d1e0      	bne.n	8004ede <_free_r+0x22>
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	6053      	str	r3, [r2, #4]
 8004f22:	4408      	add	r0, r1
 8004f24:	6010      	str	r0, [r2, #0]
 8004f26:	e7da      	b.n	8004ede <_free_r+0x22>
 8004f28:	d902      	bls.n	8004f30 <_free_r+0x74>
 8004f2a:	230c      	movs	r3, #12
 8004f2c:	602b      	str	r3, [r5, #0]
 8004f2e:	e7d6      	b.n	8004ede <_free_r+0x22>
 8004f30:	6820      	ldr	r0, [r4, #0]
 8004f32:	1821      	adds	r1, r4, r0
 8004f34:	428b      	cmp	r3, r1
 8004f36:	bf04      	itt	eq
 8004f38:	6819      	ldreq	r1, [r3, #0]
 8004f3a:	685b      	ldreq	r3, [r3, #4]
 8004f3c:	6063      	str	r3, [r4, #4]
 8004f3e:	bf04      	itt	eq
 8004f40:	1809      	addeq	r1, r1, r0
 8004f42:	6021      	streq	r1, [r4, #0]
 8004f44:	6054      	str	r4, [r2, #4]
 8004f46:	e7ca      	b.n	8004ede <_free_r+0x22>
 8004f48:	bd38      	pop	{r3, r4, r5, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200004c8 	.word	0x200004c8

08004f50 <sbrk_aligned>:
 8004f50:	b570      	push	{r4, r5, r6, lr}
 8004f52:	4e0f      	ldr	r6, [pc, #60]	@ (8004f90 <sbrk_aligned+0x40>)
 8004f54:	460c      	mov	r4, r1
 8004f56:	6831      	ldr	r1, [r6, #0]
 8004f58:	4605      	mov	r5, r0
 8004f5a:	b911      	cbnz	r1, 8004f62 <sbrk_aligned+0x12>
 8004f5c:	f000 fe16 	bl	8005b8c <_sbrk_r>
 8004f60:	6030      	str	r0, [r6, #0]
 8004f62:	4621      	mov	r1, r4
 8004f64:	4628      	mov	r0, r5
 8004f66:	f000 fe11 	bl	8005b8c <_sbrk_r>
 8004f6a:	1c43      	adds	r3, r0, #1
 8004f6c:	d103      	bne.n	8004f76 <sbrk_aligned+0x26>
 8004f6e:	f04f 34ff 	mov.w	r4, #4294967295
 8004f72:	4620      	mov	r0, r4
 8004f74:	bd70      	pop	{r4, r5, r6, pc}
 8004f76:	1cc4      	adds	r4, r0, #3
 8004f78:	f024 0403 	bic.w	r4, r4, #3
 8004f7c:	42a0      	cmp	r0, r4
 8004f7e:	d0f8      	beq.n	8004f72 <sbrk_aligned+0x22>
 8004f80:	1a21      	subs	r1, r4, r0
 8004f82:	4628      	mov	r0, r5
 8004f84:	f000 fe02 	bl	8005b8c <_sbrk_r>
 8004f88:	3001      	adds	r0, #1
 8004f8a:	d1f2      	bne.n	8004f72 <sbrk_aligned+0x22>
 8004f8c:	e7ef      	b.n	8004f6e <sbrk_aligned+0x1e>
 8004f8e:	bf00      	nop
 8004f90:	200004c4 	.word	0x200004c4

08004f94 <_malloc_r>:
 8004f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f98:	1ccd      	adds	r5, r1, #3
 8004f9a:	f025 0503 	bic.w	r5, r5, #3
 8004f9e:	3508      	adds	r5, #8
 8004fa0:	2d0c      	cmp	r5, #12
 8004fa2:	bf38      	it	cc
 8004fa4:	250c      	movcc	r5, #12
 8004fa6:	2d00      	cmp	r5, #0
 8004fa8:	4606      	mov	r6, r0
 8004faa:	db01      	blt.n	8004fb0 <_malloc_r+0x1c>
 8004fac:	42a9      	cmp	r1, r5
 8004fae:	d904      	bls.n	8004fba <_malloc_r+0x26>
 8004fb0:	230c      	movs	r3, #12
 8004fb2:	6033      	str	r3, [r6, #0]
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005090 <_malloc_r+0xfc>
 8004fbe:	f000 f869 	bl	8005094 <__malloc_lock>
 8004fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc6:	461c      	mov	r4, r3
 8004fc8:	bb44      	cbnz	r4, 800501c <_malloc_r+0x88>
 8004fca:	4629      	mov	r1, r5
 8004fcc:	4630      	mov	r0, r6
 8004fce:	f7ff ffbf 	bl	8004f50 <sbrk_aligned>
 8004fd2:	1c43      	adds	r3, r0, #1
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	d158      	bne.n	800508a <_malloc_r+0xf6>
 8004fd8:	f8d8 4000 	ldr.w	r4, [r8]
 8004fdc:	4627      	mov	r7, r4
 8004fde:	2f00      	cmp	r7, #0
 8004fe0:	d143      	bne.n	800506a <_malloc_r+0xd6>
 8004fe2:	2c00      	cmp	r4, #0
 8004fe4:	d04b      	beq.n	800507e <_malloc_r+0xea>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	4639      	mov	r1, r7
 8004fea:	4630      	mov	r0, r6
 8004fec:	eb04 0903 	add.w	r9, r4, r3
 8004ff0:	f000 fdcc 	bl	8005b8c <_sbrk_r>
 8004ff4:	4581      	cmp	r9, r0
 8004ff6:	d142      	bne.n	800507e <_malloc_r+0xea>
 8004ff8:	6821      	ldr	r1, [r4, #0]
 8004ffa:	1a6d      	subs	r5, r5, r1
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	4630      	mov	r0, r6
 8005000:	f7ff ffa6 	bl	8004f50 <sbrk_aligned>
 8005004:	3001      	adds	r0, #1
 8005006:	d03a      	beq.n	800507e <_malloc_r+0xea>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	442b      	add	r3, r5
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	f8d8 3000 	ldr.w	r3, [r8]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	bb62      	cbnz	r2, 8005070 <_malloc_r+0xdc>
 8005016:	f8c8 7000 	str.w	r7, [r8]
 800501a:	e00f      	b.n	800503c <_malloc_r+0xa8>
 800501c:	6822      	ldr	r2, [r4, #0]
 800501e:	1b52      	subs	r2, r2, r5
 8005020:	d420      	bmi.n	8005064 <_malloc_r+0xd0>
 8005022:	2a0b      	cmp	r2, #11
 8005024:	d917      	bls.n	8005056 <_malloc_r+0xc2>
 8005026:	1961      	adds	r1, r4, r5
 8005028:	42a3      	cmp	r3, r4
 800502a:	6025      	str	r5, [r4, #0]
 800502c:	bf18      	it	ne
 800502e:	6059      	strne	r1, [r3, #4]
 8005030:	6863      	ldr	r3, [r4, #4]
 8005032:	bf08      	it	eq
 8005034:	f8c8 1000 	streq.w	r1, [r8]
 8005038:	5162      	str	r2, [r4, r5]
 800503a:	604b      	str	r3, [r1, #4]
 800503c:	4630      	mov	r0, r6
 800503e:	f000 f82f 	bl	80050a0 <__malloc_unlock>
 8005042:	f104 000b 	add.w	r0, r4, #11
 8005046:	1d23      	adds	r3, r4, #4
 8005048:	f020 0007 	bic.w	r0, r0, #7
 800504c:	1ac2      	subs	r2, r0, r3
 800504e:	bf1c      	itt	ne
 8005050:	1a1b      	subne	r3, r3, r0
 8005052:	50a3      	strne	r3, [r4, r2]
 8005054:	e7af      	b.n	8004fb6 <_malloc_r+0x22>
 8005056:	6862      	ldr	r2, [r4, #4]
 8005058:	42a3      	cmp	r3, r4
 800505a:	bf0c      	ite	eq
 800505c:	f8c8 2000 	streq.w	r2, [r8]
 8005060:	605a      	strne	r2, [r3, #4]
 8005062:	e7eb      	b.n	800503c <_malloc_r+0xa8>
 8005064:	4623      	mov	r3, r4
 8005066:	6864      	ldr	r4, [r4, #4]
 8005068:	e7ae      	b.n	8004fc8 <_malloc_r+0x34>
 800506a:	463c      	mov	r4, r7
 800506c:	687f      	ldr	r7, [r7, #4]
 800506e:	e7b6      	b.n	8004fde <_malloc_r+0x4a>
 8005070:	461a      	mov	r2, r3
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	42a3      	cmp	r3, r4
 8005076:	d1fb      	bne.n	8005070 <_malloc_r+0xdc>
 8005078:	2300      	movs	r3, #0
 800507a:	6053      	str	r3, [r2, #4]
 800507c:	e7de      	b.n	800503c <_malloc_r+0xa8>
 800507e:	230c      	movs	r3, #12
 8005080:	6033      	str	r3, [r6, #0]
 8005082:	4630      	mov	r0, r6
 8005084:	f000 f80c 	bl	80050a0 <__malloc_unlock>
 8005088:	e794      	b.n	8004fb4 <_malloc_r+0x20>
 800508a:	6005      	str	r5, [r0, #0]
 800508c:	e7d6      	b.n	800503c <_malloc_r+0xa8>
 800508e:	bf00      	nop
 8005090:	200004c8 	.word	0x200004c8

08005094 <__malloc_lock>:
 8005094:	4801      	ldr	r0, [pc, #4]	@ (800509c <__malloc_lock+0x8>)
 8005096:	f7ff bf06 	b.w	8004ea6 <__retarget_lock_acquire_recursive>
 800509a:	bf00      	nop
 800509c:	200004c0 	.word	0x200004c0

080050a0 <__malloc_unlock>:
 80050a0:	4801      	ldr	r0, [pc, #4]	@ (80050a8 <__malloc_unlock+0x8>)
 80050a2:	f7ff bf01 	b.w	8004ea8 <__retarget_lock_release_recursive>
 80050a6:	bf00      	nop
 80050a8:	200004c0 	.word	0x200004c0

080050ac <__ssputs_r>:
 80050ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050b0:	688e      	ldr	r6, [r1, #8]
 80050b2:	461f      	mov	r7, r3
 80050b4:	42be      	cmp	r6, r7
 80050b6:	680b      	ldr	r3, [r1, #0]
 80050b8:	4682      	mov	sl, r0
 80050ba:	460c      	mov	r4, r1
 80050bc:	4690      	mov	r8, r2
 80050be:	d82d      	bhi.n	800511c <__ssputs_r+0x70>
 80050c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80050c8:	d026      	beq.n	8005118 <__ssputs_r+0x6c>
 80050ca:	6965      	ldr	r5, [r4, #20]
 80050cc:	6909      	ldr	r1, [r1, #16]
 80050ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050d2:	eba3 0901 	sub.w	r9, r3, r1
 80050d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050da:	1c7b      	adds	r3, r7, #1
 80050dc:	444b      	add	r3, r9
 80050de:	106d      	asrs	r5, r5, #1
 80050e0:	429d      	cmp	r5, r3
 80050e2:	bf38      	it	cc
 80050e4:	461d      	movcc	r5, r3
 80050e6:	0553      	lsls	r3, r2, #21
 80050e8:	d527      	bpl.n	800513a <__ssputs_r+0x8e>
 80050ea:	4629      	mov	r1, r5
 80050ec:	f7ff ff52 	bl	8004f94 <_malloc_r>
 80050f0:	4606      	mov	r6, r0
 80050f2:	b360      	cbz	r0, 800514e <__ssputs_r+0xa2>
 80050f4:	6921      	ldr	r1, [r4, #16]
 80050f6:	464a      	mov	r2, r9
 80050f8:	f000 fd58 	bl	8005bac <memcpy>
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005106:	81a3      	strh	r3, [r4, #12]
 8005108:	6126      	str	r6, [r4, #16]
 800510a:	6165      	str	r5, [r4, #20]
 800510c:	444e      	add	r6, r9
 800510e:	eba5 0509 	sub.w	r5, r5, r9
 8005112:	6026      	str	r6, [r4, #0]
 8005114:	60a5      	str	r5, [r4, #8]
 8005116:	463e      	mov	r6, r7
 8005118:	42be      	cmp	r6, r7
 800511a:	d900      	bls.n	800511e <__ssputs_r+0x72>
 800511c:	463e      	mov	r6, r7
 800511e:	6820      	ldr	r0, [r4, #0]
 8005120:	4632      	mov	r2, r6
 8005122:	4641      	mov	r1, r8
 8005124:	f000 fcf6 	bl	8005b14 <memmove>
 8005128:	68a3      	ldr	r3, [r4, #8]
 800512a:	1b9b      	subs	r3, r3, r6
 800512c:	60a3      	str	r3, [r4, #8]
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	4433      	add	r3, r6
 8005132:	6023      	str	r3, [r4, #0]
 8005134:	2000      	movs	r0, #0
 8005136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513a:	462a      	mov	r2, r5
 800513c:	f000 fd44 	bl	8005bc8 <_realloc_r>
 8005140:	4606      	mov	r6, r0
 8005142:	2800      	cmp	r0, #0
 8005144:	d1e0      	bne.n	8005108 <__ssputs_r+0x5c>
 8005146:	6921      	ldr	r1, [r4, #16]
 8005148:	4650      	mov	r0, sl
 800514a:	f7ff feb7 	bl	8004ebc <_free_r>
 800514e:	230c      	movs	r3, #12
 8005150:	f8ca 3000 	str.w	r3, [sl]
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800515a:	81a3      	strh	r3, [r4, #12]
 800515c:	f04f 30ff 	mov.w	r0, #4294967295
 8005160:	e7e9      	b.n	8005136 <__ssputs_r+0x8a>
	...

08005164 <_svfiprintf_r>:
 8005164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005168:	4698      	mov	r8, r3
 800516a:	898b      	ldrh	r3, [r1, #12]
 800516c:	061b      	lsls	r3, r3, #24
 800516e:	b09d      	sub	sp, #116	@ 0x74
 8005170:	4607      	mov	r7, r0
 8005172:	460d      	mov	r5, r1
 8005174:	4614      	mov	r4, r2
 8005176:	d510      	bpl.n	800519a <_svfiprintf_r+0x36>
 8005178:	690b      	ldr	r3, [r1, #16]
 800517a:	b973      	cbnz	r3, 800519a <_svfiprintf_r+0x36>
 800517c:	2140      	movs	r1, #64	@ 0x40
 800517e:	f7ff ff09 	bl	8004f94 <_malloc_r>
 8005182:	6028      	str	r0, [r5, #0]
 8005184:	6128      	str	r0, [r5, #16]
 8005186:	b930      	cbnz	r0, 8005196 <_svfiprintf_r+0x32>
 8005188:	230c      	movs	r3, #12
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	f04f 30ff 	mov.w	r0, #4294967295
 8005190:	b01d      	add	sp, #116	@ 0x74
 8005192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005196:	2340      	movs	r3, #64	@ 0x40
 8005198:	616b      	str	r3, [r5, #20]
 800519a:	2300      	movs	r3, #0
 800519c:	9309      	str	r3, [sp, #36]	@ 0x24
 800519e:	2320      	movs	r3, #32
 80051a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80051a8:	2330      	movs	r3, #48	@ 0x30
 80051aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005348 <_svfiprintf_r+0x1e4>
 80051ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051b2:	f04f 0901 	mov.w	r9, #1
 80051b6:	4623      	mov	r3, r4
 80051b8:	469a      	mov	sl, r3
 80051ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051be:	b10a      	cbz	r2, 80051c4 <_svfiprintf_r+0x60>
 80051c0:	2a25      	cmp	r2, #37	@ 0x25
 80051c2:	d1f9      	bne.n	80051b8 <_svfiprintf_r+0x54>
 80051c4:	ebba 0b04 	subs.w	fp, sl, r4
 80051c8:	d00b      	beq.n	80051e2 <_svfiprintf_r+0x7e>
 80051ca:	465b      	mov	r3, fp
 80051cc:	4622      	mov	r2, r4
 80051ce:	4629      	mov	r1, r5
 80051d0:	4638      	mov	r0, r7
 80051d2:	f7ff ff6b 	bl	80050ac <__ssputs_r>
 80051d6:	3001      	adds	r0, #1
 80051d8:	f000 80a7 	beq.w	800532a <_svfiprintf_r+0x1c6>
 80051dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051de:	445a      	add	r2, fp
 80051e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80051e2:	f89a 3000 	ldrb.w	r3, [sl]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 809f 	beq.w	800532a <_svfiprintf_r+0x1c6>
 80051ec:	2300      	movs	r3, #0
 80051ee:	f04f 32ff 	mov.w	r2, #4294967295
 80051f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051f6:	f10a 0a01 	add.w	sl, sl, #1
 80051fa:	9304      	str	r3, [sp, #16]
 80051fc:	9307      	str	r3, [sp, #28]
 80051fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005202:	931a      	str	r3, [sp, #104]	@ 0x68
 8005204:	4654      	mov	r4, sl
 8005206:	2205      	movs	r2, #5
 8005208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800520c:	484e      	ldr	r0, [pc, #312]	@ (8005348 <_svfiprintf_r+0x1e4>)
 800520e:	f7fa ffff 	bl	8000210 <memchr>
 8005212:	9a04      	ldr	r2, [sp, #16]
 8005214:	b9d8      	cbnz	r0, 800524e <_svfiprintf_r+0xea>
 8005216:	06d0      	lsls	r0, r2, #27
 8005218:	bf44      	itt	mi
 800521a:	2320      	movmi	r3, #32
 800521c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005220:	0711      	lsls	r1, r2, #28
 8005222:	bf44      	itt	mi
 8005224:	232b      	movmi	r3, #43	@ 0x2b
 8005226:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800522a:	f89a 3000 	ldrb.w	r3, [sl]
 800522e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005230:	d015      	beq.n	800525e <_svfiprintf_r+0xfa>
 8005232:	9a07      	ldr	r2, [sp, #28]
 8005234:	4654      	mov	r4, sl
 8005236:	2000      	movs	r0, #0
 8005238:	f04f 0c0a 	mov.w	ip, #10
 800523c:	4621      	mov	r1, r4
 800523e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005242:	3b30      	subs	r3, #48	@ 0x30
 8005244:	2b09      	cmp	r3, #9
 8005246:	d94b      	bls.n	80052e0 <_svfiprintf_r+0x17c>
 8005248:	b1b0      	cbz	r0, 8005278 <_svfiprintf_r+0x114>
 800524a:	9207      	str	r2, [sp, #28]
 800524c:	e014      	b.n	8005278 <_svfiprintf_r+0x114>
 800524e:	eba0 0308 	sub.w	r3, r0, r8
 8005252:	fa09 f303 	lsl.w	r3, r9, r3
 8005256:	4313      	orrs	r3, r2
 8005258:	9304      	str	r3, [sp, #16]
 800525a:	46a2      	mov	sl, r4
 800525c:	e7d2      	b.n	8005204 <_svfiprintf_r+0xa0>
 800525e:	9b03      	ldr	r3, [sp, #12]
 8005260:	1d19      	adds	r1, r3, #4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	9103      	str	r1, [sp, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	bfbb      	ittet	lt
 800526a:	425b      	neglt	r3, r3
 800526c:	f042 0202 	orrlt.w	r2, r2, #2
 8005270:	9307      	strge	r3, [sp, #28]
 8005272:	9307      	strlt	r3, [sp, #28]
 8005274:	bfb8      	it	lt
 8005276:	9204      	strlt	r2, [sp, #16]
 8005278:	7823      	ldrb	r3, [r4, #0]
 800527a:	2b2e      	cmp	r3, #46	@ 0x2e
 800527c:	d10a      	bne.n	8005294 <_svfiprintf_r+0x130>
 800527e:	7863      	ldrb	r3, [r4, #1]
 8005280:	2b2a      	cmp	r3, #42	@ 0x2a
 8005282:	d132      	bne.n	80052ea <_svfiprintf_r+0x186>
 8005284:	9b03      	ldr	r3, [sp, #12]
 8005286:	1d1a      	adds	r2, r3, #4
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	9203      	str	r2, [sp, #12]
 800528c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005290:	3402      	adds	r4, #2
 8005292:	9305      	str	r3, [sp, #20]
 8005294:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005358 <_svfiprintf_r+0x1f4>
 8005298:	7821      	ldrb	r1, [r4, #0]
 800529a:	2203      	movs	r2, #3
 800529c:	4650      	mov	r0, sl
 800529e:	f7fa ffb7 	bl	8000210 <memchr>
 80052a2:	b138      	cbz	r0, 80052b4 <_svfiprintf_r+0x150>
 80052a4:	9b04      	ldr	r3, [sp, #16]
 80052a6:	eba0 000a 	sub.w	r0, r0, sl
 80052aa:	2240      	movs	r2, #64	@ 0x40
 80052ac:	4082      	lsls	r2, r0
 80052ae:	4313      	orrs	r3, r2
 80052b0:	3401      	adds	r4, #1
 80052b2:	9304      	str	r3, [sp, #16]
 80052b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b8:	4824      	ldr	r0, [pc, #144]	@ (800534c <_svfiprintf_r+0x1e8>)
 80052ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052be:	2206      	movs	r2, #6
 80052c0:	f7fa ffa6 	bl	8000210 <memchr>
 80052c4:	2800      	cmp	r0, #0
 80052c6:	d036      	beq.n	8005336 <_svfiprintf_r+0x1d2>
 80052c8:	4b21      	ldr	r3, [pc, #132]	@ (8005350 <_svfiprintf_r+0x1ec>)
 80052ca:	bb1b      	cbnz	r3, 8005314 <_svfiprintf_r+0x1b0>
 80052cc:	9b03      	ldr	r3, [sp, #12]
 80052ce:	3307      	adds	r3, #7
 80052d0:	f023 0307 	bic.w	r3, r3, #7
 80052d4:	3308      	adds	r3, #8
 80052d6:	9303      	str	r3, [sp, #12]
 80052d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052da:	4433      	add	r3, r6
 80052dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80052de:	e76a      	b.n	80051b6 <_svfiprintf_r+0x52>
 80052e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80052e4:	460c      	mov	r4, r1
 80052e6:	2001      	movs	r0, #1
 80052e8:	e7a8      	b.n	800523c <_svfiprintf_r+0xd8>
 80052ea:	2300      	movs	r3, #0
 80052ec:	3401      	adds	r4, #1
 80052ee:	9305      	str	r3, [sp, #20]
 80052f0:	4619      	mov	r1, r3
 80052f2:	f04f 0c0a 	mov.w	ip, #10
 80052f6:	4620      	mov	r0, r4
 80052f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052fc:	3a30      	subs	r2, #48	@ 0x30
 80052fe:	2a09      	cmp	r2, #9
 8005300:	d903      	bls.n	800530a <_svfiprintf_r+0x1a6>
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0c6      	beq.n	8005294 <_svfiprintf_r+0x130>
 8005306:	9105      	str	r1, [sp, #20]
 8005308:	e7c4      	b.n	8005294 <_svfiprintf_r+0x130>
 800530a:	fb0c 2101 	mla	r1, ip, r1, r2
 800530e:	4604      	mov	r4, r0
 8005310:	2301      	movs	r3, #1
 8005312:	e7f0      	b.n	80052f6 <_svfiprintf_r+0x192>
 8005314:	ab03      	add	r3, sp, #12
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	462a      	mov	r2, r5
 800531a:	4b0e      	ldr	r3, [pc, #56]	@ (8005354 <_svfiprintf_r+0x1f0>)
 800531c:	a904      	add	r1, sp, #16
 800531e:	4638      	mov	r0, r7
 8005320:	f3af 8000 	nop.w
 8005324:	1c42      	adds	r2, r0, #1
 8005326:	4606      	mov	r6, r0
 8005328:	d1d6      	bne.n	80052d8 <_svfiprintf_r+0x174>
 800532a:	89ab      	ldrh	r3, [r5, #12]
 800532c:	065b      	lsls	r3, r3, #25
 800532e:	f53f af2d 	bmi.w	800518c <_svfiprintf_r+0x28>
 8005332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005334:	e72c      	b.n	8005190 <_svfiprintf_r+0x2c>
 8005336:	ab03      	add	r3, sp, #12
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	462a      	mov	r2, r5
 800533c:	4b05      	ldr	r3, [pc, #20]	@ (8005354 <_svfiprintf_r+0x1f0>)
 800533e:	a904      	add	r1, sp, #16
 8005340:	4638      	mov	r0, r7
 8005342:	f000 f9bb 	bl	80056bc <_printf_i>
 8005346:	e7ed      	b.n	8005324 <_svfiprintf_r+0x1c0>
 8005348:	08006774 	.word	0x08006774
 800534c:	0800677e 	.word	0x0800677e
 8005350:	00000000 	.word	0x00000000
 8005354:	080050ad 	.word	0x080050ad
 8005358:	0800677a 	.word	0x0800677a

0800535c <__sfputc_r>:
 800535c:	6893      	ldr	r3, [r2, #8]
 800535e:	3b01      	subs	r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	b410      	push	{r4}
 8005364:	6093      	str	r3, [r2, #8]
 8005366:	da08      	bge.n	800537a <__sfputc_r+0x1e>
 8005368:	6994      	ldr	r4, [r2, #24]
 800536a:	42a3      	cmp	r3, r4
 800536c:	db01      	blt.n	8005372 <__sfputc_r+0x16>
 800536e:	290a      	cmp	r1, #10
 8005370:	d103      	bne.n	800537a <__sfputc_r+0x1e>
 8005372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005376:	f7ff bc75 	b.w	8004c64 <__swbuf_r>
 800537a:	6813      	ldr	r3, [r2, #0]
 800537c:	1c58      	adds	r0, r3, #1
 800537e:	6010      	str	r0, [r2, #0]
 8005380:	7019      	strb	r1, [r3, #0]
 8005382:	4608      	mov	r0, r1
 8005384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005388:	4770      	bx	lr

0800538a <__sfputs_r>:
 800538a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538c:	4606      	mov	r6, r0
 800538e:	460f      	mov	r7, r1
 8005390:	4614      	mov	r4, r2
 8005392:	18d5      	adds	r5, r2, r3
 8005394:	42ac      	cmp	r4, r5
 8005396:	d101      	bne.n	800539c <__sfputs_r+0x12>
 8005398:	2000      	movs	r0, #0
 800539a:	e007      	b.n	80053ac <__sfputs_r+0x22>
 800539c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a0:	463a      	mov	r2, r7
 80053a2:	4630      	mov	r0, r6
 80053a4:	f7ff ffda 	bl	800535c <__sfputc_r>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	d1f3      	bne.n	8005394 <__sfputs_r+0xa>
 80053ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053b0 <_vfiprintf_r>:
 80053b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b4:	460d      	mov	r5, r1
 80053b6:	b09d      	sub	sp, #116	@ 0x74
 80053b8:	4614      	mov	r4, r2
 80053ba:	4698      	mov	r8, r3
 80053bc:	4606      	mov	r6, r0
 80053be:	b118      	cbz	r0, 80053c8 <_vfiprintf_r+0x18>
 80053c0:	6a03      	ldr	r3, [r0, #32]
 80053c2:	b90b      	cbnz	r3, 80053c8 <_vfiprintf_r+0x18>
 80053c4:	f7ff fb0e 	bl	80049e4 <__sinit>
 80053c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053ca:	07d9      	lsls	r1, r3, #31
 80053cc:	d405      	bmi.n	80053da <_vfiprintf_r+0x2a>
 80053ce:	89ab      	ldrh	r3, [r5, #12]
 80053d0:	059a      	lsls	r2, r3, #22
 80053d2:	d402      	bmi.n	80053da <_vfiprintf_r+0x2a>
 80053d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053d6:	f7ff fd66 	bl	8004ea6 <__retarget_lock_acquire_recursive>
 80053da:	89ab      	ldrh	r3, [r5, #12]
 80053dc:	071b      	lsls	r3, r3, #28
 80053de:	d501      	bpl.n	80053e4 <_vfiprintf_r+0x34>
 80053e0:	692b      	ldr	r3, [r5, #16]
 80053e2:	b99b      	cbnz	r3, 800540c <_vfiprintf_r+0x5c>
 80053e4:	4629      	mov	r1, r5
 80053e6:	4630      	mov	r0, r6
 80053e8:	f7ff fc7a 	bl	8004ce0 <__swsetup_r>
 80053ec:	b170      	cbz	r0, 800540c <_vfiprintf_r+0x5c>
 80053ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053f0:	07dc      	lsls	r4, r3, #31
 80053f2:	d504      	bpl.n	80053fe <_vfiprintf_r+0x4e>
 80053f4:	f04f 30ff 	mov.w	r0, #4294967295
 80053f8:	b01d      	add	sp, #116	@ 0x74
 80053fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fe:	89ab      	ldrh	r3, [r5, #12]
 8005400:	0598      	lsls	r0, r3, #22
 8005402:	d4f7      	bmi.n	80053f4 <_vfiprintf_r+0x44>
 8005404:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005406:	f7ff fd4f 	bl	8004ea8 <__retarget_lock_release_recursive>
 800540a:	e7f3      	b.n	80053f4 <_vfiprintf_r+0x44>
 800540c:	2300      	movs	r3, #0
 800540e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005410:	2320      	movs	r3, #32
 8005412:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005416:	f8cd 800c 	str.w	r8, [sp, #12]
 800541a:	2330      	movs	r3, #48	@ 0x30
 800541c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80055cc <_vfiprintf_r+0x21c>
 8005420:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005424:	f04f 0901 	mov.w	r9, #1
 8005428:	4623      	mov	r3, r4
 800542a:	469a      	mov	sl, r3
 800542c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005430:	b10a      	cbz	r2, 8005436 <_vfiprintf_r+0x86>
 8005432:	2a25      	cmp	r2, #37	@ 0x25
 8005434:	d1f9      	bne.n	800542a <_vfiprintf_r+0x7a>
 8005436:	ebba 0b04 	subs.w	fp, sl, r4
 800543a:	d00b      	beq.n	8005454 <_vfiprintf_r+0xa4>
 800543c:	465b      	mov	r3, fp
 800543e:	4622      	mov	r2, r4
 8005440:	4629      	mov	r1, r5
 8005442:	4630      	mov	r0, r6
 8005444:	f7ff ffa1 	bl	800538a <__sfputs_r>
 8005448:	3001      	adds	r0, #1
 800544a:	f000 80a7 	beq.w	800559c <_vfiprintf_r+0x1ec>
 800544e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005450:	445a      	add	r2, fp
 8005452:	9209      	str	r2, [sp, #36]	@ 0x24
 8005454:	f89a 3000 	ldrb.w	r3, [sl]
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 809f 	beq.w	800559c <_vfiprintf_r+0x1ec>
 800545e:	2300      	movs	r3, #0
 8005460:	f04f 32ff 	mov.w	r2, #4294967295
 8005464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005468:	f10a 0a01 	add.w	sl, sl, #1
 800546c:	9304      	str	r3, [sp, #16]
 800546e:	9307      	str	r3, [sp, #28]
 8005470:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005474:	931a      	str	r3, [sp, #104]	@ 0x68
 8005476:	4654      	mov	r4, sl
 8005478:	2205      	movs	r2, #5
 800547a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800547e:	4853      	ldr	r0, [pc, #332]	@ (80055cc <_vfiprintf_r+0x21c>)
 8005480:	f7fa fec6 	bl	8000210 <memchr>
 8005484:	9a04      	ldr	r2, [sp, #16]
 8005486:	b9d8      	cbnz	r0, 80054c0 <_vfiprintf_r+0x110>
 8005488:	06d1      	lsls	r1, r2, #27
 800548a:	bf44      	itt	mi
 800548c:	2320      	movmi	r3, #32
 800548e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005492:	0713      	lsls	r3, r2, #28
 8005494:	bf44      	itt	mi
 8005496:	232b      	movmi	r3, #43	@ 0x2b
 8005498:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800549c:	f89a 3000 	ldrb.w	r3, [sl]
 80054a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80054a2:	d015      	beq.n	80054d0 <_vfiprintf_r+0x120>
 80054a4:	9a07      	ldr	r2, [sp, #28]
 80054a6:	4654      	mov	r4, sl
 80054a8:	2000      	movs	r0, #0
 80054aa:	f04f 0c0a 	mov.w	ip, #10
 80054ae:	4621      	mov	r1, r4
 80054b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054b4:	3b30      	subs	r3, #48	@ 0x30
 80054b6:	2b09      	cmp	r3, #9
 80054b8:	d94b      	bls.n	8005552 <_vfiprintf_r+0x1a2>
 80054ba:	b1b0      	cbz	r0, 80054ea <_vfiprintf_r+0x13a>
 80054bc:	9207      	str	r2, [sp, #28]
 80054be:	e014      	b.n	80054ea <_vfiprintf_r+0x13a>
 80054c0:	eba0 0308 	sub.w	r3, r0, r8
 80054c4:	fa09 f303 	lsl.w	r3, r9, r3
 80054c8:	4313      	orrs	r3, r2
 80054ca:	9304      	str	r3, [sp, #16]
 80054cc:	46a2      	mov	sl, r4
 80054ce:	e7d2      	b.n	8005476 <_vfiprintf_r+0xc6>
 80054d0:	9b03      	ldr	r3, [sp, #12]
 80054d2:	1d19      	adds	r1, r3, #4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	9103      	str	r1, [sp, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	bfbb      	ittet	lt
 80054dc:	425b      	neglt	r3, r3
 80054de:	f042 0202 	orrlt.w	r2, r2, #2
 80054e2:	9307      	strge	r3, [sp, #28]
 80054e4:	9307      	strlt	r3, [sp, #28]
 80054e6:	bfb8      	it	lt
 80054e8:	9204      	strlt	r2, [sp, #16]
 80054ea:	7823      	ldrb	r3, [r4, #0]
 80054ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80054ee:	d10a      	bne.n	8005506 <_vfiprintf_r+0x156>
 80054f0:	7863      	ldrb	r3, [r4, #1]
 80054f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80054f4:	d132      	bne.n	800555c <_vfiprintf_r+0x1ac>
 80054f6:	9b03      	ldr	r3, [sp, #12]
 80054f8:	1d1a      	adds	r2, r3, #4
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	9203      	str	r2, [sp, #12]
 80054fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005502:	3402      	adds	r4, #2
 8005504:	9305      	str	r3, [sp, #20]
 8005506:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80055dc <_vfiprintf_r+0x22c>
 800550a:	7821      	ldrb	r1, [r4, #0]
 800550c:	2203      	movs	r2, #3
 800550e:	4650      	mov	r0, sl
 8005510:	f7fa fe7e 	bl	8000210 <memchr>
 8005514:	b138      	cbz	r0, 8005526 <_vfiprintf_r+0x176>
 8005516:	9b04      	ldr	r3, [sp, #16]
 8005518:	eba0 000a 	sub.w	r0, r0, sl
 800551c:	2240      	movs	r2, #64	@ 0x40
 800551e:	4082      	lsls	r2, r0
 8005520:	4313      	orrs	r3, r2
 8005522:	3401      	adds	r4, #1
 8005524:	9304      	str	r3, [sp, #16]
 8005526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800552a:	4829      	ldr	r0, [pc, #164]	@ (80055d0 <_vfiprintf_r+0x220>)
 800552c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005530:	2206      	movs	r2, #6
 8005532:	f7fa fe6d 	bl	8000210 <memchr>
 8005536:	2800      	cmp	r0, #0
 8005538:	d03f      	beq.n	80055ba <_vfiprintf_r+0x20a>
 800553a:	4b26      	ldr	r3, [pc, #152]	@ (80055d4 <_vfiprintf_r+0x224>)
 800553c:	bb1b      	cbnz	r3, 8005586 <_vfiprintf_r+0x1d6>
 800553e:	9b03      	ldr	r3, [sp, #12]
 8005540:	3307      	adds	r3, #7
 8005542:	f023 0307 	bic.w	r3, r3, #7
 8005546:	3308      	adds	r3, #8
 8005548:	9303      	str	r3, [sp, #12]
 800554a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800554c:	443b      	add	r3, r7
 800554e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005550:	e76a      	b.n	8005428 <_vfiprintf_r+0x78>
 8005552:	fb0c 3202 	mla	r2, ip, r2, r3
 8005556:	460c      	mov	r4, r1
 8005558:	2001      	movs	r0, #1
 800555a:	e7a8      	b.n	80054ae <_vfiprintf_r+0xfe>
 800555c:	2300      	movs	r3, #0
 800555e:	3401      	adds	r4, #1
 8005560:	9305      	str	r3, [sp, #20]
 8005562:	4619      	mov	r1, r3
 8005564:	f04f 0c0a 	mov.w	ip, #10
 8005568:	4620      	mov	r0, r4
 800556a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800556e:	3a30      	subs	r2, #48	@ 0x30
 8005570:	2a09      	cmp	r2, #9
 8005572:	d903      	bls.n	800557c <_vfiprintf_r+0x1cc>
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0c6      	beq.n	8005506 <_vfiprintf_r+0x156>
 8005578:	9105      	str	r1, [sp, #20]
 800557a:	e7c4      	b.n	8005506 <_vfiprintf_r+0x156>
 800557c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005580:	4604      	mov	r4, r0
 8005582:	2301      	movs	r3, #1
 8005584:	e7f0      	b.n	8005568 <_vfiprintf_r+0x1b8>
 8005586:	ab03      	add	r3, sp, #12
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	462a      	mov	r2, r5
 800558c:	4b12      	ldr	r3, [pc, #72]	@ (80055d8 <_vfiprintf_r+0x228>)
 800558e:	a904      	add	r1, sp, #16
 8005590:	4630      	mov	r0, r6
 8005592:	f3af 8000 	nop.w
 8005596:	4607      	mov	r7, r0
 8005598:	1c78      	adds	r0, r7, #1
 800559a:	d1d6      	bne.n	800554a <_vfiprintf_r+0x19a>
 800559c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800559e:	07d9      	lsls	r1, r3, #31
 80055a0:	d405      	bmi.n	80055ae <_vfiprintf_r+0x1fe>
 80055a2:	89ab      	ldrh	r3, [r5, #12]
 80055a4:	059a      	lsls	r2, r3, #22
 80055a6:	d402      	bmi.n	80055ae <_vfiprintf_r+0x1fe>
 80055a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055aa:	f7ff fc7d 	bl	8004ea8 <__retarget_lock_release_recursive>
 80055ae:	89ab      	ldrh	r3, [r5, #12]
 80055b0:	065b      	lsls	r3, r3, #25
 80055b2:	f53f af1f 	bmi.w	80053f4 <_vfiprintf_r+0x44>
 80055b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055b8:	e71e      	b.n	80053f8 <_vfiprintf_r+0x48>
 80055ba:	ab03      	add	r3, sp, #12
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	462a      	mov	r2, r5
 80055c0:	4b05      	ldr	r3, [pc, #20]	@ (80055d8 <_vfiprintf_r+0x228>)
 80055c2:	a904      	add	r1, sp, #16
 80055c4:	4630      	mov	r0, r6
 80055c6:	f000 f879 	bl	80056bc <_printf_i>
 80055ca:	e7e4      	b.n	8005596 <_vfiprintf_r+0x1e6>
 80055cc:	08006774 	.word	0x08006774
 80055d0:	0800677e 	.word	0x0800677e
 80055d4:	00000000 	.word	0x00000000
 80055d8:	0800538b 	.word	0x0800538b
 80055dc:	0800677a 	.word	0x0800677a

080055e0 <_printf_common>:
 80055e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e4:	4616      	mov	r6, r2
 80055e6:	4698      	mov	r8, r3
 80055e8:	688a      	ldr	r2, [r1, #8]
 80055ea:	690b      	ldr	r3, [r1, #16]
 80055ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055f0:	4293      	cmp	r3, r2
 80055f2:	bfb8      	it	lt
 80055f4:	4613      	movlt	r3, r2
 80055f6:	6033      	str	r3, [r6, #0]
 80055f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055fc:	4607      	mov	r7, r0
 80055fe:	460c      	mov	r4, r1
 8005600:	b10a      	cbz	r2, 8005606 <_printf_common+0x26>
 8005602:	3301      	adds	r3, #1
 8005604:	6033      	str	r3, [r6, #0]
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	0699      	lsls	r1, r3, #26
 800560a:	bf42      	ittt	mi
 800560c:	6833      	ldrmi	r3, [r6, #0]
 800560e:	3302      	addmi	r3, #2
 8005610:	6033      	strmi	r3, [r6, #0]
 8005612:	6825      	ldr	r5, [r4, #0]
 8005614:	f015 0506 	ands.w	r5, r5, #6
 8005618:	d106      	bne.n	8005628 <_printf_common+0x48>
 800561a:	f104 0a19 	add.w	sl, r4, #25
 800561e:	68e3      	ldr	r3, [r4, #12]
 8005620:	6832      	ldr	r2, [r6, #0]
 8005622:	1a9b      	subs	r3, r3, r2
 8005624:	42ab      	cmp	r3, r5
 8005626:	dc26      	bgt.n	8005676 <_printf_common+0x96>
 8005628:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800562c:	6822      	ldr	r2, [r4, #0]
 800562e:	3b00      	subs	r3, #0
 8005630:	bf18      	it	ne
 8005632:	2301      	movne	r3, #1
 8005634:	0692      	lsls	r2, r2, #26
 8005636:	d42b      	bmi.n	8005690 <_printf_common+0xb0>
 8005638:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800563c:	4641      	mov	r1, r8
 800563e:	4638      	mov	r0, r7
 8005640:	47c8      	blx	r9
 8005642:	3001      	adds	r0, #1
 8005644:	d01e      	beq.n	8005684 <_printf_common+0xa4>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	6922      	ldr	r2, [r4, #16]
 800564a:	f003 0306 	and.w	r3, r3, #6
 800564e:	2b04      	cmp	r3, #4
 8005650:	bf02      	ittt	eq
 8005652:	68e5      	ldreq	r5, [r4, #12]
 8005654:	6833      	ldreq	r3, [r6, #0]
 8005656:	1aed      	subeq	r5, r5, r3
 8005658:	68a3      	ldr	r3, [r4, #8]
 800565a:	bf0c      	ite	eq
 800565c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005660:	2500      	movne	r5, #0
 8005662:	4293      	cmp	r3, r2
 8005664:	bfc4      	itt	gt
 8005666:	1a9b      	subgt	r3, r3, r2
 8005668:	18ed      	addgt	r5, r5, r3
 800566a:	2600      	movs	r6, #0
 800566c:	341a      	adds	r4, #26
 800566e:	42b5      	cmp	r5, r6
 8005670:	d11a      	bne.n	80056a8 <_printf_common+0xc8>
 8005672:	2000      	movs	r0, #0
 8005674:	e008      	b.n	8005688 <_printf_common+0xa8>
 8005676:	2301      	movs	r3, #1
 8005678:	4652      	mov	r2, sl
 800567a:	4641      	mov	r1, r8
 800567c:	4638      	mov	r0, r7
 800567e:	47c8      	blx	r9
 8005680:	3001      	adds	r0, #1
 8005682:	d103      	bne.n	800568c <_printf_common+0xac>
 8005684:	f04f 30ff 	mov.w	r0, #4294967295
 8005688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800568c:	3501      	adds	r5, #1
 800568e:	e7c6      	b.n	800561e <_printf_common+0x3e>
 8005690:	18e1      	adds	r1, r4, r3
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	2030      	movs	r0, #48	@ 0x30
 8005696:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800569a:	4422      	add	r2, r4
 800569c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80056a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80056a4:	3302      	adds	r3, #2
 80056a6:	e7c7      	b.n	8005638 <_printf_common+0x58>
 80056a8:	2301      	movs	r3, #1
 80056aa:	4622      	mov	r2, r4
 80056ac:	4641      	mov	r1, r8
 80056ae:	4638      	mov	r0, r7
 80056b0:	47c8      	blx	r9
 80056b2:	3001      	adds	r0, #1
 80056b4:	d0e6      	beq.n	8005684 <_printf_common+0xa4>
 80056b6:	3601      	adds	r6, #1
 80056b8:	e7d9      	b.n	800566e <_printf_common+0x8e>
	...

080056bc <_printf_i>:
 80056bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056c0:	7e0f      	ldrb	r7, [r1, #24]
 80056c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056c4:	2f78      	cmp	r7, #120	@ 0x78
 80056c6:	4691      	mov	r9, r2
 80056c8:	4680      	mov	r8, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	469a      	mov	sl, r3
 80056ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056d2:	d807      	bhi.n	80056e4 <_printf_i+0x28>
 80056d4:	2f62      	cmp	r7, #98	@ 0x62
 80056d6:	d80a      	bhi.n	80056ee <_printf_i+0x32>
 80056d8:	2f00      	cmp	r7, #0
 80056da:	f000 80d1 	beq.w	8005880 <_printf_i+0x1c4>
 80056de:	2f58      	cmp	r7, #88	@ 0x58
 80056e0:	f000 80b8 	beq.w	8005854 <_printf_i+0x198>
 80056e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056ec:	e03a      	b.n	8005764 <_printf_i+0xa8>
 80056ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056f2:	2b15      	cmp	r3, #21
 80056f4:	d8f6      	bhi.n	80056e4 <_printf_i+0x28>
 80056f6:	a101      	add	r1, pc, #4	@ (adr r1, 80056fc <_printf_i+0x40>)
 80056f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056fc:	08005755 	.word	0x08005755
 8005700:	08005769 	.word	0x08005769
 8005704:	080056e5 	.word	0x080056e5
 8005708:	080056e5 	.word	0x080056e5
 800570c:	080056e5 	.word	0x080056e5
 8005710:	080056e5 	.word	0x080056e5
 8005714:	08005769 	.word	0x08005769
 8005718:	080056e5 	.word	0x080056e5
 800571c:	080056e5 	.word	0x080056e5
 8005720:	080056e5 	.word	0x080056e5
 8005724:	080056e5 	.word	0x080056e5
 8005728:	08005867 	.word	0x08005867
 800572c:	08005793 	.word	0x08005793
 8005730:	08005821 	.word	0x08005821
 8005734:	080056e5 	.word	0x080056e5
 8005738:	080056e5 	.word	0x080056e5
 800573c:	08005889 	.word	0x08005889
 8005740:	080056e5 	.word	0x080056e5
 8005744:	08005793 	.word	0x08005793
 8005748:	080056e5 	.word	0x080056e5
 800574c:	080056e5 	.word	0x080056e5
 8005750:	08005829 	.word	0x08005829
 8005754:	6833      	ldr	r3, [r6, #0]
 8005756:	1d1a      	adds	r2, r3, #4
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6032      	str	r2, [r6, #0]
 800575c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005760:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005764:	2301      	movs	r3, #1
 8005766:	e09c      	b.n	80058a2 <_printf_i+0x1e6>
 8005768:	6833      	ldr	r3, [r6, #0]
 800576a:	6820      	ldr	r0, [r4, #0]
 800576c:	1d19      	adds	r1, r3, #4
 800576e:	6031      	str	r1, [r6, #0]
 8005770:	0606      	lsls	r6, r0, #24
 8005772:	d501      	bpl.n	8005778 <_printf_i+0xbc>
 8005774:	681d      	ldr	r5, [r3, #0]
 8005776:	e003      	b.n	8005780 <_printf_i+0xc4>
 8005778:	0645      	lsls	r5, r0, #25
 800577a:	d5fb      	bpl.n	8005774 <_printf_i+0xb8>
 800577c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005780:	2d00      	cmp	r5, #0
 8005782:	da03      	bge.n	800578c <_printf_i+0xd0>
 8005784:	232d      	movs	r3, #45	@ 0x2d
 8005786:	426d      	negs	r5, r5
 8005788:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800578c:	4858      	ldr	r0, [pc, #352]	@ (80058f0 <_printf_i+0x234>)
 800578e:	230a      	movs	r3, #10
 8005790:	e011      	b.n	80057b6 <_printf_i+0xfa>
 8005792:	6821      	ldr	r1, [r4, #0]
 8005794:	6833      	ldr	r3, [r6, #0]
 8005796:	0608      	lsls	r0, r1, #24
 8005798:	f853 5b04 	ldr.w	r5, [r3], #4
 800579c:	d402      	bmi.n	80057a4 <_printf_i+0xe8>
 800579e:	0649      	lsls	r1, r1, #25
 80057a0:	bf48      	it	mi
 80057a2:	b2ad      	uxthmi	r5, r5
 80057a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80057a6:	4852      	ldr	r0, [pc, #328]	@ (80058f0 <_printf_i+0x234>)
 80057a8:	6033      	str	r3, [r6, #0]
 80057aa:	bf14      	ite	ne
 80057ac:	230a      	movne	r3, #10
 80057ae:	2308      	moveq	r3, #8
 80057b0:	2100      	movs	r1, #0
 80057b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80057b6:	6866      	ldr	r6, [r4, #4]
 80057b8:	60a6      	str	r6, [r4, #8]
 80057ba:	2e00      	cmp	r6, #0
 80057bc:	db05      	blt.n	80057ca <_printf_i+0x10e>
 80057be:	6821      	ldr	r1, [r4, #0]
 80057c0:	432e      	orrs	r6, r5
 80057c2:	f021 0104 	bic.w	r1, r1, #4
 80057c6:	6021      	str	r1, [r4, #0]
 80057c8:	d04b      	beq.n	8005862 <_printf_i+0x1a6>
 80057ca:	4616      	mov	r6, r2
 80057cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80057d0:	fb03 5711 	mls	r7, r3, r1, r5
 80057d4:	5dc7      	ldrb	r7, [r0, r7]
 80057d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057da:	462f      	mov	r7, r5
 80057dc:	42bb      	cmp	r3, r7
 80057de:	460d      	mov	r5, r1
 80057e0:	d9f4      	bls.n	80057cc <_printf_i+0x110>
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d10b      	bne.n	80057fe <_printf_i+0x142>
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	07df      	lsls	r7, r3, #31
 80057ea:	d508      	bpl.n	80057fe <_printf_i+0x142>
 80057ec:	6923      	ldr	r3, [r4, #16]
 80057ee:	6861      	ldr	r1, [r4, #4]
 80057f0:	4299      	cmp	r1, r3
 80057f2:	bfde      	ittt	le
 80057f4:	2330      	movle	r3, #48	@ 0x30
 80057f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057fe:	1b92      	subs	r2, r2, r6
 8005800:	6122      	str	r2, [r4, #16]
 8005802:	f8cd a000 	str.w	sl, [sp]
 8005806:	464b      	mov	r3, r9
 8005808:	aa03      	add	r2, sp, #12
 800580a:	4621      	mov	r1, r4
 800580c:	4640      	mov	r0, r8
 800580e:	f7ff fee7 	bl	80055e0 <_printf_common>
 8005812:	3001      	adds	r0, #1
 8005814:	d14a      	bne.n	80058ac <_printf_i+0x1f0>
 8005816:	f04f 30ff 	mov.w	r0, #4294967295
 800581a:	b004      	add	sp, #16
 800581c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	f043 0320 	orr.w	r3, r3, #32
 8005826:	6023      	str	r3, [r4, #0]
 8005828:	4832      	ldr	r0, [pc, #200]	@ (80058f4 <_printf_i+0x238>)
 800582a:	2778      	movs	r7, #120	@ 0x78
 800582c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	6831      	ldr	r1, [r6, #0]
 8005834:	061f      	lsls	r7, r3, #24
 8005836:	f851 5b04 	ldr.w	r5, [r1], #4
 800583a:	d402      	bmi.n	8005842 <_printf_i+0x186>
 800583c:	065f      	lsls	r7, r3, #25
 800583e:	bf48      	it	mi
 8005840:	b2ad      	uxthmi	r5, r5
 8005842:	6031      	str	r1, [r6, #0]
 8005844:	07d9      	lsls	r1, r3, #31
 8005846:	bf44      	itt	mi
 8005848:	f043 0320 	orrmi.w	r3, r3, #32
 800584c:	6023      	strmi	r3, [r4, #0]
 800584e:	b11d      	cbz	r5, 8005858 <_printf_i+0x19c>
 8005850:	2310      	movs	r3, #16
 8005852:	e7ad      	b.n	80057b0 <_printf_i+0xf4>
 8005854:	4826      	ldr	r0, [pc, #152]	@ (80058f0 <_printf_i+0x234>)
 8005856:	e7e9      	b.n	800582c <_printf_i+0x170>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	f023 0320 	bic.w	r3, r3, #32
 800585e:	6023      	str	r3, [r4, #0]
 8005860:	e7f6      	b.n	8005850 <_printf_i+0x194>
 8005862:	4616      	mov	r6, r2
 8005864:	e7bd      	b.n	80057e2 <_printf_i+0x126>
 8005866:	6833      	ldr	r3, [r6, #0]
 8005868:	6825      	ldr	r5, [r4, #0]
 800586a:	6961      	ldr	r1, [r4, #20]
 800586c:	1d18      	adds	r0, r3, #4
 800586e:	6030      	str	r0, [r6, #0]
 8005870:	062e      	lsls	r6, r5, #24
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	d501      	bpl.n	800587a <_printf_i+0x1be>
 8005876:	6019      	str	r1, [r3, #0]
 8005878:	e002      	b.n	8005880 <_printf_i+0x1c4>
 800587a:	0668      	lsls	r0, r5, #25
 800587c:	d5fb      	bpl.n	8005876 <_printf_i+0x1ba>
 800587e:	8019      	strh	r1, [r3, #0]
 8005880:	2300      	movs	r3, #0
 8005882:	6123      	str	r3, [r4, #16]
 8005884:	4616      	mov	r6, r2
 8005886:	e7bc      	b.n	8005802 <_printf_i+0x146>
 8005888:	6833      	ldr	r3, [r6, #0]
 800588a:	1d1a      	adds	r2, r3, #4
 800588c:	6032      	str	r2, [r6, #0]
 800588e:	681e      	ldr	r6, [r3, #0]
 8005890:	6862      	ldr	r2, [r4, #4]
 8005892:	2100      	movs	r1, #0
 8005894:	4630      	mov	r0, r6
 8005896:	f7fa fcbb 	bl	8000210 <memchr>
 800589a:	b108      	cbz	r0, 80058a0 <_printf_i+0x1e4>
 800589c:	1b80      	subs	r0, r0, r6
 800589e:	6060      	str	r0, [r4, #4]
 80058a0:	6863      	ldr	r3, [r4, #4]
 80058a2:	6123      	str	r3, [r4, #16]
 80058a4:	2300      	movs	r3, #0
 80058a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058aa:	e7aa      	b.n	8005802 <_printf_i+0x146>
 80058ac:	6923      	ldr	r3, [r4, #16]
 80058ae:	4632      	mov	r2, r6
 80058b0:	4649      	mov	r1, r9
 80058b2:	4640      	mov	r0, r8
 80058b4:	47d0      	blx	sl
 80058b6:	3001      	adds	r0, #1
 80058b8:	d0ad      	beq.n	8005816 <_printf_i+0x15a>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	079b      	lsls	r3, r3, #30
 80058be:	d413      	bmi.n	80058e8 <_printf_i+0x22c>
 80058c0:	68e0      	ldr	r0, [r4, #12]
 80058c2:	9b03      	ldr	r3, [sp, #12]
 80058c4:	4298      	cmp	r0, r3
 80058c6:	bfb8      	it	lt
 80058c8:	4618      	movlt	r0, r3
 80058ca:	e7a6      	b.n	800581a <_printf_i+0x15e>
 80058cc:	2301      	movs	r3, #1
 80058ce:	4632      	mov	r2, r6
 80058d0:	4649      	mov	r1, r9
 80058d2:	4640      	mov	r0, r8
 80058d4:	47d0      	blx	sl
 80058d6:	3001      	adds	r0, #1
 80058d8:	d09d      	beq.n	8005816 <_printf_i+0x15a>
 80058da:	3501      	adds	r5, #1
 80058dc:	68e3      	ldr	r3, [r4, #12]
 80058de:	9903      	ldr	r1, [sp, #12]
 80058e0:	1a5b      	subs	r3, r3, r1
 80058e2:	42ab      	cmp	r3, r5
 80058e4:	dcf2      	bgt.n	80058cc <_printf_i+0x210>
 80058e6:	e7eb      	b.n	80058c0 <_printf_i+0x204>
 80058e8:	2500      	movs	r5, #0
 80058ea:	f104 0619 	add.w	r6, r4, #25
 80058ee:	e7f5      	b.n	80058dc <_printf_i+0x220>
 80058f0:	08006785 	.word	0x08006785
 80058f4:	08006796 	.word	0x08006796

080058f8 <__sflush_r>:
 80058f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80058fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005900:	0716      	lsls	r6, r2, #28
 8005902:	4605      	mov	r5, r0
 8005904:	460c      	mov	r4, r1
 8005906:	d454      	bmi.n	80059b2 <__sflush_r+0xba>
 8005908:	684b      	ldr	r3, [r1, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	dc02      	bgt.n	8005914 <__sflush_r+0x1c>
 800590e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	dd48      	ble.n	80059a6 <__sflush_r+0xae>
 8005914:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005916:	2e00      	cmp	r6, #0
 8005918:	d045      	beq.n	80059a6 <__sflush_r+0xae>
 800591a:	2300      	movs	r3, #0
 800591c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005920:	682f      	ldr	r7, [r5, #0]
 8005922:	6a21      	ldr	r1, [r4, #32]
 8005924:	602b      	str	r3, [r5, #0]
 8005926:	d030      	beq.n	800598a <__sflush_r+0x92>
 8005928:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800592a:	89a3      	ldrh	r3, [r4, #12]
 800592c:	0759      	lsls	r1, r3, #29
 800592e:	d505      	bpl.n	800593c <__sflush_r+0x44>
 8005930:	6863      	ldr	r3, [r4, #4]
 8005932:	1ad2      	subs	r2, r2, r3
 8005934:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005936:	b10b      	cbz	r3, 800593c <__sflush_r+0x44>
 8005938:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800593a:	1ad2      	subs	r2, r2, r3
 800593c:	2300      	movs	r3, #0
 800593e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005940:	6a21      	ldr	r1, [r4, #32]
 8005942:	4628      	mov	r0, r5
 8005944:	47b0      	blx	r6
 8005946:	1c43      	adds	r3, r0, #1
 8005948:	89a3      	ldrh	r3, [r4, #12]
 800594a:	d106      	bne.n	800595a <__sflush_r+0x62>
 800594c:	6829      	ldr	r1, [r5, #0]
 800594e:	291d      	cmp	r1, #29
 8005950:	d82b      	bhi.n	80059aa <__sflush_r+0xb2>
 8005952:	4a2a      	ldr	r2, [pc, #168]	@ (80059fc <__sflush_r+0x104>)
 8005954:	40ca      	lsrs	r2, r1
 8005956:	07d6      	lsls	r6, r2, #31
 8005958:	d527      	bpl.n	80059aa <__sflush_r+0xb2>
 800595a:	2200      	movs	r2, #0
 800595c:	6062      	str	r2, [r4, #4]
 800595e:	04d9      	lsls	r1, r3, #19
 8005960:	6922      	ldr	r2, [r4, #16]
 8005962:	6022      	str	r2, [r4, #0]
 8005964:	d504      	bpl.n	8005970 <__sflush_r+0x78>
 8005966:	1c42      	adds	r2, r0, #1
 8005968:	d101      	bne.n	800596e <__sflush_r+0x76>
 800596a:	682b      	ldr	r3, [r5, #0]
 800596c:	b903      	cbnz	r3, 8005970 <__sflush_r+0x78>
 800596e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005970:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005972:	602f      	str	r7, [r5, #0]
 8005974:	b1b9      	cbz	r1, 80059a6 <__sflush_r+0xae>
 8005976:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800597a:	4299      	cmp	r1, r3
 800597c:	d002      	beq.n	8005984 <__sflush_r+0x8c>
 800597e:	4628      	mov	r0, r5
 8005980:	f7ff fa9c 	bl	8004ebc <_free_r>
 8005984:	2300      	movs	r3, #0
 8005986:	6363      	str	r3, [r4, #52]	@ 0x34
 8005988:	e00d      	b.n	80059a6 <__sflush_r+0xae>
 800598a:	2301      	movs	r3, #1
 800598c:	4628      	mov	r0, r5
 800598e:	47b0      	blx	r6
 8005990:	4602      	mov	r2, r0
 8005992:	1c50      	adds	r0, r2, #1
 8005994:	d1c9      	bne.n	800592a <__sflush_r+0x32>
 8005996:	682b      	ldr	r3, [r5, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0c6      	beq.n	800592a <__sflush_r+0x32>
 800599c:	2b1d      	cmp	r3, #29
 800599e:	d001      	beq.n	80059a4 <__sflush_r+0xac>
 80059a0:	2b16      	cmp	r3, #22
 80059a2:	d11e      	bne.n	80059e2 <__sflush_r+0xea>
 80059a4:	602f      	str	r7, [r5, #0]
 80059a6:	2000      	movs	r0, #0
 80059a8:	e022      	b.n	80059f0 <__sflush_r+0xf8>
 80059aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059ae:	b21b      	sxth	r3, r3
 80059b0:	e01b      	b.n	80059ea <__sflush_r+0xf2>
 80059b2:	690f      	ldr	r7, [r1, #16]
 80059b4:	2f00      	cmp	r7, #0
 80059b6:	d0f6      	beq.n	80059a6 <__sflush_r+0xae>
 80059b8:	0793      	lsls	r3, r2, #30
 80059ba:	680e      	ldr	r6, [r1, #0]
 80059bc:	bf08      	it	eq
 80059be:	694b      	ldreq	r3, [r1, #20]
 80059c0:	600f      	str	r7, [r1, #0]
 80059c2:	bf18      	it	ne
 80059c4:	2300      	movne	r3, #0
 80059c6:	eba6 0807 	sub.w	r8, r6, r7
 80059ca:	608b      	str	r3, [r1, #8]
 80059cc:	f1b8 0f00 	cmp.w	r8, #0
 80059d0:	dde9      	ble.n	80059a6 <__sflush_r+0xae>
 80059d2:	6a21      	ldr	r1, [r4, #32]
 80059d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80059d6:	4643      	mov	r3, r8
 80059d8:	463a      	mov	r2, r7
 80059da:	4628      	mov	r0, r5
 80059dc:	47b0      	blx	r6
 80059de:	2800      	cmp	r0, #0
 80059e0:	dc08      	bgt.n	80059f4 <__sflush_r+0xfc>
 80059e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059ea:	81a3      	strh	r3, [r4, #12]
 80059ec:	f04f 30ff 	mov.w	r0, #4294967295
 80059f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059f4:	4407      	add	r7, r0
 80059f6:	eba8 0800 	sub.w	r8, r8, r0
 80059fa:	e7e7      	b.n	80059cc <__sflush_r+0xd4>
 80059fc:	20400001 	.word	0x20400001

08005a00 <_fflush_r>:
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	690b      	ldr	r3, [r1, #16]
 8005a04:	4605      	mov	r5, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	b913      	cbnz	r3, 8005a10 <_fflush_r+0x10>
 8005a0a:	2500      	movs	r5, #0
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	bd38      	pop	{r3, r4, r5, pc}
 8005a10:	b118      	cbz	r0, 8005a1a <_fflush_r+0x1a>
 8005a12:	6a03      	ldr	r3, [r0, #32]
 8005a14:	b90b      	cbnz	r3, 8005a1a <_fflush_r+0x1a>
 8005a16:	f7fe ffe5 	bl	80049e4 <__sinit>
 8005a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0f3      	beq.n	8005a0a <_fflush_r+0xa>
 8005a22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005a24:	07d0      	lsls	r0, r2, #31
 8005a26:	d404      	bmi.n	8005a32 <_fflush_r+0x32>
 8005a28:	0599      	lsls	r1, r3, #22
 8005a2a:	d402      	bmi.n	8005a32 <_fflush_r+0x32>
 8005a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a2e:	f7ff fa3a 	bl	8004ea6 <__retarget_lock_acquire_recursive>
 8005a32:	4628      	mov	r0, r5
 8005a34:	4621      	mov	r1, r4
 8005a36:	f7ff ff5f 	bl	80058f8 <__sflush_r>
 8005a3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a3c:	07da      	lsls	r2, r3, #31
 8005a3e:	4605      	mov	r5, r0
 8005a40:	d4e4      	bmi.n	8005a0c <_fflush_r+0xc>
 8005a42:	89a3      	ldrh	r3, [r4, #12]
 8005a44:	059b      	lsls	r3, r3, #22
 8005a46:	d4e1      	bmi.n	8005a0c <_fflush_r+0xc>
 8005a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a4a:	f7ff fa2d 	bl	8004ea8 <__retarget_lock_release_recursive>
 8005a4e:	e7dd      	b.n	8005a0c <_fflush_r+0xc>

08005a50 <__swhatbuf_r>:
 8005a50:	b570      	push	{r4, r5, r6, lr}
 8005a52:	460c      	mov	r4, r1
 8005a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a58:	2900      	cmp	r1, #0
 8005a5a:	b096      	sub	sp, #88	@ 0x58
 8005a5c:	4615      	mov	r5, r2
 8005a5e:	461e      	mov	r6, r3
 8005a60:	da0d      	bge.n	8005a7e <__swhatbuf_r+0x2e>
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a68:	f04f 0100 	mov.w	r1, #0
 8005a6c:	bf14      	ite	ne
 8005a6e:	2340      	movne	r3, #64	@ 0x40
 8005a70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a74:	2000      	movs	r0, #0
 8005a76:	6031      	str	r1, [r6, #0]
 8005a78:	602b      	str	r3, [r5, #0]
 8005a7a:	b016      	add	sp, #88	@ 0x58
 8005a7c:	bd70      	pop	{r4, r5, r6, pc}
 8005a7e:	466a      	mov	r2, sp
 8005a80:	f000 f862 	bl	8005b48 <_fstat_r>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	dbec      	blt.n	8005a62 <__swhatbuf_r+0x12>
 8005a88:	9901      	ldr	r1, [sp, #4]
 8005a8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a92:	4259      	negs	r1, r3
 8005a94:	4159      	adcs	r1, r3
 8005a96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a9a:	e7eb      	b.n	8005a74 <__swhatbuf_r+0x24>

08005a9c <__smakebuf_r>:
 8005a9c:	898b      	ldrh	r3, [r1, #12]
 8005a9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aa0:	079d      	lsls	r5, r3, #30
 8005aa2:	4606      	mov	r6, r0
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	d507      	bpl.n	8005ab8 <__smakebuf_r+0x1c>
 8005aa8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005aac:	6023      	str	r3, [r4, #0]
 8005aae:	6123      	str	r3, [r4, #16]
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	6163      	str	r3, [r4, #20]
 8005ab4:	b003      	add	sp, #12
 8005ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ab8:	ab01      	add	r3, sp, #4
 8005aba:	466a      	mov	r2, sp
 8005abc:	f7ff ffc8 	bl	8005a50 <__swhatbuf_r>
 8005ac0:	9f00      	ldr	r7, [sp, #0]
 8005ac2:	4605      	mov	r5, r0
 8005ac4:	4639      	mov	r1, r7
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	f7ff fa64 	bl	8004f94 <_malloc_r>
 8005acc:	b948      	cbnz	r0, 8005ae2 <__smakebuf_r+0x46>
 8005ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ad2:	059a      	lsls	r2, r3, #22
 8005ad4:	d4ee      	bmi.n	8005ab4 <__smakebuf_r+0x18>
 8005ad6:	f023 0303 	bic.w	r3, r3, #3
 8005ada:	f043 0302 	orr.w	r3, r3, #2
 8005ade:	81a3      	strh	r3, [r4, #12]
 8005ae0:	e7e2      	b.n	8005aa8 <__smakebuf_r+0xc>
 8005ae2:	89a3      	ldrh	r3, [r4, #12]
 8005ae4:	6020      	str	r0, [r4, #0]
 8005ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aea:	81a3      	strh	r3, [r4, #12]
 8005aec:	9b01      	ldr	r3, [sp, #4]
 8005aee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005af2:	b15b      	cbz	r3, 8005b0c <__smakebuf_r+0x70>
 8005af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005af8:	4630      	mov	r0, r6
 8005afa:	f000 f837 	bl	8005b6c <_isatty_r>
 8005afe:	b128      	cbz	r0, 8005b0c <__smakebuf_r+0x70>
 8005b00:	89a3      	ldrh	r3, [r4, #12]
 8005b02:	f023 0303 	bic.w	r3, r3, #3
 8005b06:	f043 0301 	orr.w	r3, r3, #1
 8005b0a:	81a3      	strh	r3, [r4, #12]
 8005b0c:	89a3      	ldrh	r3, [r4, #12]
 8005b0e:	431d      	orrs	r5, r3
 8005b10:	81a5      	strh	r5, [r4, #12]
 8005b12:	e7cf      	b.n	8005ab4 <__smakebuf_r+0x18>

08005b14 <memmove>:
 8005b14:	4288      	cmp	r0, r1
 8005b16:	b510      	push	{r4, lr}
 8005b18:	eb01 0402 	add.w	r4, r1, r2
 8005b1c:	d902      	bls.n	8005b24 <memmove+0x10>
 8005b1e:	4284      	cmp	r4, r0
 8005b20:	4623      	mov	r3, r4
 8005b22:	d807      	bhi.n	8005b34 <memmove+0x20>
 8005b24:	1e43      	subs	r3, r0, #1
 8005b26:	42a1      	cmp	r1, r4
 8005b28:	d008      	beq.n	8005b3c <memmove+0x28>
 8005b2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b32:	e7f8      	b.n	8005b26 <memmove+0x12>
 8005b34:	4402      	add	r2, r0
 8005b36:	4601      	mov	r1, r0
 8005b38:	428a      	cmp	r2, r1
 8005b3a:	d100      	bne.n	8005b3e <memmove+0x2a>
 8005b3c:	bd10      	pop	{r4, pc}
 8005b3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b46:	e7f7      	b.n	8005b38 <memmove+0x24>

08005b48 <_fstat_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	4d07      	ldr	r5, [pc, #28]	@ (8005b68 <_fstat_r+0x20>)
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	4604      	mov	r4, r0
 8005b50:	4608      	mov	r0, r1
 8005b52:	4611      	mov	r1, r2
 8005b54:	602b      	str	r3, [r5, #0]
 8005b56:	f7fc f987 	bl	8001e68 <_fstat>
 8005b5a:	1c43      	adds	r3, r0, #1
 8005b5c:	d102      	bne.n	8005b64 <_fstat_r+0x1c>
 8005b5e:	682b      	ldr	r3, [r5, #0]
 8005b60:	b103      	cbz	r3, 8005b64 <_fstat_r+0x1c>
 8005b62:	6023      	str	r3, [r4, #0]
 8005b64:	bd38      	pop	{r3, r4, r5, pc}
 8005b66:	bf00      	nop
 8005b68:	200004bc 	.word	0x200004bc

08005b6c <_isatty_r>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	4d06      	ldr	r5, [pc, #24]	@ (8005b88 <_isatty_r+0x1c>)
 8005b70:	2300      	movs	r3, #0
 8005b72:	4604      	mov	r4, r0
 8005b74:	4608      	mov	r0, r1
 8005b76:	602b      	str	r3, [r5, #0]
 8005b78:	f7fc f986 	bl	8001e88 <_isatty>
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	d102      	bne.n	8005b86 <_isatty_r+0x1a>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	b103      	cbz	r3, 8005b86 <_isatty_r+0x1a>
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	bd38      	pop	{r3, r4, r5, pc}
 8005b88:	200004bc 	.word	0x200004bc

08005b8c <_sbrk_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4d06      	ldr	r5, [pc, #24]	@ (8005ba8 <_sbrk_r+0x1c>)
 8005b90:	2300      	movs	r3, #0
 8005b92:	4604      	mov	r4, r0
 8005b94:	4608      	mov	r0, r1
 8005b96:	602b      	str	r3, [r5, #0]
 8005b98:	f7fc f98e 	bl	8001eb8 <_sbrk>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	d102      	bne.n	8005ba6 <_sbrk_r+0x1a>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	b103      	cbz	r3, 8005ba6 <_sbrk_r+0x1a>
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
 8005ba8:	200004bc 	.word	0x200004bc

08005bac <memcpy>:
 8005bac:	440a      	add	r2, r1
 8005bae:	4291      	cmp	r1, r2
 8005bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bb4:	d100      	bne.n	8005bb8 <memcpy+0xc>
 8005bb6:	4770      	bx	lr
 8005bb8:	b510      	push	{r4, lr}
 8005bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bc2:	4291      	cmp	r1, r2
 8005bc4:	d1f9      	bne.n	8005bba <memcpy+0xe>
 8005bc6:	bd10      	pop	{r4, pc}

08005bc8 <_realloc_r>:
 8005bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bcc:	4607      	mov	r7, r0
 8005bce:	4614      	mov	r4, r2
 8005bd0:	460d      	mov	r5, r1
 8005bd2:	b921      	cbnz	r1, 8005bde <_realloc_r+0x16>
 8005bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd8:	4611      	mov	r1, r2
 8005bda:	f7ff b9db 	b.w	8004f94 <_malloc_r>
 8005bde:	b92a      	cbnz	r2, 8005bec <_realloc_r+0x24>
 8005be0:	f7ff f96c 	bl	8004ebc <_free_r>
 8005be4:	4625      	mov	r5, r4
 8005be6:	4628      	mov	r0, r5
 8005be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bec:	f000 f81a 	bl	8005c24 <_malloc_usable_size_r>
 8005bf0:	4284      	cmp	r4, r0
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	d802      	bhi.n	8005bfc <_realloc_r+0x34>
 8005bf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005bfa:	d8f4      	bhi.n	8005be6 <_realloc_r+0x1e>
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	4638      	mov	r0, r7
 8005c00:	f7ff f9c8 	bl	8004f94 <_malloc_r>
 8005c04:	4680      	mov	r8, r0
 8005c06:	b908      	cbnz	r0, 8005c0c <_realloc_r+0x44>
 8005c08:	4645      	mov	r5, r8
 8005c0a:	e7ec      	b.n	8005be6 <_realloc_r+0x1e>
 8005c0c:	42b4      	cmp	r4, r6
 8005c0e:	4622      	mov	r2, r4
 8005c10:	4629      	mov	r1, r5
 8005c12:	bf28      	it	cs
 8005c14:	4632      	movcs	r2, r6
 8005c16:	f7ff ffc9 	bl	8005bac <memcpy>
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	f7ff f94d 	bl	8004ebc <_free_r>
 8005c22:	e7f1      	b.n	8005c08 <_realloc_r+0x40>

08005c24 <_malloc_usable_size_r>:
 8005c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c28:	1f18      	subs	r0, r3, #4
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	bfbc      	itt	lt
 8005c2e:	580b      	ldrlt	r3, [r1, r0]
 8005c30:	18c0      	addlt	r0, r0, r3
 8005c32:	4770      	bx	lr

08005c34 <_init>:
 8005c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c36:	bf00      	nop
 8005c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3a:	bc08      	pop	{r3}
 8005c3c:	469e      	mov	lr, r3
 8005c3e:	4770      	bx	lr

08005c40 <_fini>:
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c42:	bf00      	nop
 8005c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c46:	bc08      	pop	{r3}
 8005c48:	469e      	mov	lr, r3
 8005c4a:	4770      	bx	lr
