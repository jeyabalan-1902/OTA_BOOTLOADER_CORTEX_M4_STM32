
BOOTLOADER_V2_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  08004884  08004884  00005884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df4  08004df4  00006064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004df4  08004df4  00005df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dfc  08004dfc  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dfc  08004dfc  00005dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e00  08004e00  00005e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004e04  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000064  08004e68  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08004e68  0000639c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afcb  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002250  00000000  00000000  0001105f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  000132b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a4  00000000  00000000  00013cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021eee  00000000  00000000  00014454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc2f  00000000  00000000  00036342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9874  00000000  00000000  00042f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c7e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c60  00000000  00000000  0010c828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0010f488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800486c 	.word	0x0800486c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	0800486c 	.word	0x0800486c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005f0:	f3bf 8f4f 	dsb	sy
}
 80005f4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005f6:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <__NVIC_SystemReset+0x24>)
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005fe:	4904      	ldr	r1, [pc, #16]	@ (8000610 <__NVIC_SystemReset+0x24>)
 8000600:	4b04      	ldr	r3, [pc, #16]	@ (8000614 <__NVIC_SystemReset+0x28>)
 8000602:	4313      	orrs	r3, r2
 8000604:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000606:	f3bf 8f4f 	dsb	sy
}
 800060a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <__NVIC_SystemReset+0x20>
 8000610:	e000ed00 	.word	0xe000ed00
 8000614:	05fa0004 	.word	0x05fa0004

08000618 <bootloader_uart_read_data>:
                               BL_READ_SECTOR_P_STATUS} ;



void  bootloader_uart_read_data(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
    uint8_t rcv_len=0;
 800061e:	2300      	movs	r3, #0
 8000620:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bl_rx_buffer,0,200);
 8000622:	22c8      	movs	r2, #200	@ 0xc8
 8000624:	2100      	movs	r1, #0
 8000626:	4836      	ldr	r0, [pc, #216]	@ (8000700 <bootloader_uart_read_data+0xe8>)
 8000628:	f003 fca2 	bl	8003f70 <memset>
		//here we will read and decode the commands coming from host
		//first read only one byte from the host , which is the "length" field of the command packet
    HAL_UART_Receive(C_UART,bl_rx_buffer,1,HAL_MAX_DELAY);
 800062c:	4b35      	ldr	r3, [pc, #212]	@ (8000704 <bootloader_uart_read_data+0xec>)
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	2201      	movs	r2, #1
 8000636:	4932      	ldr	r1, [pc, #200]	@ (8000700 <bootloader_uart_read_data+0xe8>)
 8000638:	f003 f8b3 	bl	80037a2 <HAL_UART_Receive>
		rcv_len= bl_rx_buffer[0];
 800063c:	4b30      	ldr	r3, [pc, #192]	@ (8000700 <bootloader_uart_read_data+0xe8>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART,&bl_rx_buffer[1],rcv_len,HAL_MAX_DELAY);
 8000642:	4b30      	ldr	r3, [pc, #192]	@ (8000704 <bootloader_uart_read_data+0xec>)
 8000644:	6818      	ldr	r0, [r3, #0]
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	b29a      	uxth	r2, r3
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	492e      	ldr	r1, [pc, #184]	@ (8000708 <bootloader_uart_read_data+0xf0>)
 8000650:	f003 f8a7 	bl	80037a2 <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 8000654:	4b2a      	ldr	r3, [pc, #168]	@ (8000700 <bootloader_uart_read_data+0xe8>)
 8000656:	785b      	ldrb	r3, [r3, #1]
 8000658:	3b51      	subs	r3, #81	@ 0x51
 800065a:	2b0b      	cmp	r3, #11
 800065c:	d84a      	bhi.n	80006f4 <bootloader_uart_read_data+0xdc>
 800065e:	a201      	add	r2, pc, #4	@ (adr r2, 8000664 <bootloader_uart_read_data+0x4c>)
 8000660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000664:	08000695 	.word	0x08000695
 8000668:	0800069d 	.word	0x0800069d
 800066c:	080006a5 	.word	0x080006a5
 8000670:	080006ad 	.word	0x080006ad
 8000674:	080006b5 	.word	0x080006b5
 8000678:	080006bd 	.word	0x080006bd
 800067c:	080006c5 	.word	0x080006c5
 8000680:	080006cd 	.word	0x080006cd
 8000684:	080006d5 	.word	0x080006d5
 8000688:	080006dd 	.word	0x080006dd
 800068c:	080006e5 	.word	0x080006e5
 8000690:	080006ed 	.word	0x080006ed
		{
            case BL_GET_VER:
                bootloader_handle_getver_cmd(bl_rx_buffer);
 8000694:	481a      	ldr	r0, [pc, #104]	@ (8000700 <bootloader_uart_read_data+0xe8>)
 8000696:	f000 f8c1 	bl	800081c <bootloader_handle_getver_cmd>
                break;
 800069a:	e02f      	b.n	80006fc <bootloader_uart_read_data+0xe4>
            case BL_GET_HELP:
                bootloader_handle_gethelp_cmd(bl_rx_buffer);
 800069c:	4818      	ldr	r0, [pc, #96]	@ (8000700 <bootloader_uart_read_data+0xe8>)
 800069e:	f000 f905 	bl	80008ac <bootloader_handle_gethelp_cmd>
                break;
 80006a2:	e02b      	b.n	80006fc <bootloader_uart_read_data+0xe4>
            case BL_GET_CID:
                bootloader_handle_getcid_cmd(bl_rx_buffer);
 80006a4:	4816      	ldr	r0, [pc, #88]	@ (8000700 <bootloader_uart_read_data+0xe8>)
 80006a6:	f000 f93d 	bl	8000924 <bootloader_handle_getcid_cmd>
                break;
 80006aa:	e027      	b.n	80006fc <bootloader_uart_read_data+0xe4>
            case BL_GET_RDP_STATUS:
                bootloader_handle_getrdp_cmd(bl_rx_buffer);
 80006ac:	4814      	ldr	r0, [pc, #80]	@ (8000700 <bootloader_uart_read_data+0xe8>)
 80006ae:	f000 f985 	bl	80009bc <bootloader_handle_getrdp_cmd>
                break;
 80006b2:	e023      	b.n	80006fc <bootloader_uart_read_data+0xe4>
            case BL_GO_TO_ADDR:
                bootloader_handle_go_cmd(bl_rx_buffer);
 80006b4:	4812      	ldr	r0, [pc, #72]	@ (8000700 <bootloader_uart_read_data+0xe8>)
 80006b6:	f000 f9cd 	bl	8000a54 <bootloader_handle_go_cmd>
                break;
 80006ba:	e01f      	b.n	80006fc <bootloader_uart_read_data+0xe4>
            case BL_FLASH_ERASE:
                bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 80006bc:	4810      	ldr	r0, [pc, #64]	@ (8000700 <bootloader_uart_read_data+0xe8>)
 80006be:	f000 fa2d 	bl	8000b1c <bootloader_handle_flash_erase_cmd>
                break;
 80006c2:	e01b      	b.n	80006fc <bootloader_uart_read_data+0xe4>
            case BL_MEM_WRITE:
                bootloader_handle_mem_write_cmd(bl_rx_buffer);
 80006c4:	480e      	ldr	r0, [pc, #56]	@ (8000700 <bootloader_uart_read_data+0xe8>)
 80006c6:	f000 fa93 	bl	8000bf0 <bootloader_handle_mem_write_cmd>
                break;
 80006ca:	e017      	b.n	80006fc <bootloader_uart_read_data+0xe4>
            case BL_EN_RW_PROTECT:
                bootloader_handle_en_rw_protect(bl_rx_buffer);
 80006cc:	480c      	ldr	r0, [pc, #48]	@ (8000700 <bootloader_uart_read_data+0xe8>)
 80006ce:	f000 fb17 	bl	8000d00 <bootloader_handle_en_rw_protect>
                break;
 80006d2:	e013      	b.n	80006fc <bootloader_uart_read_data+0xe4>
            case BL_MEM_READ:
                bootloader_handle_mem_read(bl_rx_buffer);
 80006d4:	480a      	ldr	r0, [pc, #40]	@ (8000700 <bootloader_uart_read_data+0xe8>)
 80006d6:	f000 fbb1 	bl	8000e3c <bootloader_handle_mem_read>
                break;
 80006da:	e00f      	b.n	80006fc <bootloader_uart_read_data+0xe4>
            case BL_READ_SECTOR_P_STATUS:
                bootloader_handle_read_sector_protection_status(bl_rx_buffer);
 80006dc:	4808      	ldr	r0, [pc, #32]	@ (8000700 <bootloader_uart_read_data+0xe8>)
 80006de:	f000 fbb7 	bl	8000e50 <bootloader_handle_read_sector_protection_status>
                break;
 80006e2:	e00b      	b.n	80006fc <bootloader_uart_read_data+0xe4>
            case BL_OTP_READ:
                bootloader_handle_read_otp(bl_rx_buffer);
 80006e4:	4806      	ldr	r0, [pc, #24]	@ (8000700 <bootloader_uart_read_data+0xe8>)
 80006e6:	f000 fbfb 	bl	8000ee0 <bootloader_handle_read_otp>
                break;
 80006ea:	e007      	b.n	80006fc <bootloader_uart_read_data+0xe4>
						case BL_DIS_R_W_PROTECT:
                bootloader_handle_dis_rw_protect(bl_rx_buffer);
 80006ec:	4804      	ldr	r0, [pc, #16]	@ (8000700 <bootloader_uart_read_data+0xe8>)
 80006ee:	f000 fb59 	bl	8000da4 <bootloader_handle_dis_rw_protect>
                break;
 80006f2:	e003      	b.n	80006fc <bootloader_uart_read_data+0xe4>
             default:
                printmsg("BL_DEBUG_MSG:Invalid command code received from host \n");
 80006f4:	4805      	ldr	r0, [pc, #20]	@ (800070c <bootloader_uart_read_data+0xf4>)
 80006f6:	f000 f86b 	bl	80007d0 <printmsg>
                break;
 80006fa:	bf00      	nop
		memset(bl_rx_buffer,0,200);
 80006fc:	e791      	b.n	8000622 <bootloader_uart_read_data+0xa>
 80006fe:	bf00      	nop
 8000700:	20000080 	.word	0x20000080
 8000704:	20000148 	.word	0x20000148
 8000708:	20000081 	.word	0x20000081
 800070c:	08004884 	.word	0x08004884

08000710 <bootloader_jump_to_user_app>:
/*code to jump to user application
 *Here we are assuming FLASH_SECTOR2_BASE_ADDRESS
 *is where the user application is stored
 */
void bootloader_jump_to_user_app(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
	 void (*app_reset_handler)(void);

	    printmsg("BL_DEBUG_MSG: bootloader_jump_to_user_app\n");
 8000716:	4826      	ldr	r0, [pc, #152]	@ (80007b0 <bootloader_jump_to_user_app+0xa0>)
 8000718:	f000 f85a 	bl	80007d0 <printmsg>

	    // 1. Fetch MSP and Reset Handler
	    uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 800071c:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <bootloader_jump_to_user_app+0xa4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	613b      	str	r3, [r7, #16]
	    uint32_t reset_handler_address = *(volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS + 4);
 8000722:	4b25      	ldr	r3, [pc, #148]	@ (80007b8 <bootloader_jump_to_user_app+0xa8>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	60fb      	str	r3, [r7, #12]

	    printmsg("BL_DEBUG_MSG: MSP value: %#x\n", msp_value);
 8000728:	6939      	ldr	r1, [r7, #16]
 800072a:	4824      	ldr	r0, [pc, #144]	@ (80007bc <bootloader_jump_to_user_app+0xac>)
 800072c:	f000 f850 	bl	80007d0 <printmsg>
	    printmsg("BL_DEBUG_MSG: Reset Handler address: %#x\n", reset_handler_address);
 8000730:	68f9      	ldr	r1, [r7, #12]
 8000732:	4823      	ldr	r0, [pc, #140]	@ (80007c0 <bootloader_jump_to_user_app+0xb0>)
 8000734:	f000 f84c 	bl	80007d0 <printmsg>

	    // 2. Disable interrupts
	   // __disable_irq();
	    HAL_RCC_DeInit();
 8000738:	f002 fbc2 	bl	8002ec0 <HAL_RCC_DeInit>
		HAL_DeInit();
 800073c:	f001 f9b4 	bl	8001aa8 <HAL_DeInit>

		// Reset SysTick
		SysTick->CTRL = 0;
 8000740:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <bootloader_jump_to_user_app+0xb4>)
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 8000746:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <bootloader_jump_to_user_app+0xb4>)
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
 800074c:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <bootloader_jump_to_user_app+0xb4>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
		//__disable_irq();
		for (int i = 0; i < 8; i++) {
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	e010      	b.n	800077a <bootloader_jump_to_user_app+0x6a>
			NVIC->ICER[i] = 0xFFFFFFFF;
 8000758:	4a1b      	ldr	r2, [pc, #108]	@ (80007c8 <bootloader_jump_to_user_app+0xb8>)
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	3320      	adds	r3, #32
 800075e:	f04f 31ff 	mov.w	r1, #4294967295
 8000762:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			NVIC->ICPR[i] = 0xFFFFFFFF;
 8000766:	4a18      	ldr	r2, [pc, #96]	@ (80007c8 <bootloader_jump_to_user_app+0xb8>)
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	3360      	adds	r3, #96	@ 0x60
 800076c:	f04f 31ff 	mov.w	r1, #4294967295
 8000770:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 8; i++) {
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	3301      	adds	r3, #1
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	2b07      	cmp	r3, #7
 800077e:	ddeb      	ble.n	8000758 <bootloader_jump_to_user_app+0x48>
		}
	    // 3. Set vector table offset and MSP
	    SCB->VTOR = FLASH_SECTOR2_BASE_ADDRESS;
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <bootloader_jump_to_user_app+0xbc>)
 8000782:	4a0c      	ldr	r2, [pc, #48]	@ (80007b4 <bootloader_jump_to_user_app+0xa4>)
 8000784:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000786:	f3bf 8f4f 	dsb	sy
}
 800078a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800078c:	f3bf 8f6f 	isb	sy
}
 8000790:	bf00      	nop
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f383 8808 	msr	MSP, r3
}
 800079c:	bf00      	nop
		__DSB();
		__ISB();
	    __set_MSP(msp_value);

	    // 4. Jump to application
	    app_reset_handler = (void *)reset_handler_address;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	60bb      	str	r3, [r7, #8]
	    app_reset_handler();
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	4798      	blx	r3

}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	080048bc 	.word	0x080048bc
 80007b4:	08008000 	.word	0x08008000
 80007b8:	08008004 	.word	0x08008004
 80007bc:	080048e8 	.word	0x080048e8
 80007c0:	08004908 	.word	0x08004908
 80007c4:	e000e010 	.word	0xe000e010
 80007c8:	e000e100 	.word	0xe000e100
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <printmsg>:
/* prints formatted string to console over UART */
 void printmsg(char *format,...)
 {
 80007d0:	b40f      	push	{r0, r1, r2, r3}
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b096      	sub	sp, #88	@ 0x58
 80007d6:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80007d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80007dc:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80007e6:	4618      	mov	r0, r3
 80007e8:	f003 fbb8 	bl	8003f5c <vsiprintf>
	HAL_UART_Transmit(D_UART,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fd0d 	bl	8000210 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f107 0108 	add.w	r1, r7, #8
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <printmsg+0x48>)
 8000804:	f002 ff42 	bl	800368c <HAL_UART_Transmit>
	va_end(args);
#endif
 }
 8000808:	bf00      	nop
 800080a:	3758      	adds	r7, #88	@ 0x58
 800080c:	46bd      	mov	sp, r7
 800080e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000812:	b004      	add	sp, #16
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	2000019c 	.word	0x2000019c

0800081c <bootloader_handle_getver_cmd>:

 /**************Implementation of Boot-loader Command Handle functions *********/

 /*Helper function to handle BL_GET_VER command */
 void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
 {
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
     uint8_t bl_version;

     // 1) verify the checksum
       printmsg("BL_DEBUG_MSG:bootloader_handle_getver_cmd\n");
 8000824:	481d      	ldr	r0, [pc, #116]	@ (800089c <bootloader_handle_getver_cmd+0x80>)
 8000826:	f7ff ffd3 	bl	80007d0 <printmsg>

 	 //Total length of the command packet
 	  uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	617b      	str	r3, [r7, #20]

 	  //extract the CRC32 sent by the Host
 	  uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	3b04      	subs	r3, #4
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	613b      	str	r3, [r7, #16]

     if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3b04      	subs	r3, #4
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	4619      	mov	r1, r3
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f000 fb84 	bl	8000f54 <bootloader_verify_crc>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d11a      	bne.n	8000888 <bootloader_handle_getver_cmd+0x6c>
     {
         printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000852:	4813      	ldr	r0, [pc, #76]	@ (80008a0 <bootloader_handle_getver_cmd+0x84>)
 8000854:	f7ff ffbc 	bl	80007d0 <printmsg>
         // checksum is correct..
         bootloader_send_ack(bl_rx_buffer[0],1);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2101      	movs	r1, #1
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fb48 	bl	8000ef4 <bootloader_send_ack>
         bl_version=get_bootloader_version();
 8000864:	f000 fbbe 	bl	8000fe4 <get_bootloader_version>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]
         printmsg("BL_DEBUG_MSG:BL_VER : %d %#x\n",bl_version,bl_version);
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	4619      	mov	r1, r3
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	461a      	mov	r2, r3
 8000874:	480b      	ldr	r0, [pc, #44]	@ (80008a4 <bootloader_handle_getver_cmd+0x88>)
 8000876:	f7ff ffab 	bl	80007d0 <printmsg>
         bootloader_uart_write_data(&bl_version,1);
 800087a:	f107 030f 	add.w	r3, r7, #15
 800087e:	2101      	movs	r1, #1
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fb9b 	bl	8000fbc <bootloader_uart_write_data>
         //checksum is wrong send nack
         bootloader_send_nack();
     }


 }
 8000886:	e004      	b.n	8000892 <bootloader_handle_getver_cmd+0x76>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000888:	4807      	ldr	r0, [pc, #28]	@ (80008a8 <bootloader_handle_getver_cmd+0x8c>)
 800088a:	f7ff ffa1 	bl	80007d0 <printmsg>
         bootloader_send_nack();
 800088e:	f000 fb4d 	bl	8000f2c <bootloader_send_nack>
 }
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	08004934 	.word	0x08004934
 80008a0:	08004960 	.word	0x08004960
 80008a4:	08004984 	.word	0x08004984
 80008a8:	080049a4 	.word	0x080049a4

080008ac <bootloader_handle_gethelp_cmd>:

 /*Helper function to handle BL_GET_HELP command
  * Bootloader sends out All supported Command codes
  */
 void bootloader_handle_gethelp_cmd(uint8_t *pBuffer)
 {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
     printmsg("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n");
 80008b4:	4816      	ldr	r0, [pc, #88]	@ (8000910 <bootloader_handle_gethelp_cmd+0x64>)
 80008b6:	f7ff ff8b 	bl	80007d0 <printmsg>

 	//Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80008ba:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <bootloader_handle_gethelp_cmd+0x68>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	3b04      	subs	r3, #4
 80008c6:	4a13      	ldr	r2, [pc, #76]	@ (8000914 <bootloader_handle_gethelp_cmd+0x68>)
 80008c8:	4413      	add	r3, r2
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	60bb      	str	r3, [r7, #8]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	3b04      	subs	r3, #4
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	4619      	mov	r1, r3
 80008d6:	480f      	ldr	r0, [pc, #60]	@ (8000914 <bootloader_handle_gethelp_cmd+0x68>)
 80008d8:	f000 fb3c 	bl	8000f54 <bootloader_verify_crc>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d10d      	bne.n	80008fe <bootloader_handle_gethelp_cmd+0x52>
 	{
         printmsg("BL_DEBUG_MSG:checksum success !!\n");
 80008e2:	480d      	ldr	r0, [pc, #52]	@ (8000918 <bootloader_handle_gethelp_cmd+0x6c>)
 80008e4:	f7ff ff74 	bl	80007d0 <printmsg>
         bootloader_send_ack(pBuffer[0],sizeof(supported_commands));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2108      	movs	r1, #8
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fb00 	bl	8000ef4 <bootloader_send_ack>
         bootloader_uart_write_data(supported_commands,sizeof(supported_commands) );
 80008f4:	2108      	movs	r1, #8
 80008f6:	4809      	ldr	r0, [pc, #36]	@ (800091c <bootloader_handle_gethelp_cmd+0x70>)
 80008f8:	f000 fb60 	bl	8000fbc <bootloader_uart_write_data>
 	{
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}

 }
 80008fc:	e004      	b.n	8000908 <bootloader_handle_gethelp_cmd+0x5c>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80008fe:	4808      	ldr	r0, [pc, #32]	@ (8000920 <bootloader_handle_gethelp_cmd+0x74>)
 8000900:	f7ff ff66 	bl	80007d0 <printmsg>
         bootloader_send_nack();
 8000904:	f000 fb12 	bl	8000f2c <bootloader_send_nack>
 }
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	080049c4 	.word	0x080049c4
 8000914:	20000080 	.word	0x20000080
 8000918:	08004960 	.word	0x08004960
 800091c:	20000000 	.word	0x20000000
 8000920:	080049a4 	.word	0x080049a4

08000924 <bootloader_handle_getcid_cmd>:

 /*Helper function to handle BL_GET_CID command */
 void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
 {
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 	uint16_t bl_cid_num = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	81fb      	strh	r3, [r7, #14]
 	printmsg("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n");
 8000930:	481d      	ldr	r0, [pc, #116]	@ (80009a8 <bootloader_handle_getcid_cmd+0x84>)
 8000932:	f7ff ff4d 	bl	80007d0 <printmsg>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000936:	4b1d      	ldr	r3, [pc, #116]	@ (80009ac <bootloader_handle_getcid_cmd+0x88>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	3b04      	subs	r3, #4
 8000942:	4a1a      	ldr	r2, [pc, #104]	@ (80009ac <bootloader_handle_getcid_cmd+0x88>)
 8000944:	4413      	add	r3, r2
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	613b      	str	r3, [r7, #16]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	3b04      	subs	r3, #4
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4619      	mov	r1, r3
 8000952:	4816      	ldr	r0, [pc, #88]	@ (80009ac <bootloader_handle_getcid_cmd+0x88>)
 8000954:	f000 fafe 	bl	8000f54 <bootloader_verify_crc>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d11a      	bne.n	8000994 <bootloader_handle_getcid_cmd+0x70>
 	{
         printmsg("BL_DEBUG_MSG:checksum success !!\n");
 800095e:	4814      	ldr	r0, [pc, #80]	@ (80009b0 <bootloader_handle_getcid_cmd+0x8c>)
 8000960:	f7ff ff36 	bl	80007d0 <printmsg>
         bootloader_send_ack(pBuffer[0],2);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2102      	movs	r1, #2
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fac2 	bl	8000ef4 <bootloader_send_ack>
         bl_cid_num = get_mcu_chip_id();
 8000970:	f000 fb40 	bl	8000ff4 <get_mcu_chip_id>
 8000974:	4603      	mov	r3, r0
 8000976:	81fb      	strh	r3, [r7, #14]
         printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
 8000978:	89fb      	ldrh	r3, [r7, #14]
 800097a:	4619      	mov	r1, r3
 800097c:	89fb      	ldrh	r3, [r7, #14]
 800097e:	461a      	mov	r2, r3
 8000980:	480c      	ldr	r0, [pc, #48]	@ (80009b4 <bootloader_handle_getcid_cmd+0x90>)
 8000982:	f7ff ff25 	bl	80007d0 <printmsg>
         bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000986:	f107 030e 	add.w	r3, r7, #14
 800098a:	2102      	movs	r1, #2
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fb15 	bl	8000fbc <bootloader_uart_write_data>
 	}else
 	{
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}
 }
 8000992:	e004      	b.n	800099e <bootloader_handle_getcid_cmd+0x7a>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000994:	4808      	ldr	r0, [pc, #32]	@ (80009b8 <bootloader_handle_getcid_cmd+0x94>)
 8000996:	f7ff ff1b 	bl	80007d0 <printmsg>
         bootloader_send_nack();
 800099a:	f000 fac7 	bl	8000f2c <bootloader_send_nack>
 }
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	080049f0 	.word	0x080049f0
 80009ac:	20000080 	.word	0x20000080
 80009b0:	08004960 	.word	0x08004960
 80009b4:	08004a1c 	.word	0x08004a1c
 80009b8:	080049a4 	.word	0x080049a4

080009bc <bootloader_handle_getrdp_cmd>:

 /*Helper function to handle BL_GET_RDP_STATUS command */
 void bootloader_handle_getrdp_cmd(uint8_t *pBuffer)
 {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
     uint8_t rdp_level = 0x00;
 80009c4:	2300      	movs	r3, #0
 80009c6:	73fb      	strb	r3, [r7, #15]
     printmsg("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n");
 80009c8:	481d      	ldr	r0, [pc, #116]	@ (8000a40 <bootloader_handle_getrdp_cmd+0x84>)
 80009ca:	f7ff ff01 	bl	80007d0 <printmsg>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80009ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000a44 <bootloader_handle_getrdp_cmd+0x88>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	3b04      	subs	r3, #4
 80009da:	4a1a      	ldr	r2, [pc, #104]	@ (8000a44 <bootloader_handle_getrdp_cmd+0x88>)
 80009dc:	4413      	add	r3, r2
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	613b      	str	r3, [r7, #16]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3b04      	subs	r3, #4
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4619      	mov	r1, r3
 80009ea:	4816      	ldr	r0, [pc, #88]	@ (8000a44 <bootloader_handle_getrdp_cmd+0x88>)
 80009ec:	f000 fab2 	bl	8000f54 <bootloader_verify_crc>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d11a      	bne.n	8000a2c <bootloader_handle_getrdp_cmd+0x70>
 	{
         printmsg("BL_DEBUG_MSG:checksum success !!\n");
 80009f6:	4814      	ldr	r0, [pc, #80]	@ (8000a48 <bootloader_handle_getrdp_cmd+0x8c>)
 80009f8:	f7ff feea 	bl	80007d0 <printmsg>
         bootloader_send_ack(pBuffer[0],1);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2101      	movs	r1, #1
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 fa76 	bl	8000ef4 <bootloader_send_ack>
         rdp_level = get_flash_rdp_level();
 8000a08:	f000 fb06 	bl	8001018 <get_flash_rdp_level>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	73fb      	strb	r3, [r7, #15]
         printmsg("BL_DEBUG_MSG:RDP level: %d %#x\n",rdp_level,rdp_level);
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	4619      	mov	r1, r3
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	461a      	mov	r2, r3
 8000a18:	480c      	ldr	r0, [pc, #48]	@ (8000a4c <bootloader_handle_getrdp_cmd+0x90>)
 8000a1a:	f7ff fed9 	bl	80007d0 <printmsg>
         bootloader_uart_write_data(&rdp_level,1);
 8000a1e:	f107 030f 	add.w	r3, r7, #15
 8000a22:	2101      	movs	r1, #1
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 fac9 	bl	8000fbc <bootloader_uart_write_data>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}


 }
 8000a2a:	e004      	b.n	8000a36 <bootloader_handle_getrdp_cmd+0x7a>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000a2c:	4808      	ldr	r0, [pc, #32]	@ (8000a50 <bootloader_handle_getrdp_cmd+0x94>)
 8000a2e:	f7ff fecf 	bl	80007d0 <printmsg>
         bootloader_send_nack();
 8000a32:	f000 fa7b 	bl	8000f2c <bootloader_send_nack>
 }
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	08004a40 	.word	0x08004a40
 8000a44:	20000080 	.word	0x20000080
 8000a48:	08004960 	.word	0x08004960
 8000a4c:	08004a6c 	.word	0x08004a6c
 8000a50:	080049a4 	.word	0x080049a4

08000a54 <bootloader_handle_go_cmd>:

 /*Helper function to handle BL_GO_TO_ADDR command */
 void bootloader_handle_go_cmd(uint8_t *pBuffer)
 {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
     uint32_t go_address=0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
     uint8_t addr_valid = ADDR_VALID;
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]
     uint8_t addr_invalid = ADDR_INVALID;
 8000a64:	2301      	movs	r3, #1
 8000a66:	73bb      	strb	r3, [r7, #14]

     printmsg("BL_DEBUG_MSG:bootloader_handle_go_cmd\n");
 8000a68:	4826      	ldr	r0, [pc, #152]	@ (8000b04 <bootloader_handle_go_cmd+0xb0>)
 8000a6a:	f7ff feb1 	bl	80007d0 <printmsg>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000a6e:	4b26      	ldr	r3, [pc, #152]	@ (8000b08 <bootloader_handle_go_cmd+0xb4>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	3b04      	subs	r3, #4
 8000a7a:	4a23      	ldr	r2, [pc, #140]	@ (8000b08 <bootloader_handle_go_cmd+0xb4>)
 8000a7c:	4413      	add	r3, r2
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	617b      	str	r3, [r7, #20]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	3b04      	subs	r3, #4
 8000a86:	697a      	ldr	r2, [r7, #20]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	481f      	ldr	r0, [pc, #124]	@ (8000b08 <bootloader_handle_go_cmd+0xb4>)
 8000a8c:	f000 fa62 	bl	8000f54 <bootloader_verify_crc>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d12d      	bne.n	8000af2 <bootloader_handle_go_cmd+0x9e>
 	{
         printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000a96:	481d      	ldr	r0, [pc, #116]	@ (8000b0c <bootloader_handle_go_cmd+0xb8>)
 8000a98:	f7ff fe9a 	bl	80007d0 <printmsg>

         bootloader_send_ack(pBuffer[0],1);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 fa26 	bl	8000ef4 <bootloader_send_ack>

         //extract the go address
         go_address = *((uint32_t *)&pBuffer[2] );
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000aae:	61fb      	str	r3, [r7, #28]
         printmsg("BL_DEBUG_MSG:GO addr: %#x\n",go_address);
 8000ab0:	69f9      	ldr	r1, [r7, #28]
 8000ab2:	4817      	ldr	r0, [pc, #92]	@ (8000b10 <bootloader_handle_go_cmd+0xbc>)
 8000ab4:	f7ff fe8c 	bl	80007d0 <printmsg>

         if( verify_address(go_address) == ADDR_VALID )
 8000ab8:	69f8      	ldr	r0, [r7, #28]
 8000aba:	f000 fac1 	bl	8001040 <verify_address>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10c      	bne.n	8000ade <bootloader_handle_go_cmd+0x8a>
         {
             //tell host that address is fine
             bootloader_uart_write_data(&addr_valid,1);
 8000ac4:	f107 030f 	add.w	r3, r7, #15
 8000ac8:	2101      	movs	r1, #1
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 fa76 	bl	8000fbc <bootloader_uart_write_data>
             Its not the duty of bootloader. so just trust and jump */

             /* Not doing the below line will result in hardfault exception for ARM cortex M */
             //watch : https://www.youtube.com/watch?v=VX_12SjnNhY

             go_address+=1; //make T bit =1
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	61fb      	str	r3, [r7, #28]

             void (*lets_jump)(void) = (void *)go_address;
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	613b      	str	r3, [r7, #16]
             NVIC_SystemReset();
 8000ada:	f7ff fd87 	bl	80005ec <__NVIC_SystemReset>

             lets_jump();

 		}else
 		{
             printmsg("BL_DEBUG_MSG:GO addr invalid ! \n");
 8000ade:	480d      	ldr	r0, [pc, #52]	@ (8000b14 <bootloader_handle_go_cmd+0xc0>)
 8000ae0:	f7ff fe76 	bl	80007d0 <printmsg>
             //tell host that address is invalid
             bootloader_uart_write_data(&addr_invalid,1);
 8000ae4:	f107 030e 	add.w	r3, r7, #14
 8000ae8:	2101      	movs	r1, #1
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fa66 	bl	8000fbc <bootloader_uart_write_data>
 	{
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}

 }
 8000af0:	e004      	b.n	8000afc <bootloader_handle_go_cmd+0xa8>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000af2:	4809      	ldr	r0, [pc, #36]	@ (8000b18 <bootloader_handle_go_cmd+0xc4>)
 8000af4:	f7ff fe6c 	bl	80007d0 <printmsg>
         bootloader_send_nack();
 8000af8:	f000 fa18 	bl	8000f2c <bootloader_send_nack>
 }
 8000afc:	bf00      	nop
 8000afe:	3720      	adds	r7, #32
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	08004a8c 	.word	0x08004a8c
 8000b08:	20000080 	.word	0x20000080
 8000b0c:	08004960 	.word	0x08004960
 8000b10:	08004ab4 	.word	0x08004ab4
 8000b14:	08004ad0 	.word	0x08004ad0
 8000b18:	080049a4 	.word	0x080049a4

08000b1c <bootloader_handle_flash_erase_cmd>:

 /*Helper function to handle BL_FLASH_ERASE command */
 void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
 {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
     uint8_t erase_status = 0x00;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]
     printmsg("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n");
 8000b28:	482a      	ldr	r0, [pc, #168]	@ (8000bd4 <bootloader_handle_flash_erase_cmd+0xb8>)
 8000b2a:	f7ff fe51 	bl	80007d0 <printmsg>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	3b04      	subs	r3, #4
 8000b3a:	4a27      	ldr	r2, [pc, #156]	@ (8000bd8 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000b3c:	4413      	add	r3, r2
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	613b      	str	r3, [r7, #16]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3b04      	subs	r3, #4
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4823      	ldr	r0, [pc, #140]	@ (8000bd8 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000b4c:	f000 fa02 	bl	8000f54 <bootloader_verify_crc>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d135      	bne.n	8000bc2 <bootloader_handle_flash_erase_cmd+0xa6>
 	{
         printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000b56:	4821      	ldr	r0, [pc, #132]	@ (8000bdc <bootloader_handle_flash_erase_cmd+0xc0>)
 8000b58:	f7ff fe3a 	bl	80007d0 <printmsg>
         bootloader_send_ack(pBuffer[0],1);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2101      	movs	r1, #1
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f9c6 	bl	8000ef4 <bootloader_send_ack>
         printmsg("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3303      	adds	r3, #3
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	4819      	ldr	r0, [pc, #100]	@ (8000be0 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000b7a:	f7ff fe29 	bl	80007d0 <printmsg>

         HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2120      	movs	r1, #32
 8000b82:	4818      	ldr	r0, [pc, #96]	@ (8000be4 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000b84:	f001 fe6e 	bl	8002864 <HAL_GPIO_WritePin>
         erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3302      	adds	r3, #2
 8000b8c:	781a      	ldrb	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3303      	adds	r3, #3
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	4610      	mov	r0, r2
 8000b98:	f000 fa90 	bl	80010bc <execute_flash_erase>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	73fb      	strb	r3, [r7, #15]
         HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2120      	movs	r1, #32
 8000ba4:	480f      	ldr	r0, [pc, #60]	@ (8000be4 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000ba6:	f001 fe5d 	bl	8002864 <HAL_GPIO_WritePin>

         printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",erase_status);
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	4619      	mov	r1, r3
 8000bae:	480e      	ldr	r0, [pc, #56]	@ (8000be8 <bootloader_handle_flash_erase_cmd+0xcc>)
 8000bb0:	f7ff fe0e 	bl	80007d0 <printmsg>

         bootloader_uart_write_data(&erase_status,1);
 8000bb4:	f107 030f 	add.w	r3, r7, #15
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f9fe 	bl	8000fbc <bootloader_uart_write_data>
 	}else
 	{
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}
 }
 8000bc0:	e004      	b.n	8000bcc <bootloader_handle_flash_erase_cmd+0xb0>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000bc2:	480a      	ldr	r0, [pc, #40]	@ (8000bec <bootloader_handle_flash_erase_cmd+0xd0>)
 8000bc4:	f7ff fe04 	bl	80007d0 <printmsg>
         bootloader_send_nack();
 8000bc8:	f000 f9b0 	bl	8000f2c <bootloader_send_nack>
 }
 8000bcc:	bf00      	nop
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	08004af4 	.word	0x08004af4
 8000bd8:	20000080 	.word	0x20000080
 8000bdc:	08004960 	.word	0x08004960
 8000be0:	08004b24 	.word	0x08004b24
 8000be4:	40020000 	.word	0x40020000
 8000be8:	08004b58 	.word	0x08004b58
 8000bec:	080049a4 	.word	0x080049a4

08000bf0 <bootloader_handle_mem_write_cmd>:

 /*Helper function to handle BL_MEM_WRITE command */
 void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
 {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 	uint8_t addr_valid = ADDR_VALID;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	77fb      	strb	r3, [r7, #31]
 	uint8_t write_status = 0x00;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]
 	uint8_t chksum =0, len=0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	77bb      	strb	r3, [r7, #30]
 8000c04:	2300      	movs	r3, #0
 8000c06:	777b      	strb	r3, [r7, #29]
 	len = pBuffer[0];
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	777b      	strb	r3, [r7, #29]
 	uint8_t payload_len = pBuffer[6];
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	799b      	ldrb	r3, [r3, #6]
 8000c12:	773b      	strb	r3, [r7, #28]

 	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000c1a:	61bb      	str	r3, [r7, #24]

 	chksum = pBuffer[len];
 8000c1c:	7f7b      	ldrb	r3, [r7, #29]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	77bb      	strb	r3, [r7, #30]

     printmsg("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n");
 8000c26:	482e      	ldr	r0, [pc, #184]	@ (8000ce0 <bootloader_handle_mem_write_cmd+0xf0>)
 8000c28:	f7ff fdd2 	bl	80007d0 <printmsg>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce4 <bootloader_handle_mem_write_cmd+0xf4>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	3b04      	subs	r3, #4
 8000c38:	4a2a      	ldr	r2, [pc, #168]	@ (8000ce4 <bootloader_handle_mem_write_cmd+0xf4>)
 8000c3a:	4413      	add	r3, r2
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	613b      	str	r3, [r7, #16]


 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	3b04      	subs	r3, #4
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4619      	mov	r1, r3
 8000c48:	4826      	ldr	r0, [pc, #152]	@ (8000ce4 <bootloader_handle_mem_write_cmd+0xf4>)
 8000c4a:	f000 f983 	bl	8000f54 <bootloader_verify_crc>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d13b      	bne.n	8000ccc <bootloader_handle_mem_write_cmd+0xdc>
 	{
         printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000c54:	4824      	ldr	r0, [pc, #144]	@ (8000ce8 <bootloader_handle_mem_write_cmd+0xf8>)
 8000c56:	f7ff fdbb 	bl	80007d0 <printmsg>

         bootloader_send_ack(pBuffer[0],1);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2101      	movs	r1, #1
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 f947 	bl	8000ef4 <bootloader_send_ack>

         printmsg("BL_DEBUG_MSG: mem write address : %#x\n",mem_address);
 8000c66:	69b9      	ldr	r1, [r7, #24]
 8000c68:	4820      	ldr	r0, [pc, #128]	@ (8000cec <bootloader_handle_mem_write_cmd+0xfc>)
 8000c6a:	f7ff fdb1 	bl	80007d0 <printmsg>

 		if( verify_address(mem_address) == ADDR_VALID )
 8000c6e:	69b8      	ldr	r0, [r7, #24]
 8000c70:	f000 f9e6 	bl	8001040 <verify_address>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d11c      	bne.n	8000cb4 <bootloader_handle_mem_write_cmd+0xc4>
 		{

             printmsg("BL_DEBUG_MSG: valid mem write address\n");
 8000c7a:	481d      	ldr	r0, [pc, #116]	@ (8000cf0 <bootloader_handle_mem_write_cmd+0x100>)
 8000c7c:	f7ff fda8 	bl	80007d0 <printmsg>

             //glow the led to indicate bootloader is currently writing to memory
             HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2120      	movs	r1, #32
 8000c84:	481b      	ldr	r0, [pc, #108]	@ (8000cf4 <bootloader_handle_mem_write_cmd+0x104>)
 8000c86:	f001 fded 	bl	8002864 <HAL_GPIO_WritePin>

             //execute mem write
             write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3307      	adds	r3, #7
 8000c8e:	7f3a      	ldrb	r2, [r7, #28]
 8000c90:	69b9      	ldr	r1, [r7, #24]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fa59 	bl	800114a <execute_mem_write>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	73fb      	strb	r3, [r7, #15]

             //turn off the led to indicate memory write is over
             HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2120      	movs	r1, #32
 8000ca0:	4814      	ldr	r0, [pc, #80]	@ (8000cf4 <bootloader_handle_mem_write_cmd+0x104>)
 8000ca2:	f001 fddf 	bl	8002864 <HAL_GPIO_WritePin>

             //inform host about the status
             bootloader_uart_write_data(&write_status,1);
 8000ca6:	f107 030f 	add.w	r3, r7, #15
 8000caa:	2101      	movs	r1, #1
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f985 	bl	8000fbc <bootloader_uart_write_data>
 	{
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}

 }
 8000cb2:	e010      	b.n	8000cd6 <bootloader_handle_mem_write_cmd+0xe6>
             printmsg("BL_DEBUG_MSG: invalid mem write address\n");
 8000cb4:	4810      	ldr	r0, [pc, #64]	@ (8000cf8 <bootloader_handle_mem_write_cmd+0x108>)
 8000cb6:	f7ff fd8b 	bl	80007d0 <printmsg>
             write_status = ADDR_INVALID;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	73fb      	strb	r3, [r7, #15]
             bootloader_uart_write_data(&write_status,1);
 8000cbe:	f107 030f 	add.w	r3, r7, #15
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 f979 	bl	8000fbc <bootloader_uart_write_data>
 }
 8000cca:	e004      	b.n	8000cd6 <bootloader_handle_mem_write_cmd+0xe6>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000ccc:	480b      	ldr	r0, [pc, #44]	@ (8000cfc <bootloader_handle_mem_write_cmd+0x10c>)
 8000cce:	f7ff fd7f 	bl	80007d0 <printmsg>
         bootloader_send_nack();
 8000cd2:	f000 f92b 	bl	8000f2c <bootloader_send_nack>
 }
 8000cd6:	bf00      	nop
 8000cd8:	3720      	adds	r7, #32
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	08004b80 	.word	0x08004b80
 8000ce4:	20000080 	.word	0x20000080
 8000ce8:	08004960 	.word	0x08004960
 8000cec:	08004bb0 	.word	0x08004bb0
 8000cf0:	08004bd8 	.word	0x08004bd8
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	08004c00 	.word	0x08004c00
 8000cfc:	080049a4 	.word	0x080049a4

08000d00 <bootloader_handle_en_rw_protect>:

 /*Helper function to handle BL_EN_RW_PROTECT  command */
 void bootloader_handle_en_rw_protect(uint8_t *pBuffer)
 {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
     uint8_t status = 0x00;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]
     printmsg("BL_DEBUG_MSG:bootloader_handle_endis_rw_protect\n");
 8000d0c:	4820      	ldr	r0, [pc, #128]	@ (8000d90 <bootloader_handle_en_rw_protect+0x90>)
 8000d0e:	f7ff fd5f 	bl	80007d0 <printmsg>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000d12:	4b20      	ldr	r3, [pc, #128]	@ (8000d94 <bootloader_handle_en_rw_protect+0x94>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	3b04      	subs	r3, #4
 8000d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8000d94 <bootloader_handle_en_rw_protect+0x94>)
 8000d20:	4413      	add	r3, r2
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	613b      	str	r3, [r7, #16]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3b04      	subs	r3, #4
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4819      	ldr	r0, [pc, #100]	@ (8000d94 <bootloader_handle_en_rw_protect+0x94>)
 8000d30:	f000 f910 	bl	8000f54 <bootloader_verify_crc>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d120      	bne.n	8000d7c <bootloader_handle_en_rw_protect+0x7c>
 	{
         printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000d3a:	4817      	ldr	r0, [pc, #92]	@ (8000d98 <bootloader_handle_en_rw_protect+0x98>)
 8000d3c:	f7ff fd48 	bl	80007d0 <printmsg>
         bootloader_send_ack(pBuffer[0],1);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2101      	movs	r1, #1
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f8d4 	bl	8000ef4 <bootloader_send_ack>

         status = configure_flash_sector_rw_protection(pBuffer[2] , pBuffer[3],0);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3302      	adds	r3, #2
 8000d50:	7818      	ldrb	r0, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3303      	adds	r3, #3
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f000 fa22 	bl	80011a4 <configure_flash_sector_rw_protection>
 8000d60:	4603      	mov	r3, r0
 8000d62:	73fb      	strb	r3, [r7, #15]

         printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	4619      	mov	r1, r3
 8000d68:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <bootloader_handle_en_rw_protect+0x9c>)
 8000d6a:	f7ff fd31 	bl	80007d0 <printmsg>

         bootloader_uart_write_data(&status,1);
 8000d6e:	f107 030f 	add.w	r3, r7, #15
 8000d72:	2101      	movs	r1, #1
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 f921 	bl	8000fbc <bootloader_uart_write_data>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}


 }
 8000d7a:	e004      	b.n	8000d86 <bootloader_handle_en_rw_protect+0x86>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000d7c:	4808      	ldr	r0, [pc, #32]	@ (8000da0 <bootloader_handle_en_rw_protect+0xa0>)
 8000d7e:	f7ff fd27 	bl	80007d0 <printmsg>
         bootloader_send_nack();
 8000d82:	f000 f8d3 	bl	8000f2c <bootloader_send_nack>
 }
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	08004c2c 	.word	0x08004c2c
 8000d94:	20000080 	.word	0x20000080
 8000d98:	08004960 	.word	0x08004960
 8000d9c:	08004b58 	.word	0x08004b58
 8000da0:	080049a4 	.word	0x080049a4

08000da4 <bootloader_handle_dis_rw_protect>:


 /*Helper function to handle BL_EN_RW_PROTECT  command */
 void bootloader_handle_dis_rw_protect(uint8_t *pBuffer)
 {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
     uint8_t status = 0x00;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]
     printmsg("BL_DEBUG_MSG:bootloader_handle_dis_rw_protect\n");
 8000db0:	481d      	ldr	r0, [pc, #116]	@ (8000e28 <bootloader_handle_dis_rw_protect+0x84>)
 8000db2:	f7ff fd0d 	bl	80007d0 <printmsg>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <bootloader_handle_dis_rw_protect+0x88>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3b04      	subs	r3, #4
 8000dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8000e2c <bootloader_handle_dis_rw_protect+0x88>)
 8000dc4:	4413      	add	r3, r2
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	613b      	str	r3, [r7, #16]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3b04      	subs	r3, #4
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4816      	ldr	r0, [pc, #88]	@ (8000e2c <bootloader_handle_dis_rw_protect+0x88>)
 8000dd4:	f000 f8be 	bl	8000f54 <bootloader_verify_crc>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d11b      	bne.n	8000e16 <bootloader_handle_dis_rw_protect+0x72>
 	{
         printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000dde:	4814      	ldr	r0, [pc, #80]	@ (8000e30 <bootloader_handle_dis_rw_protect+0x8c>)
 8000de0:	f7ff fcf6 	bl	80007d0 <printmsg>
         bootloader_send_ack(pBuffer[0],1);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2101      	movs	r1, #1
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f882 	bl	8000ef4 <bootloader_send_ack>

         status = configure_flash_sector_rw_protection(0,0,1);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2100      	movs	r1, #0
 8000df4:	2000      	movs	r0, #0
 8000df6:	f000 f9d5 	bl	80011a4 <configure_flash_sector_rw_protection>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	73fb      	strb	r3, [r7, #15]

         printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	4619      	mov	r1, r3
 8000e02:	480c      	ldr	r0, [pc, #48]	@ (8000e34 <bootloader_handle_dis_rw_protect+0x90>)
 8000e04:	f7ff fce4 	bl	80007d0 <printmsg>

         bootloader_uart_write_data(&status,1);
 8000e08:	f107 030f 	add.w	r3, r7, #15
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f8d4 	bl	8000fbc <bootloader_uart_write_data>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}


 }
 8000e14:	e004      	b.n	8000e20 <bootloader_handle_dis_rw_protect+0x7c>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000e16:	4808      	ldr	r0, [pc, #32]	@ (8000e38 <bootloader_handle_dis_rw_protect+0x94>)
 8000e18:	f7ff fcda 	bl	80007d0 <printmsg>
         bootloader_send_nack();
 8000e1c:	f000 f886 	bl	8000f2c <bootloader_send_nack>
 }
 8000e20:	bf00      	nop
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	08004c60 	.word	0x08004c60
 8000e2c:	20000080 	.word	0x20000080
 8000e30:	08004960 	.word	0x08004960
 8000e34:	08004b58 	.word	0x08004b58
 8000e38:	080049a4 	.word	0x080049a4

08000e3c <bootloader_handle_mem_read>:

 /*Helper function to handle BL_MEM_READ command */
 void bootloader_handle_mem_read (uint8_t *pBuffer)
 {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]


 }
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <bootloader_handle_read_sector_protection_status>:

 /*Helper function to handle _BL_READ_SECTOR_P_STATUS command */
 void bootloader_handle_read_sector_protection_status(uint8_t *pBuffer)
 {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 	 uint16_t status;
 	printmsg("BL_DEBUG_MSG:bootloader_handle_read_sector_protection_status\n");
 8000e58:	481c      	ldr	r0, [pc, #112]	@ (8000ecc <bootloader_handle_read_sector_protection_status+0x7c>)
 8000e5a:	f7ff fcb9 	bl	80007d0 <printmsg>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <bootloader_handle_read_sector_protection_status+0x80>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3b04      	subs	r3, #4
 8000e6a:	4a19      	ldr	r2, [pc, #100]	@ (8000ed0 <bootloader_handle_read_sector_protection_status+0x80>)
 8000e6c:	4413      	add	r3, r2
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	613b      	str	r3, [r7, #16]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3b04      	subs	r3, #4
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4815      	ldr	r0, [pc, #84]	@ (8000ed0 <bootloader_handle_read_sector_protection_status+0x80>)
 8000e7c:	f000 f86a 	bl	8000f54 <bootloader_verify_crc>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d118      	bne.n	8000eb8 <bootloader_handle_read_sector_protection_status+0x68>
 	{
         printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000e86:	4813      	ldr	r0, [pc, #76]	@ (8000ed4 <bootloader_handle_read_sector_protection_status+0x84>)
 8000e88:	f7ff fca2 	bl	80007d0 <printmsg>
         bootloader_send_ack(pBuffer[0],2);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2102      	movs	r1, #2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f82e 	bl	8000ef4 <bootloader_send_ack>
         status=read_OB_rw_protection_status();
 8000e98:	f000 fa1a 	bl	80012d0 <read_OB_rw_protection_status>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	81fb      	strh	r3, [r7, #14]
         printmsg("BL_DEBUG_MSG: nWRP status: %#x\n",status);
 8000ea0:	89fb      	ldrh	r3, [r7, #14]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480c      	ldr	r0, [pc, #48]	@ (8000ed8 <bootloader_handle_read_sector_protection_status+0x88>)
 8000ea6:	f7ff fc93 	bl	80007d0 <printmsg>
         bootloader_uart_write_data((uint8_t*)&status,2);
 8000eaa:	f107 030e 	add.w	r3, r7, #14
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 f883 	bl	8000fbc <bootloader_uart_write_data>
 	{
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}

 }
 8000eb6:	e004      	b.n	8000ec2 <bootloader_handle_read_sector_protection_status+0x72>
         printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000eb8:	4808      	ldr	r0, [pc, #32]	@ (8000edc <bootloader_handle_read_sector_protection_status+0x8c>)
 8000eba:	f7ff fc89 	bl	80007d0 <printmsg>
         bootloader_send_nack();
 8000ebe:	f000 f835 	bl	8000f2c <bootloader_send_nack>
 }
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	08004c90 	.word	0x08004c90
 8000ed0:	20000080 	.word	0x20000080
 8000ed4:	08004960 	.word	0x08004960
 8000ed8:	08004cd0 	.word	0x08004cd0
 8000edc:	080049a4 	.word	0x080049a4

08000ee0 <bootloader_handle_read_otp>:

 /*Helper function to handle BL_OTP_READ command */
 void bootloader_handle_read_otp(uint8_t *pBuffer)
 {
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]


 }
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <bootloader_send_ack>:

 /*This function sends ACK if CRC matches along with "len to follow"*/
 void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
 {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	460a      	mov	r2, r1
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	71bb      	strb	r3, [r7, #6]
 	 //here we send 2 byte.. first byte is ack and the second byte is len value
 	uint8_t ack_buf[2];
 	ack_buf[0] = BL_ACK;
 8000f04:	23a5      	movs	r3, #165	@ 0xa5
 8000f06:	733b      	strb	r3, [r7, #12]
 	ack_buf[1] = follow_len;
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	737b      	strb	r3, [r7, #13]
 	HAL_UART_Transmit(C_UART,ack_buf,2,HAL_MAX_DELAY);
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <bootloader_send_ack+0x34>)
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	f107 010c 	add.w	r1, r7, #12
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
 8000f18:	2202      	movs	r2, #2
 8000f1a:	f002 fbb7 	bl	800368c <HAL_UART_Transmit>

 }
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000148 	.word	0x20000148

08000f2c <bootloader_send_nack>:

 /*This function sends NACK */
 void bootloader_send_nack(void)
 {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 	uint8_t nack = BL_NACK;
 8000f32:	237f      	movs	r3, #127	@ 0x7f
 8000f34:	71fb      	strb	r3, [r7, #7]
 	HAL_UART_Transmit(C_UART,&nack,1,HAL_MAX_DELAY);
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <bootloader_send_nack+0x24>)
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	1df9      	adds	r1, r7, #7
 8000f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f40:	2201      	movs	r2, #1
 8000f42:	f002 fba3 	bl	800368c <HAL_UART_Transmit>
 }
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000148 	.word	0x20000148

08000f54 <bootloader_verify_crc>:

 //This verifies the CRC of the given buffer in pData .
 uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
 {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
     uint32_t uwCRCValue=0xff;
 8000f60:	23ff      	movs	r3, #255	@ 0xff
 8000f62:	61fb      	str	r3, [r7, #28]

     for (uint32_t i=0 ; i < len ; i++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	61bb      	str	r3, [r7, #24]
 8000f68:	e00f      	b.n	8000f8a <bootloader_verify_crc+0x36>
 	{
         uint32_t i_data = pData[i];
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	4413      	add	r3, r2
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	617b      	str	r3, [r7, #20]
         uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480e      	ldr	r0, [pc, #56]	@ (8000fb8 <bootloader_verify_crc+0x64>)
 8000f7e:	f000 ff1a 	bl	8001db6 <HAL_CRC_Accumulate>
 8000f82:	61f8      	str	r0, [r7, #28]
     for (uint32_t i=0 ; i < len ; i++)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	3301      	adds	r3, #1
 8000f88:	61bb      	str	r3, [r7, #24]
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d3eb      	bcc.n	8000f6a <bootloader_verify_crc+0x16>
 	}

 	 /* Reset CRC Calculation Unit */
   __HAL_CRC_DR_RESET(&hcrc);
 8000f92:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <bootloader_verify_crc+0x64>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <bootloader_verify_crc+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f042 0201 	orr.w	r2, r2, #1
 8000fa0:	609a      	str	r2, [r3, #8]

 	if( uwCRCValue == crc_host)
 8000fa2:	69fa      	ldr	r2, [r7, #28]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d101      	bne.n	8000fae <bootloader_verify_crc+0x5a>
 	{
 		return VERIFY_CRC_SUCCESS;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e000      	b.n	8000fb0 <bootloader_verify_crc+0x5c>
 	}

 	return VERIFY_CRC_FAIL;
 8000fae:	2301      	movs	r3, #1
 }
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000014c 	.word	0x2000014c

08000fbc <bootloader_uart_write_data>:

 /* This function writes data in to C_UART */
 void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
 {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
     /*you can replace the below ST's USART driver API call with your MCUs driver API call */
 	HAL_UART_Transmit(C_UART,pBuffer,len,HAL_MAX_DELAY);
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <bootloader_uart_write_data+0x24>)
 8000fc8:	6818      	ldr	r0, [r3, #0]
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f002 fb5a 	bl	800368c <HAL_UART_Transmit>

 }
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000148 	.word	0x20000148

08000fe4 <get_bootloader_version>:


 //Just returns the macro value .
 uint8_t get_bootloader_version(void)
 {
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
   return (uint8_t)BL_VERSION;
 8000fe8:	2310      	movs	r3, #16
 }
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <get_mcu_chip_id>:

 //Read the chip identifier or device Identifier
 uint16_t get_mcu_chip_id(void)
 {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 	and the die revision. It is part of the DBG_MCU component and is mapped on the
 	external PPB bus (see Section 33.16 on page 1304). This code is accessible using the
 	JTAG debug pCat.2ort (4 to 5 pins) or the SW debug port (two pins) or by the user software.
 	It is even accessible while the MCU is under system reset. */
 	uint16_t cid;
 	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <get_mcu_chip_id+0x20>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001004:	80fb      	strh	r3, [r7, #6]
 	return  cid;
 8001006:	88fb      	ldrh	r3, [r7, #6]

 }
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e0042000 	.word	0xe0042000

08001018 <get_flash_rdp_level>:

 /*This function reads the RDP ( Read protection option byte) value
  *For more info refer "Table 9. Description of the option bytes" in stm32f446xx RM
  */
 uint8_t get_flash_rdp_level(void)
 {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0

 	uint8_t rdp_status=0;
 800101e:	2300      	movs	r3, #0
 8001020:	71fb      	strb	r3, [r7, #7]
 	FLASH_OBProgramInitTypeDef  ob_handle;
 	HAL_FLASHEx_OBGetConfig(&ob_handle);
 	rdp_status = (uint8_t)ob_handle.RDPLevel;
 #else

 	 volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFC000;
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <get_flash_rdp_level+0x24>)
 8001024:	603b      	str	r3, [r7, #0]
 	 rdp_status =  (uint8_t)(*pOB_addr >> 8) ;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	0a1b      	lsrs	r3, r3, #8
 800102c:	71fb      	strb	r3, [r7, #7]
 #endif

 	return rdp_status;
 800102e:	79fb      	ldrb	r3, [r7, #7]

 }
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	1fffc000 	.word	0x1fffc000

08001040 <verify_address>:

 //verify the address sent by the host .
 uint8_t verify_address(uint32_t go_address)
 {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 	//can we jump to backup sram memory ? yes
 	//can we jump to peripheral memory ? its possible , but dont allow. so no
 	//can we jump to external memory ? yes.

 //incomplete -poorly written .. optimize it
 	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800104e:	d305      	bcc.n	800105c <verify_address+0x1c>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a15      	ldr	r2, [pc, #84]	@ (80010a8 <verify_address+0x68>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d801      	bhi.n	800105c <verify_address+0x1c>
 	{
 		return ADDR_VALID;
 8001058:	2300      	movs	r3, #0
 800105a:	e01e      	b.n	800109a <verify_address+0x5a>
 	}
 	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <verify_address+0x68>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d305      	bcc.n	8001070 <verify_address+0x30>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a11      	ldr	r2, [pc, #68]	@ (80010ac <verify_address+0x6c>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d801      	bhi.n	8001070 <verify_address+0x30>
 	{
 		return ADDR_VALID;
 800106c:	2300      	movs	r3, #0
 800106e:	e014      	b.n	800109a <verify_address+0x5a>
 	}
 	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001076:	d305      	bcc.n	8001084 <verify_address+0x44>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a0d      	ldr	r2, [pc, #52]	@ (80010b0 <verify_address+0x70>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d801      	bhi.n	8001084 <verify_address+0x44>
 	{
 		return ADDR_VALID;
 8001080:	2300      	movs	r3, #0
 8001082:	e00a      	b.n	800109a <verify_address+0x5a>
 	}
 	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a0b      	ldr	r2, [pc, #44]	@ (80010b4 <verify_address+0x74>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d305      	bcc.n	8001098 <verify_address+0x58>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <verify_address+0x78>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d801      	bhi.n	8001098 <verify_address+0x58>
 	{
 		return ADDR_VALID;
 8001094:	2300      	movs	r3, #0
 8001096:	e000      	b.n	800109a <verify_address+0x5a>
 	}
 	else
 		return ADDR_INVALID;
 8001098:	2301      	movs	r3, #1
 }
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	2001c000 	.word	0x2001c000
 80010ac:	20020000 	.word	0x20020000
 80010b0:	0807ffff 	.word	0x0807ffff
 80010b4:	40024000 	.word	0x40024000
 80010b8:	40025000 	.word	0x40025000

080010bc <execute_flash_erase>:

  uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
 {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71bb      	strb	r3, [r7, #6]
 	FLASH_EraseInitTypeDef flashErase_handle;
 	uint32_t sectorError;
 	HAL_StatusTypeDef status;


 	if( number_of_sector > 8 )
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	2b08      	cmp	r3, #8
 80010d0:	d901      	bls.n	80010d6 <execute_flash_erase+0x1a>
 		return INVALID_SECTOR;
 80010d2:	2304      	movs	r3, #4
 80010d4:	e035      	b.n	8001142 <execute_flash_erase+0x86>

 	if( (sector_number == 0xff ) || (sector_number <= 7) )
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2bff      	cmp	r3, #255	@ 0xff
 80010da:	d002      	beq.n	80010e2 <execute_flash_erase+0x26>
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b07      	cmp	r3, #7
 80010e0:	d82e      	bhi.n	8001140 <execute_flash_erase+0x84>
 	{
 		if(sector_number == (uint8_t) 0xff)
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2bff      	cmp	r3, #255	@ 0xff
 80010e6:	d102      	bne.n	80010ee <execute_flash_erase+0x32>
 		{
 			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80010e8:	2301      	movs	r3, #1
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	e012      	b.n	8001114 <execute_flash_erase+0x58>
 		}else
 		{
 		    /*Here we are just calculating how many sectors needs to erased */
 			uint8_t remanining_sector = 8 - sector_number;
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f1c3 0308 	rsb	r3, r3, #8
 80010f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
             if( number_of_sector > remanining_sector)
 80010f8:	79ba      	ldrb	r2, [r7, #6]
 80010fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010fe:	429a      	cmp	r2, r3
 8001100:	d902      	bls.n	8001108 <execute_flash_erase+0x4c>
             {
             	number_of_sector = remanining_sector;
 8001102:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001106:	71bb      	strb	r3, [r7, #6]
             }
 			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
 			flashErase_handle.Sector = sector_number; // this is the initial sector
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	61bb      	str	r3, [r7, #24]
 			flashErase_handle.NbSectors = number_of_sector;
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	61fb      	str	r3, [r7, #28]
 		}
 		flashErase_handle.Banks = FLASH_BANK_1;
 8001114:	2301      	movs	r3, #1
 8001116:	617b      	str	r3, [r7, #20]

 		/*Get access to touch the flash registers */
 		HAL_FLASH_Unlock();
 8001118:	f000 feca 	bl	8001eb0 <HAL_FLASH_Unlock>
 		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 800111c:	2302      	movs	r3, #2
 800111e:	623b      	str	r3, [r7, #32]
 		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8001120:	f107 020c 	add.w	r2, r7, #12
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	4611      	mov	r1, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f001 f85e 	bl	80021ec <HAL_FLASHEx_Erase>
 8001130:	4603      	mov	r3, r0
 8001132:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 		HAL_FLASH_Lock();
 8001136:	f000 fedd 	bl	8001ef4 <HAL_FLASH_Lock>

 		return status;
 800113a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800113e:	e000      	b.n	8001142 <execute_flash_erase+0x86>
 	}


 	return INVALID_SECTOR;
 8001140:	2304      	movs	r3, #4
 }
 8001142:	4618      	mov	r0, r3
 8001144:	3728      	adds	r7, #40	@ 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <execute_mem_write>:

 /*This function writes the contents of pBuffer to  "mem_address" byte by byte */
 //Note1 : Currently this function supports writing to Flash only .
 //Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
 uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
 {
 800114a:	b5b0      	push	{r4, r5, r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
     uint8_t status=HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	75fb      	strb	r3, [r7, #23]

     //We have to unlock flash module to get control of registers
     HAL_FLASH_Unlock();
 800115a:	f000 fea9 	bl	8001eb0 <HAL_FLASH_Unlock>

     for(uint32_t i = 0 ; i <len ; i++)
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	e014      	b.n	800118e <execute_mem_write+0x44>
     {
         //Here we program the flash byte by byte
         status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 8001164:	68ba      	ldr	r2, [r7, #8]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	18d1      	adds	r1, r2, r3
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4413      	add	r3, r2
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2200      	movs	r2, #0
 8001176:	461c      	mov	r4, r3
 8001178:	4615      	mov	r5, r2
 800117a:	4622      	mov	r2, r4
 800117c:	462b      	mov	r3, r5
 800117e:	2000      	movs	r0, #0
 8001180:	f000 fe44 	bl	8001e0c <HAL_FLASH_Program>
 8001184:	4603      	mov	r3, r0
 8001186:	75fb      	strb	r3, [r7, #23]
     for(uint32_t i = 0 ; i <len ; i++)
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	3301      	adds	r3, #1
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	429a      	cmp	r2, r3
 8001194:	d3e6      	bcc.n	8001164 <execute_mem_write+0x1a>
     }

     HAL_FLASH_Lock();
 8001196:	f000 fead 	bl	8001ef4 <HAL_FLASH_Lock>

     return status;
 800119a:	7dfb      	ldrb	r3, [r7, #23]
 }
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdb0      	pop	{r4, r5, r7, pc}

080011a4 <configure_flash_sector_rw_protection>:
 2. Write the desired option value in the FLASH_OPTCR register.
 3. Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
 4. Wait for the BSY bit to be cleared.
 */
 uint8_t configure_flash_sector_rw_protection(uint8_t sector_details, uint8_t protection_mode, uint8_t disable)
 {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
 80011ae:	460b      	mov	r3, r1
 80011b0:	71bb      	strb	r3, [r7, #6]
 80011b2:	4613      	mov	r3, r2
 80011b4:	717b      	strb	r3, [r7, #5]
     //protection_mode =1 , means write protect of the user flash sectors
     //protection_mode =2, means read/write protect of the user flash sectors
     //According to RM of stm32f446xx TABLE 9, We have to modify the address 0x1FFF C008 bit 15(SPRMOD)

 	 //Flash option control register (OPTCR)
     volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 80011b6:	4b44      	ldr	r3, [pc, #272]	@ (80012c8 <configure_flash_sector_rw_protection+0x124>)
 80011b8:	60fb      	str	r3, [r7, #12]

 	  if(disable)
 80011ba:	797b      	ldrb	r3, [r7, #5]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d025      	beq.n	800120c <configure_flash_sector_rw_protection+0x68>
 		{

 			//disable all r/w protection on sectors

 			//Option byte configuration unlock
 			HAL_FLASH_OB_Unlock();
 80011c0:	f000 fea8 	bl	8001f14 <HAL_FLASH_OB_Unlock>

 			//wait till no active operation on flash
 			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80011c4:	bf00      	nop
 80011c6:	4b41      	ldr	r3, [pc, #260]	@ (80012cc <configure_flash_sector_rw_protection+0x128>)
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f9      	bne.n	80011c6 <configure_flash_sector_rw_protection+0x22>

 			//clear the 31st bit (default state)
 			//please refer : Flash option control register (FLASH_OPTCR) in RM
 			*pOPTCR &= ~(1 << 31);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	601a      	str	r2, [r3, #0]

 			//clear the protection : make all bits belonging to sectors as 1
 			*pOPTCR |= (0xFF << 16);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	601a      	str	r2, [r3, #0]

 			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
 			*pOPTCR |= ( 1 << 1);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f043 0202 	orr.w	r2, r3, #2
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	601a      	str	r2, [r3, #0]

 			//wait till no active operation on flash
 			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80011f6:	bf00      	nop
 80011f8:	4b34      	ldr	r3, [pc, #208]	@ (80012cc <configure_flash_sector_rw_protection+0x128>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f9      	bne.n	80011f8 <configure_flash_sector_rw_protection+0x54>

 			HAL_FLASH_OB_Lock();
 8001204:	f000 fea2 	bl	8001f4c <HAL_FLASH_OB_Lock>

 			return 0;
 8001208:	2300      	movs	r3, #0
 800120a:	e058      	b.n	80012be <configure_flash_sector_rw_protection+0x11a>

 		}

 	   if(protection_mode == (uint8_t) 1)
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d126      	bne.n	8001260 <configure_flash_sector_rw_protection+0xbc>
     {
            //we are putting write protection on the sectors encoded in sector_details argument

 			//Option byte configuration unlock
 			HAL_FLASH_OB_Unlock();
 8001212:	f000 fe7f 	bl	8001f14 <HAL_FLASH_OB_Unlock>

 			//wait till no active operation on flash
 			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001216:	bf00      	nop
 8001218:	4b2c      	ldr	r3, [pc, #176]	@ (80012cc <configure_flash_sector_rw_protection+0x128>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1f9      	bne.n	8001218 <configure_flash_sector_rw_protection+0x74>

 			//here we are setting just write protection for the sectors
 			//clear the 31st bit
 			//please refer : Flash option control register (FLASH_OPTCR) in RM
 			*pOPTCR &= ~(1 << 31);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	601a      	str	r2, [r3, #0]

 			//put write protection on sectors
 			*pOPTCR &= ~ (sector_details << 16);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	79fa      	ldrb	r2, [r7, #7]
 8001236:	0412      	lsls	r2, r2, #16
 8001238:	43d2      	mvns	r2, r2
 800123a:	401a      	ands	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	601a      	str	r2, [r3, #0]

 			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
 			*pOPTCR |= ( 1 << 1);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f043 0202 	orr.w	r2, r3, #2
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	601a      	str	r2, [r3, #0]

 			//wait till no active operation on flash
 			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 800124c:	bf00      	nop
 800124e:	4b1f      	ldr	r3, [pc, #124]	@ (80012cc <configure_flash_sector_rw_protection+0x128>)
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f9      	bne.n	800124e <configure_flash_sector_rw_protection+0xaa>

 			HAL_FLASH_OB_Lock();
 800125a:	f000 fe77 	bl	8001f4c <HAL_FLASH_OB_Lock>
 800125e:	e02d      	b.n	80012bc <configure_flash_sector_rw_protection+0x118>
 		}

 		else if (protection_mode == (uint8_t) 2)
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d12a      	bne.n	80012bc <configure_flash_sector_rw_protection+0x118>
     {
 	  	//Option byte configuration unlock
 			HAL_FLASH_OB_Unlock();
 8001266:	f000 fe55 	bl	8001f14 <HAL_FLASH_OB_Unlock>

 			//wait till no active operation on flash
 			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 800126a:	bf00      	nop
 800126c:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <configure_flash_sector_rw_protection+0x128>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f9      	bne.n	800126c <configure_flash_sector_rw_protection+0xc8>

 			//here wer are setting read and write protection for the sectors
 			//set the 31st bit
 			//please refer : Flash option control register (FLASH_OPTCR) in RM
 			*pOPTCR |= (1 << 31);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	601a      	str	r2, [r3, #0]

 			//put read and write protection on sectors
             *pOPTCR &= ~(0xff << 16);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	601a      	str	r2, [r3, #0]
 			*pOPTCR |= (sector_details << 16);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	041b      	lsls	r3, r3, #16
 8001298:	431a      	orrs	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	601a      	str	r2, [r3, #0]

 			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
 			*pOPTCR |= ( 1 << 1);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f043 0202 	orr.w	r2, r3, #2
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	601a      	str	r2, [r3, #0]

 			//wait till no active operation on flash
 			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80012aa:	bf00      	nop
 80012ac:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <configure_flash_sector_rw_protection+0x128>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1f9      	bne.n	80012ac <configure_flash_sector_rw_protection+0x108>

 			HAL_FLASH_OB_Lock();
 80012b8:	f000 fe48 	bl	8001f4c <HAL_FLASH_OB_Lock>
     }

 		return 0;
 80012bc:	2300      	movs	r3, #0
 }
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023c14 	.word	0x40023c14
 80012cc:	40023c00 	.word	0x40023c00

080012d0 <read_OB_rw_protection_status>:

 uint16_t read_OB_rw_protection_status(void)
 {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
     //This structure is given by ST Flash driver to hold the OB(Option Byte) contents .
 	FLASH_OBProgramInitTypeDef OBInit;

 	//First unlock the OB(Option Byte) memory access
 	HAL_FLASH_OB_Unlock();
 80012d6:	f000 fe1d 	bl	8001f14 <HAL_FLASH_OB_Unlock>
 	//get the OB configuration details
 	HAL_FLASHEx_OBGetConfig(&OBInit);
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fff3 	bl	80022c8 <HAL_FLASHEx_OBGetConfig>
 	//Lock back .
 	HAL_FLASH_Lock();
 80012e2:	f000 fe07 	bl	8001ef4 <HAL_FLASH_Lock>

 	//We are just interested in r/w protection status of the sectors.
 	return (uint16_t)OBInit.WRPSector;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	b29b      	uxth	r3, r3

 }
 80012ea:	4618      	mov	r0, r3
 80012ec:	3720      	adds	r7, #32
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <bootloader_main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void bootloader_main(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80012fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012fe:	4819      	ldr	r0, [pc, #100]	@ (8001364 <bootloader_main+0x70>)
 8001300:	f001 fa98 	bl	8002834 <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d108      	bne.n	800131c <bootloader_main+0x28>
	{
		C_UART = &huart5;
 800130a:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <bootloader_main+0x74>)
 800130c:	4a17      	ldr	r2, [pc, #92]	@ (800136c <bootloader_main+0x78>)
 800130e:	601a      	str	r2, [r3, #0]
		printmsg("button pressed...entering the bootloader mode\n");
 8001310:	4817      	ldr	r0, [pc, #92]	@ (8001370 <bootloader_main+0x7c>)
 8001312:	f7ff fa5d 	bl	80007d0 <printmsg>
		bootloader_uart_read_data();
 8001316:	f7ff f97f 	bl	8000618 <bootloader_uart_read_data>
		{
			printmsg("No valid BOOT_CMD received...jumping to application\n\r");
			bootloader_jump_to_user_app();
		}
	}
}
 800131a:	e01e      	b.n	800135a <bootloader_main+0x66>
		uint8_t rx_byte = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	71bb      	strb	r3, [r7, #6]
		status = HAL_UART_Receive(&huart3, &rx_byte, 1, UART_TIMEOUT_MS);
 8001320:	1db9      	adds	r1, r7, #6
 8001322:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001326:	2201      	movs	r2, #1
 8001328:	4812      	ldr	r0, [pc, #72]	@ (8001374 <bootloader_main+0x80>)
 800132a:	f002 fa3a 	bl	80037a2 <HAL_UART_Receive>
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
		if (status == HAL_OK && rx_byte == BOOT_CMD)
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10b      	bne.n	8001350 <bootloader_main+0x5c>
 8001338:	79bb      	ldrb	r3, [r7, #6]
 800133a:	2b50      	cmp	r3, #80	@ 0x50
 800133c:	d108      	bne.n	8001350 <bootloader_main+0x5c>
			C_UART = &huart3;
 800133e:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <bootloader_main+0x74>)
 8001340:	4a0c      	ldr	r2, [pc, #48]	@ (8001374 <bootloader_main+0x80>)
 8001342:	601a      	str	r2, [r3, #0]
			printmsg("BOOT_CMD (0x50) received...entering bootloader mode\n\r");
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <bootloader_main+0x84>)
 8001346:	f7ff fa43 	bl	80007d0 <printmsg>
			bootloader_uart_read_data();
 800134a:	f7ff f965 	bl	8000618 <bootloader_uart_read_data>
}
 800134e:	e004      	b.n	800135a <bootloader_main+0x66>
			printmsg("No valid BOOT_CMD received...jumping to application\n\r");
 8001350:	480a      	ldr	r0, [pc, #40]	@ (800137c <bootloader_main+0x88>)
 8001352:	f7ff fa3d 	bl	80007d0 <printmsg>
			bootloader_jump_to_user_app();
 8001356:	f7ff f9db 	bl	8000710 <bootloader_jump_to_user_app>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40020800 	.word	0x40020800
 8001368:	20000148 	.word	0x20000148
 800136c:	20000154 	.word	0x20000154
 8001370:	08004cf0 	.word	0x08004cf0
 8001374:	200001e4 	.word	0x200001e4
 8001378:	08004d20 	.word	0x08004d20
 800137c:	08004d58 	.word	0x08004d58

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001384:	f000 fb6e 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001388:	f000 f814 	bl	80013b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138c:	f000 f916 	bl	80015bc <MX_GPIO_Init>
  MX_CRC_Init();
 8001390:	f000 f882 	bl	8001498 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8001394:	f000 f8be 	bl	8001514 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001398:	f000 f8e6 	bl	8001568 <MX_USART3_UART_Init>
  MX_UART5_Init();
 800139c:	f000 f890 	bl	80014c0 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  printmsg("bootloader running....\n");
 80013a0:	4803      	ldr	r0, [pc, #12]	@ (80013b0 <main+0x30>)
 80013a2:	f7ff fa15 	bl	80007d0 <printmsg>
  bootloader_main();
 80013a6:	f7ff ffa5 	bl	80012f4 <bootloader_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013aa:	bf00      	nop
 80013ac:	e7fd      	b.n	80013aa <main+0x2a>
 80013ae:	bf00      	nop
 80013b0:	08004d90 	.word	0x08004d90

080013b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b094      	sub	sp, #80	@ 0x50
 80013b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	2234      	movs	r2, #52	@ 0x34
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f002 fdd4 	bl	8003f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d8:	2300      	movs	r3, #0
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001490 <SystemClock_Config+0xdc>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001490 <SystemClock_Config+0xdc>)
 80013e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e8:	4b29      	ldr	r3, [pc, #164]	@ (8001490 <SystemClock_Config+0xdc>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f4:	2300      	movs	r3, #0
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	4b26      	ldr	r3, [pc, #152]	@ (8001494 <SystemClock_Config+0xe0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a25      	ldr	r2, [pc, #148]	@ (8001494 <SystemClock_Config+0xe0>)
 80013fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <SystemClock_Config+0xe0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001410:	2302      	movs	r3, #2
 8001412:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001414:	2301      	movs	r3, #1
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001418:	2310      	movs	r3, #16
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141c:	2302      	movs	r3, #2
 800141e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001420:	2300      	movs	r3, #0
 8001422:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001424:	2308      	movs	r3, #8
 8001426:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001428:	23b4      	movs	r3, #180	@ 0xb4
 800142a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800142c:	2302      	movs	r3, #2
 800142e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001430:	2302      	movs	r3, #2
 8001432:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001434:	2302      	movs	r3, #2
 8001436:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4618      	mov	r0, r3
 800143e:	f001 fe37 	bl	80030b0 <HAL_RCC_OscConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001448:	f000 f926 	bl	8001698 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800144c:	f001 fa24 	bl	8002898 <HAL_PWREx_EnableOverDrive>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001456:	f000 f91f 	bl	8001698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145a:	230f      	movs	r3, #15
 800145c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145e:	2302      	movs	r3, #2
 8001460:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001466:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800146a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800146c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001470:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001472:	f107 0308 	add.w	r3, r7, #8
 8001476:	2105      	movs	r1, #5
 8001478:	4618      	mov	r0, r3
 800147a:	f001 fa5d 	bl	8002938 <HAL_RCC_ClockConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001484:	f000 f908 	bl	8001698 <Error_Handler>
  }
}
 8001488:	bf00      	nop
 800148a:	3750      	adds	r7, #80	@ 0x50
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	40007000 	.word	0x40007000

08001498 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <MX_CRC_Init+0x20>)
 800149e:	4a07      	ldr	r2, [pc, #28]	@ (80014bc <MX_CRC_Init+0x24>)
 80014a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <MX_CRC_Init+0x20>)
 80014a4:	f000 fc6b 	bl	8001d7e <HAL_CRC_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80014ae:	f000 f8f3 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000014c 	.word	0x2000014c
 80014bc:	40023000 	.word	0x40023000

080014c0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80014c4:	4b11      	ldr	r3, [pc, #68]	@ (800150c <MX_UART5_Init+0x4c>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	@ (8001510 <MX_UART5_Init+0x50>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <MX_UART5_Init+0x4c>)
 80014cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014d0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <MX_UART5_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <MX_UART5_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80014de:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <MX_UART5_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b09      	ldr	r3, [pc, #36]	@ (800150c <MX_UART5_Init+0x4c>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	@ (800150c <MX_UART5_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <MX_UART5_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	@ (800150c <MX_UART5_Init+0x4c>)
 80014f8:	f002 f878 	bl	80035ec <HAL_UART_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001502:	f000 f8c9 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000154 	.word	0x20000154
 8001510:	40005000 	.word	0x40005000

08001514 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 800151a:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <MX_USART2_UART_Init+0x50>)
 800151c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 8001520:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001524:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001532:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800154a:	4805      	ldr	r0, [pc, #20]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 800154c:	f002 f84e 	bl	80035ec <HAL_UART_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001556:	f000 f89f 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2000019c 	.word	0x2000019c
 8001564:	40004400 	.word	0x40004400

08001568 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800156c:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <MX_USART3_UART_Init+0x4c>)
 800156e:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <MX_USART3_UART_Init+0x50>)
 8001570:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <MX_USART3_UART_Init+0x4c>)
 8001574:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001578:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <MX_USART3_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <MX_USART3_UART_Init+0x4c>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <MX_USART3_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <MX_USART3_UART_Init+0x4c>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <MX_USART3_UART_Init+0x4c>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <MX_USART3_UART_Init+0x4c>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	@ (80015b4 <MX_USART3_UART_Init+0x4c>)
 80015a0:	f002 f824 	bl	80035ec <HAL_UART_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015aa:	f000 f875 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200001e4 	.word	0x200001e4
 80015b8:	40004800 	.word	0x40004800

080015bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	@ 0x28
 80015c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <MX_GPIO_Init+0xd0>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a2c      	ldr	r2, [pc, #176]	@ (800168c <MX_GPIO_Init+0xd0>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b2a      	ldr	r3, [pc, #168]	@ (800168c <MX_GPIO_Init+0xd0>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b26      	ldr	r3, [pc, #152]	@ (800168c <MX_GPIO_Init+0xd0>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a25      	ldr	r2, [pc, #148]	@ (800168c <MX_GPIO_Init+0xd0>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b23      	ldr	r3, [pc, #140]	@ (800168c <MX_GPIO_Init+0xd0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <MX_GPIO_Init+0xd0>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a1e      	ldr	r2, [pc, #120]	@ (800168c <MX_GPIO_Init+0xd0>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <MX_GPIO_Init+0xd0>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4b18      	ldr	r3, [pc, #96]	@ (800168c <MX_GPIO_Init+0xd0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a17      	ldr	r2, [pc, #92]	@ (800168c <MX_GPIO_Init+0xd0>)
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <MX_GPIO_Init+0xd0>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	2120      	movs	r1, #32
 8001646:	4812      	ldr	r0, [pc, #72]	@ (8001690 <MX_GPIO_Init+0xd4>)
 8001648:	f001 f90c 	bl	8002864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800164c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	480c      	ldr	r0, [pc, #48]	@ (8001694 <MX_GPIO_Init+0xd8>)
 8001662:	f000 ff53 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001666:	2320      	movs	r3, #32
 8001668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166a:	2301      	movs	r3, #1
 800166c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	4804      	ldr	r0, [pc, #16]	@ (8001690 <MX_GPIO_Init+0xd4>)
 800167e:	f000 ff45 	bl	800250c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	@ 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020800 	.word	0x40020800

08001698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800169c:	b672      	cpsid	i
}
 800169e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <Error_Handler+0x8>

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <HAL_MspInit+0x4c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b2:	4a0f      	ldr	r2, [pc, #60]	@ (80016f0 <HAL_MspInit+0x4c>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ba:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <HAL_MspInit+0x4c>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	603b      	str	r3, [r7, #0]
 80016ca:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <HAL_MspInit+0x4c>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	4a08      	ldr	r2, [pc, #32]	@ (80016f0 <HAL_MspInit+0x4c>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d6:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_MspInit+0x4c>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800

080016f4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0b      	ldr	r2, [pc, #44]	@ (8001730 <HAL_CRC_MspInit+0x3c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d10d      	bne.n	8001722 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_CRC_MspInit+0x40>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	4a09      	ldr	r2, [pc, #36]	@ (8001734 <HAL_CRC_MspInit+0x40>)
 8001710:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001714:	6313      	str	r3, [r2, #48]	@ 0x30
 8001716:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <HAL_CRC_MspInit+0x40>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023000 	.word	0x40023000
 8001734:	40023800 	.word	0x40023800

08001738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b090      	sub	sp, #64	@ 0x40
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a6a      	ldr	r2, [pc, #424]	@ (8001900 <HAL_UART_MspInit+0x1c8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d14b      	bne.n	80017f2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800175e:	4b69      	ldr	r3, [pc, #420]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	4a68      	ldr	r2, [pc, #416]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 8001764:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001768:	6413      	str	r3, [r2, #64]	@ 0x40
 800176a:	4b66      	ldr	r3, [pc, #408]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001772:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001774:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
 800177a:	4b62      	ldr	r3, [pc, #392]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a61      	ldr	r2, [pc, #388]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b5f      	ldr	r3, [pc, #380]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
 8001796:	4b5b      	ldr	r3, [pc, #364]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a5a      	ldr	r2, [pc, #360]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 800179c:	f043 0308 	orr.w	r3, r3, #8
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b58      	ldr	r3, [pc, #352]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	623b      	str	r3, [r7, #32]
 80017ac:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80017c0:	2308      	movs	r3, #8
 80017c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017c8:	4619      	mov	r1, r3
 80017ca:	484f      	ldr	r0, [pc, #316]	@ (8001908 <HAL_UART_MspInit+0x1d0>)
 80017cc:	f000 fe9e 	bl	800250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017d0:	2304      	movs	r3, #4
 80017d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	2303      	movs	r3, #3
 80017de:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80017e0:	2308      	movs	r3, #8
 80017e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017e8:	4619      	mov	r1, r3
 80017ea:	4848      	ldr	r0, [pc, #288]	@ (800190c <HAL_UART_MspInit+0x1d4>)
 80017ec:	f000 fe8e 	bl	800250c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017f0:	e081      	b.n	80018f6 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART2)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a46      	ldr	r2, [pc, #280]	@ (8001910 <HAL_UART_MspInit+0x1d8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d12c      	bne.n	8001856 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
 8001800:	4b40      	ldr	r3, [pc, #256]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	4a3f      	ldr	r2, [pc, #252]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 8001806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800180a:	6413      	str	r3, [r2, #64]	@ 0x40
 800180c:	4b3d      	ldr	r3, [pc, #244]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	61bb      	str	r3, [r7, #24]
 800181c:	4b39      	ldr	r3, [pc, #228]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001820:	4a38      	ldr	r2, [pc, #224]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6313      	str	r3, [r2, #48]	@ 0x30
 8001828:	4b36      	ldr	r3, [pc, #216]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	61bb      	str	r3, [r7, #24]
 8001832:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001834:	230c      	movs	r3, #12
 8001836:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001844:	2307      	movs	r3, #7
 8001846:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800184c:	4619      	mov	r1, r3
 800184e:	4831      	ldr	r0, [pc, #196]	@ (8001914 <HAL_UART_MspInit+0x1dc>)
 8001850:	f000 fe5c 	bl	800250c <HAL_GPIO_Init>
}
 8001854:	e04f      	b.n	80018f6 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART3)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a2f      	ldr	r2, [pc, #188]	@ (8001918 <HAL_UART_MspInit+0x1e0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d14a      	bne.n	80018f6 <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	4a26      	ldr	r2, [pc, #152]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 800186a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800186e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001870:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001874:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001884:	4a1f      	ldr	r2, [pc, #124]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 8001886:	f043 0304 	orr.w	r3, r3, #4
 800188a:	6313      	str	r3, [r2, #48]	@ 0x30
 800188c:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a0:	4a18      	ldr	r2, [pc, #96]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a8:	4b16      	ldr	r3, [pc, #88]	@ (8001904 <HAL_UART_MspInit+0x1cc>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018b4:	2320      	movs	r3, #32
 80018b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018c4:	2307      	movs	r3, #7
 80018c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018cc:	4619      	mov	r1, r3
 80018ce:	480e      	ldr	r0, [pc, #56]	@ (8001908 <HAL_UART_MspInit+0x1d0>)
 80018d0:	f000 fe1c 	bl	800250c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018e6:	2307      	movs	r3, #7
 80018e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018ee:	4619      	mov	r1, r3
 80018f0:	480a      	ldr	r0, [pc, #40]	@ (800191c <HAL_UART_MspInit+0x1e4>)
 80018f2:	f000 fe0b 	bl	800250c <HAL_GPIO_Init>
}
 80018f6:	bf00      	nop
 80018f8:	3740      	adds	r7, #64	@ 0x40
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40005000 	.word	0x40005000
 8001904:	40023800 	.word	0x40023800
 8001908:	40020800 	.word	0x40020800
 800190c:	40020c00 	.word	0x40020c00
 8001910:	40004400 	.word	0x40004400
 8001914:	40020000 	.word	0x40020000
 8001918:	40004800 	.word	0x40004800
 800191c:	40020400 	.word	0x40020400

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <NMI_Handler+0x4>

08001928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <MemManage_Handler+0x4>

08001938 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <BusFault_Handler+0x4>

08001940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <UsageFault_Handler+0x4>

08001948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001976:	f000 f8fd 	bl	8001b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001988:	4a14      	ldr	r2, [pc, #80]	@ (80019dc <_sbrk+0x5c>)
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <_sbrk+0x60>)
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001994:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800199c:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <_sbrk+0x64>)
 800199e:	4a12      	ldr	r2, [pc, #72]	@ (80019e8 <_sbrk+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a2:	4b10      	ldr	r3, [pc, #64]	@ (80019e4 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d207      	bcs.n	80019c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b0:	f002 fae6 	bl	8003f80 <__errno>
 80019b4:	4603      	mov	r3, r0
 80019b6:	220c      	movs	r2, #12
 80019b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	e009      	b.n	80019d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c0:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c6:	4b07      	ldr	r3, [pc, #28]	@ (80019e4 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a05      	ldr	r2, [pc, #20]	@ (80019e4 <_sbrk+0x64>)
 80019d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20020000 	.word	0x20020000
 80019e0:	00000400 	.word	0x00000400
 80019e4:	2000022c 	.word	0x2000022c
 80019e8:	200003a0 	.word	0x200003a0

080019ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <SystemInit+0x20>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019f6:	4a05      	ldr	r2, [pc, #20]	@ (8001a0c <SystemInit+0x20>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a14:	f7ff ffea 	bl	80019ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a18:	480c      	ldr	r0, [pc, #48]	@ (8001a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a1a:	490d      	ldr	r1, [pc, #52]	@ (8001a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a20:	e002      	b.n	8001a28 <LoopCopyDataInit>

08001a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a26:	3304      	adds	r3, #4

08001a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a2c:	d3f9      	bcc.n	8001a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a30:	4c0a      	ldr	r4, [pc, #40]	@ (8001a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a34:	e001      	b.n	8001a3a <LoopFillZerobss>

08001a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a38:	3204      	adds	r2, #4

08001a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a3c:	d3fb      	bcc.n	8001a36 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f002 faa5 	bl	8003f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a42:	f7ff fc9d 	bl	8001380 <main>
  bx  lr    
 8001a46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a50:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001a54:	08004e04 	.word	0x08004e04
  ldr r2, =_sbss
 8001a58:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001a5c:	2000039c 	.word	0x2000039c

08001a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a60:	e7fe      	b.n	8001a60 <ADC_IRQHandler>
	...

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a68:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa4 <HAL_Init+0x40>)
 8001a6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <HAL_Init+0x40>)
 8001a7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a07      	ldr	r2, [pc, #28]	@ (8001aa4 <HAL_Init+0x40>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f943 	bl	8001d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a92:	200f      	movs	r0, #15
 8001a94:	f000 f83e 	bl	8001b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f7ff fe04 	bl	80016a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023c00 	.word	0x40023c00

08001aa8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001aac:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_DeInit+0x4c>)
 8001aae:	4a12      	ldr	r2, [pc, #72]	@ (8001af8 <HAL_DeInit+0x50>)
 8001ab0:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001ab2:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <HAL_DeInit+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <HAL_DeInit+0x4c>)
 8001aba:	4a10      	ldr	r2, [pc, #64]	@ (8001afc <HAL_DeInit+0x54>)
 8001abc:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001abe:	4b0d      	ldr	r3, [pc, #52]	@ (8001af4 <HAL_DeInit+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <HAL_DeInit+0x4c>)
 8001ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b00 <HAL_DeInit+0x58>)
 8001ac8:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001aca:	4b0a      	ldr	r3, [pc, #40]	@ (8001af4 <HAL_DeInit+0x4c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001ad0:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <HAL_DeInit+0x4c>)
 8001ad2:	2281      	movs	r2, #129	@ 0x81
 8001ad4:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001ad6:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <HAL_DeInit+0x4c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001adc:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_DeInit+0x4c>)
 8001ade:	2203      	movs	r2, #3
 8001ae0:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001ae2:	4b04      	ldr	r3, [pc, #16]	@ (8001af4 <HAL_DeInit+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001ae8:	f000 f80c 	bl	8001b04 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	3fffc9ff 	.word	0x3fffc9ff
 8001afc:	00c77933 	.word	0x00c77933
 8001b00:	206010ff 	.word	0x206010ff

08001b04 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b1c:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <HAL_InitTick+0x54>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <HAL_InitTick+0x58>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f917 	bl	8001d66 <HAL_SYSTICK_Config>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00e      	b.n	8001b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b0f      	cmp	r3, #15
 8001b46:	d80a      	bhi.n	8001b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f000 f8ed 	bl	8001d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b54:	4a06      	ldr	r2, [pc, #24]	@ (8001b70 <HAL_InitTick+0x5c>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e000      	b.n	8001b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	20000010 	.word	0x20000010
 8001b70:	2000000c 	.word	0x2000000c

08001b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <HAL_IncTick+0x20>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_IncTick+0x24>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	4a04      	ldr	r2, [pc, #16]	@ (8001b98 <HAL_IncTick+0x24>)
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000010 	.word	0x20000010
 8001b98:	20000230 	.word	0x20000230

08001b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba0:	4b03      	ldr	r3, [pc, #12]	@ (8001bb0 <HAL_GetTick+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20000230 	.word	0x20000230

08001bb4 <__NVIC_SetPriorityGrouping>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be6:	4a04      	ldr	r2, [pc, #16]	@ (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	60d3      	str	r3, [r2, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_GetPriorityGrouping>:
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c00:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <__NVIC_GetPriorityGrouping+0x18>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	f003 0307 	and.w	r3, r3, #7
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_SetPriority>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db0a      	blt.n	8001c42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	490c      	ldr	r1, [pc, #48]	@ (8001c64 <__NVIC_SetPriority+0x4c>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001c40:	e00a      	b.n	8001c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4908      	ldr	r1, [pc, #32]	@ (8001c68 <__NVIC_SetPriority+0x50>)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	440b      	add	r3, r1
 8001c56:	761a      	strb	r2, [r3, #24]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <NVIC_EncodePriority>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	@ 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f1c3 0307 	rsb	r3, r3, #7
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	bf28      	it	cs
 8001c8a:	2304      	movcs	r3, #4
 8001c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3304      	adds	r3, #4
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d902      	bls.n	8001c9c <NVIC_EncodePriority+0x30>
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3b03      	subs	r3, #3
 8001c9a:	e000      	b.n	8001c9e <NVIC_EncodePriority+0x32>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	401a      	ands	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	4313      	orrs	r3, r2
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	@ 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ce4:	d301      	bcc.n	8001cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00f      	b.n	8001d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cea:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <SysTick_Config+0x40>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf2:	210f      	movs	r1, #15
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	f7ff ff8e 	bl	8001c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cfc:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <SysTick_Config+0x40>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d02:	4b04      	ldr	r3, [pc, #16]	@ (8001d14 <SysTick_Config+0x40>)
 8001d04:	2207      	movs	r2, #7
 8001d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	e000e010 	.word	0xe000e010

08001d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff47 	bl	8001bb4 <__NVIC_SetPriorityGrouping>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d40:	f7ff ff5c 	bl	8001bfc <__NVIC_GetPriorityGrouping>
 8001d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	6978      	ldr	r0, [r7, #20]
 8001d4c:	f7ff ff8e 	bl	8001c6c <NVIC_EncodePriority>
 8001d50:	4602      	mov	r2, r0
 8001d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff5d 	bl	8001c18 <__NVIC_SetPriority>
}
 8001d5e:	bf00      	nop
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff ffb0 	bl	8001cd4 <SysTick_Config>
 8001d74:	4603      	mov	r3, r0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e00e      	b.n	8001dae <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	795b      	ldrb	r3, [r3, #5]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d105      	bne.n	8001da6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff fca7 	bl	80016f4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b087      	sub	sp, #28
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	e00a      	b.n	8001de8 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	441a      	add	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3301      	adds	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d3f0      	bcc.n	8001dd2 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001dfe:	693b      	ldr	r3, [r7, #16]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	371c      	adds	r7, #28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ea8 <HAL_FLASH_Program+0x9c>)
 8001e1c:	7e1b      	ldrb	r3, [r3, #24]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_FLASH_Program+0x1a>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e03b      	b.n	8001e9e <HAL_FLASH_Program+0x92>
 8001e26:	4b20      	ldr	r3, [pc, #128]	@ (8001ea8 <HAL_FLASH_Program+0x9c>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e2c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001e30:	f000 f89c 	bl	8001f6c <FLASH_WaitForLastOperation>
 8001e34:	4603      	mov	r3, r0
 8001e36:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d12b      	bne.n	8001e96 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d105      	bne.n	8001e50 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001e44:	783b      	ldrb	r3, [r7, #0]
 8001e46:	4619      	mov	r1, r3
 8001e48:	68b8      	ldr	r0, [r7, #8]
 8001e4a:	f000 f947 	bl	80020dc <FLASH_Program_Byte>
 8001e4e:	e016      	b.n	8001e7e <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d105      	bne.n	8001e62 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001e56:	883b      	ldrh	r3, [r7, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	68b8      	ldr	r0, [r7, #8]
 8001e5c:	f000 f91a 	bl	8002094 <FLASH_Program_HalfWord>
 8001e60:	e00d      	b.n	8001e7e <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d105      	bne.n	8001e74 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	68b8      	ldr	r0, [r7, #8]
 8001e6e:	f000 f8ef 	bl	8002050 <FLASH_Program_Word>
 8001e72:	e004      	b.n	8001e7e <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e78:	68b8      	ldr	r0, [r7, #8]
 8001e7a:	f000 f8b7 	bl	8001fec <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e7e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001e82:	f000 f873 	bl	8001f6c <FLASH_WaitForLastOperation>
 8001e86:	4603      	mov	r3, r0
 8001e88:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001e8a:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <HAL_FLASH_Program+0xa0>)
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	4a07      	ldr	r2, [pc, #28]	@ (8001eac <HAL_FLASH_Program+0xa0>)
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e96:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <HAL_FLASH_Program+0x9c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	761a      	strb	r2, [r3, #24]

  return status;
 8001e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000234 	.word	0x20000234
 8001eac:	40023c00 	.word	0x40023c00

08001eb0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001eba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <HAL_FLASH_Unlock+0x38>)
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	da0b      	bge.n	8001eda <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ec2:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <HAL_FLASH_Unlock+0x38>)
 8001ec4:	4a09      	ldr	r2, [pc, #36]	@ (8001eec <HAL_FLASH_Unlock+0x3c>)
 8001ec6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ec8:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <HAL_FLASH_Unlock+0x38>)
 8001eca:	4a09      	ldr	r2, [pc, #36]	@ (8001ef0 <HAL_FLASH_Unlock+0x40>)
 8001ecc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ece:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_FLASH_Unlock+0x38>)
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	da01      	bge.n	8001eda <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001eda:	79fb      	ldrb	r3, [r7, #7]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	40023c00 	.word	0x40023c00
 8001eec:	45670123 	.word	0x45670123
 8001ef0:	cdef89ab 	.word	0xcdef89ab

08001ef4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <HAL_FLASH_Lock+0x1c>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4a04      	ldr	r2, [pc, #16]	@ (8001f10 <HAL_FLASH_Lock+0x1c>)
 8001efe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f02:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001f18:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <HAL_FLASH_OB_Unlock+0x2c>)
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d007      	beq.n	8001f34 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001f24:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_FLASH_OB_Unlock+0x2c>)
 8001f26:	4a07      	ldr	r2, [pc, #28]	@ (8001f44 <HAL_FLASH_OB_Unlock+0x30>)
 8001f28:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001f2a:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <HAL_FLASH_OB_Unlock+0x2c>)
 8001f2c:	4a06      	ldr	r2, [pc, #24]	@ (8001f48 <HAL_FLASH_OB_Unlock+0x34>)
 8001f2e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	e000      	b.n	8001f36 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	40023c00 	.word	0x40023c00
 8001f44:	08192a3b 	.word	0x08192a3b
 8001f48:	4c5d6e7f 	.word	0x4c5d6e7f

08001f4c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001f50:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <HAL_FLASH_OB_Lock+0x1c>)
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	4a04      	ldr	r2, [pc, #16]	@ (8001f68 <HAL_FLASH_OB_Lock+0x1c>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40023c00 	.word	0x40023c00

08001f6c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f78:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <FLASH_WaitForLastOperation+0x78>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f7e:	f7ff fe0d 	bl	8001b9c <HAL_GetTick>
 8001f82:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001f84:	e010      	b.n	8001fa8 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8c:	d00c      	beq.n	8001fa8 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <FLASH_WaitForLastOperation+0x38>
 8001f94:	f7ff fe02 	bl	8001b9c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d201      	bcs.n	8001fa8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e019      	b.n	8001fdc <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <FLASH_WaitForLastOperation+0x7c>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1e8      	bne.n	8001f86 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <FLASH_WaitForLastOperation+0x7c>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001fc0:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <FLASH_WaitForLastOperation+0x7c>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001fc6:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <FLASH_WaitForLastOperation+0x7c>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001fd2:	f000 f8a5 	bl	8002120 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0

}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000234 	.word	0x20000234
 8001fe8:	40023c00 	.word	0x40023c00

08001fec <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ff8:	4b14      	ldr	r3, [pc, #80]	@ (800204c <FLASH_Program_DoubleWord+0x60>)
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	4a13      	ldr	r2, [pc, #76]	@ (800204c <FLASH_Program_DoubleWord+0x60>)
 8001ffe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002002:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002004:	4b11      	ldr	r3, [pc, #68]	@ (800204c <FLASH_Program_DoubleWord+0x60>)
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	4a10      	ldr	r2, [pc, #64]	@ (800204c <FLASH_Program_DoubleWord+0x60>)
 800200a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800200e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002010:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <FLASH_Program_DoubleWord+0x60>)
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <FLASH_Program_DoubleWord+0x60>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002022:	f3bf 8f6f 	isb	sy
}
 8002026:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002028:	e9d7 0100 	ldrd	r0, r1, [r7]
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	000a      	movs	r2, r1
 8002036:	2300      	movs	r3, #0
 8002038:	68f9      	ldr	r1, [r7, #12]
 800203a:	3104      	adds	r1, #4
 800203c:	4613      	mov	r3, r2
 800203e:	600b      	str	r3, [r1, #0]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40023c00 	.word	0x40023c00

08002050 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800205a:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <FLASH_Program_Word+0x40>)
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	4a0c      	ldr	r2, [pc, #48]	@ (8002090 <FLASH_Program_Word+0x40>)
 8002060:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002064:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002066:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <FLASH_Program_Word+0x40>)
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	4a09      	ldr	r2, [pc, #36]	@ (8002090 <FLASH_Program_Word+0x40>)
 800206c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002070:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002072:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <FLASH_Program_Word+0x40>)
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	4a06      	ldr	r2, [pc, #24]	@ (8002090 <FLASH_Program_Word+0x40>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	601a      	str	r2, [r3, #0]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	40023c00 	.word	0x40023c00

08002094 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020a0:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <FLASH_Program_HalfWord+0x44>)
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	4a0c      	ldr	r2, [pc, #48]	@ (80020d8 <FLASH_Program_HalfWord+0x44>)
 80020a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80020ac:	4b0a      	ldr	r3, [pc, #40]	@ (80020d8 <FLASH_Program_HalfWord+0x44>)
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	4a09      	ldr	r2, [pc, #36]	@ (80020d8 <FLASH_Program_HalfWord+0x44>)
 80020b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80020b8:	4b07      	ldr	r3, [pc, #28]	@ (80020d8 <FLASH_Program_HalfWord+0x44>)
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	4a06      	ldr	r2, [pc, #24]	@ (80020d8 <FLASH_Program_HalfWord+0x44>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	887a      	ldrh	r2, [r7, #2]
 80020c8:	801a      	strh	r2, [r3, #0]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023c00 	.word	0x40023c00

080020dc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020e8:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <FLASH_Program_Byte+0x40>)
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	4a0b      	ldr	r2, [pc, #44]	@ (800211c <FLASH_Program_Byte+0x40>)
 80020ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80020f4:	4b09      	ldr	r3, [pc, #36]	@ (800211c <FLASH_Program_Byte+0x40>)
 80020f6:	4a09      	ldr	r2, [pc, #36]	@ (800211c <FLASH_Program_Byte+0x40>)
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80020fc:	4b07      	ldr	r3, [pc, #28]	@ (800211c <FLASH_Program_Byte+0x40>)
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	4a06      	ldr	r2, [pc, #24]	@ (800211c <FLASH_Program_Byte+0x40>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	78fa      	ldrb	r2, [r7, #3]
 800210c:	701a      	strb	r2, [r3, #0]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40023c00 	.word	0x40023c00

08002120 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002124:	4b2f      	ldr	r3, [pc, #188]	@ (80021e4 <FLASH_SetErrorCode+0xc4>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002130:	4b2d      	ldr	r3, [pc, #180]	@ (80021e8 <FLASH_SetErrorCode+0xc8>)
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	f043 0310 	orr.w	r3, r3, #16
 8002138:	4a2b      	ldr	r2, [pc, #172]	@ (80021e8 <FLASH_SetErrorCode+0xc8>)
 800213a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800213c:	4b29      	ldr	r3, [pc, #164]	@ (80021e4 <FLASH_SetErrorCode+0xc4>)
 800213e:	2210      	movs	r2, #16
 8002140:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002142:	4b28      	ldr	r3, [pc, #160]	@ (80021e4 <FLASH_SetErrorCode+0xc4>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800214e:	4b26      	ldr	r3, [pc, #152]	@ (80021e8 <FLASH_SetErrorCode+0xc8>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f043 0308 	orr.w	r3, r3, #8
 8002156:	4a24      	ldr	r2, [pc, #144]	@ (80021e8 <FLASH_SetErrorCode+0xc8>)
 8002158:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800215a:	4b22      	ldr	r3, [pc, #136]	@ (80021e4 <FLASH_SetErrorCode+0xc4>)
 800215c:	2220      	movs	r2, #32
 800215e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002160:	4b20      	ldr	r3, [pc, #128]	@ (80021e4 <FLASH_SetErrorCode+0xc4>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800216c:	4b1e      	ldr	r3, [pc, #120]	@ (80021e8 <FLASH_SetErrorCode+0xc8>)
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	4a1c      	ldr	r2, [pc, #112]	@ (80021e8 <FLASH_SetErrorCode+0xc8>)
 8002176:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002178:	4b1a      	ldr	r3, [pc, #104]	@ (80021e4 <FLASH_SetErrorCode+0xc4>)
 800217a:	2240      	movs	r2, #64	@ 0x40
 800217c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800217e:	4b19      	ldr	r3, [pc, #100]	@ (80021e4 <FLASH_SetErrorCode+0xc4>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002186:	2b00      	cmp	r3, #0
 8002188:	d008      	beq.n	800219c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800218a:	4b17      	ldr	r3, [pc, #92]	@ (80021e8 <FLASH_SetErrorCode+0xc8>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	4a15      	ldr	r2, [pc, #84]	@ (80021e8 <FLASH_SetErrorCode+0xc8>)
 8002194:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002196:	4b13      	ldr	r3, [pc, #76]	@ (80021e4 <FLASH_SetErrorCode+0xc4>)
 8002198:	2280      	movs	r2, #128	@ 0x80
 800219a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800219c:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <FLASH_SetErrorCode+0xc4>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d009      	beq.n	80021bc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80021a8:	4b0f      	ldr	r3, [pc, #60]	@ (80021e8 <FLASH_SetErrorCode+0xc8>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	4a0d      	ldr	r2, [pc, #52]	@ (80021e8 <FLASH_SetErrorCode+0xc8>)
 80021b2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80021b4:	4b0b      	ldr	r3, [pc, #44]	@ (80021e4 <FLASH_SetErrorCode+0xc4>)
 80021b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021ba:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80021bc:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <FLASH_SetErrorCode+0xc4>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80021c8:	4b07      	ldr	r3, [pc, #28]	@ (80021e8 <FLASH_SetErrorCode+0xc8>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	f043 0320 	orr.w	r3, r3, #32
 80021d0:	4a05      	ldr	r2, [pc, #20]	@ (80021e8 <FLASH_SetErrorCode+0xc8>)
 80021d2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80021d4:	4b03      	ldr	r3, [pc, #12]	@ (80021e4 <FLASH_SetErrorCode+0xc4>)
 80021d6:	2202      	movs	r2, #2
 80021d8:	60da      	str	r2, [r3, #12]
  }
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	40023c00 	.word	0x40023c00
 80021e8:	20000234 	.word	0x20000234

080021ec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80021fa:	4b31      	ldr	r3, [pc, #196]	@ (80022c0 <HAL_FLASHEx_Erase+0xd4>)
 80021fc:	7e1b      	ldrb	r3, [r3, #24]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_FLASHEx_Erase+0x1a>
 8002202:	2302      	movs	r3, #2
 8002204:	e058      	b.n	80022b8 <HAL_FLASHEx_Erase+0xcc>
 8002206:	4b2e      	ldr	r3, [pc, #184]	@ (80022c0 <HAL_FLASHEx_Erase+0xd4>)
 8002208:	2201      	movs	r2, #1
 800220a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800220c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002210:	f7ff feac 	bl	8001f6c <FLASH_WaitForLastOperation>
 8002214:	4603      	mov	r3, r0
 8002216:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d148      	bne.n	80022b0 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f04f 32ff 	mov.w	r2, #4294967295
 8002224:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d115      	bne.n	800225a <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	4619      	mov	r1, r3
 800223a:	4610      	mov	r0, r2
 800223c:	f000 f868 	bl	8002310 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002240:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002244:	f7ff fe92 	bl	8001f6c <FLASH_WaitForLastOperation>
 8002248:	4603      	mov	r3, r0
 800224a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800224c:	4b1d      	ldr	r3, [pc, #116]	@ (80022c4 <HAL_FLASHEx_Erase+0xd8>)
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	4a1c      	ldr	r2, [pc, #112]	@ (80022c4 <HAL_FLASHEx_Erase+0xd8>)
 8002252:	f023 0304 	bic.w	r3, r3, #4
 8002256:	6113      	str	r3, [r2, #16]
 8002258:	e028      	b.n	80022ac <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	e01c      	b.n	800229c <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	4619      	mov	r1, r3
 800226a:	68b8      	ldr	r0, [r7, #8]
 800226c:	f000 f874 	bl	8002358 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002270:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002274:	f7ff fe7a 	bl	8001f6c <FLASH_WaitForLastOperation>
 8002278:	4603      	mov	r3, r0
 800227a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800227c:	4b11      	ldr	r3, [pc, #68]	@ (80022c4 <HAL_FLASHEx_Erase+0xd8>)
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	4a10      	ldr	r2, [pc, #64]	@ (80022c4 <HAL_FLASHEx_Erase+0xd8>)
 8002282:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002286:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	601a      	str	r2, [r3, #0]
          break;
 8002294:	e00a      	b.n	80022ac <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	3301      	adds	r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	4413      	add	r3, r2
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d3da      	bcc.n	8002262 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80022ac:	f000 f8e8 	bl	8002480 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80022b0:	4b03      	ldr	r3, [pc, #12]	@ (80022c0 <HAL_FLASHEx_Erase+0xd4>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	761a      	strb	r2, [r3, #24]

  return status;
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000234 	.word	0x20000234
 80022c4:	40023c00 	.word	0x40023c00

080022c8 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	220f      	movs	r2, #15
 80022d4:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 80022d6:	f000 f897 	bl	8002408 <FLASH_OB_GetWRP>
 80022da:	4603      	mov	r3, r0
 80022dc:	461a      	mov	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 80022e2:	f000 f89d 	bl	8002420 <FLASH_OB_GetRDP>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461a      	mov	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 80022ee:	f000 f87b 	bl	80023e8 <FLASH_OB_GetUser>
 80022f2:	4603      	mov	r3, r0
 80022f4:	461a      	mov	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 80022fa:	f000 f8b1 	bl	8002460 <FLASH_OB_GetBOR>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	615a      	str	r2, [r3, #20]
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	6039      	str	r1, [r7, #0]
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800231c:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <FLASH_MassErase+0x44>)
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	4a0c      	ldr	r2, [pc, #48]	@ (8002354 <FLASH_MassErase+0x44>)
 8002322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002326:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002328:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <FLASH_MassErase+0x44>)
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	4a09      	ldr	r2, [pc, #36]	@ (8002354 <FLASH_MassErase+0x44>)
 800232e:	f043 0304 	orr.w	r3, r3, #4
 8002332:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002334:	4b07      	ldr	r3, [pc, #28]	@ (8002354 <FLASH_MassErase+0x44>)
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	4313      	orrs	r3, r2
 800233e:	4a05      	ldr	r2, [pc, #20]	@ (8002354 <FLASH_MassErase+0x44>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002344:	6113      	str	r3, [r2, #16]
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40023c00 	.word	0x40023c00

08002358 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d102      	bne.n	8002374 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	e010      	b.n	8002396 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d103      	bne.n	8002382 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800237a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	e009      	b.n	8002396 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d103      	bne.n	8002390 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002388:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	e002      	b.n	8002396 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002390:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002394:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002396:	4b13      	ldr	r3, [pc, #76]	@ (80023e4 <FLASH_Erase_Sector+0x8c>)
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	4a12      	ldr	r2, [pc, #72]	@ (80023e4 <FLASH_Erase_Sector+0x8c>)
 800239c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80023a2:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <FLASH_Erase_Sector+0x8c>)
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	490f      	ldr	r1, [pc, #60]	@ (80023e4 <FLASH_Erase_Sector+0x8c>)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80023ae:	4b0d      	ldr	r3, [pc, #52]	@ (80023e4 <FLASH_Erase_Sector+0x8c>)
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	4a0c      	ldr	r2, [pc, #48]	@ (80023e4 <FLASH_Erase_Sector+0x8c>)
 80023b4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80023b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80023ba:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <FLASH_Erase_Sector+0x8c>)
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4313      	orrs	r3, r2
 80023c4:	4a07      	ldr	r2, [pc, #28]	@ (80023e4 <FLASH_Erase_Sector+0x8c>)
 80023c6:	f043 0302 	orr.w	r3, r3, #2
 80023ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80023cc:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <FLASH_Erase_Sector+0x8c>)
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	4a04      	ldr	r2, [pc, #16]	@ (80023e4 <FLASH_Erase_Sector+0x8c>)
 80023d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d6:	6113      	str	r3, [r2, #16]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	40023c00 	.word	0x40023c00

080023e8 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 80023ec:	4b05      	ldr	r3, [pc, #20]	@ (8002404 <FLASH_OB_GetUser+0x1c>)
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f023 031f 	bic.w	r3, r3, #31
 80023f6:	b2db      	uxtb	r3, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40023c00 	.word	0x40023c00

08002408 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800240c:	4b03      	ldr	r3, [pc, #12]	@ (800241c <FLASH_OB_GetWRP+0x14>)
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	b29b      	uxth	r3, r3
}
 8002412:	4618      	mov	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40023c16 	.word	0x40023c16

08002420 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8002426:	23aa      	movs	r3, #170	@ 0xaa
 8002428:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800242a:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <FLASH_OB_GetRDP+0x3c>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2bcc      	cmp	r3, #204	@ 0xcc
 8002432:	d102      	bne.n	800243a <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002434:	23cc      	movs	r3, #204	@ 0xcc
 8002436:	71fb      	strb	r3, [r7, #7]
 8002438:	e009      	b.n	800244e <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800243a:	4b08      	ldr	r3, [pc, #32]	@ (800245c <FLASH_OB_GetRDP+0x3c>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2baa      	cmp	r3, #170	@ 0xaa
 8002442:	d102      	bne.n	800244a <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8002444:	23aa      	movs	r3, #170	@ 0xaa
 8002446:	71fb      	strb	r3, [r7, #7]
 8002448:	e001      	b.n	800244e <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 800244a:	2355      	movs	r3, #85	@ 0x55
 800244c:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800244e:	79fb      	ldrb	r3, [r7, #7]
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40023c15 	.word	0x40023c15

08002460 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002464:	4b05      	ldr	r3, [pc, #20]	@ (800247c <FLASH_OB_GetBOR+0x1c>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	b2db      	uxtb	r3, r3
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40023c14 	.word	0x40023c14

08002480 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002484:	4b20      	ldr	r3, [pc, #128]	@ (8002508 <FLASH_FlushCaches+0x88>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800248c:	2b00      	cmp	r3, #0
 800248e:	d017      	beq.n	80024c0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002490:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <FLASH_FlushCaches+0x88>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a1c      	ldr	r2, [pc, #112]	@ (8002508 <FLASH_FlushCaches+0x88>)
 8002496:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800249a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800249c:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <FLASH_FlushCaches+0x88>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a19      	ldr	r2, [pc, #100]	@ (8002508 <FLASH_FlushCaches+0x88>)
 80024a2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <FLASH_FlushCaches+0x88>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a16      	ldr	r2, [pc, #88]	@ (8002508 <FLASH_FlushCaches+0x88>)
 80024ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024b2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024b4:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <FLASH_FlushCaches+0x88>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a13      	ldr	r2, [pc, #76]	@ (8002508 <FLASH_FlushCaches+0x88>)
 80024ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024be:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80024c0:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <FLASH_FlushCaches+0x88>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d017      	beq.n	80024fc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80024cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <FLASH_FlushCaches+0x88>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002508 <FLASH_FlushCaches+0x88>)
 80024d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80024d6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80024d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <FLASH_FlushCaches+0x88>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002508 <FLASH_FlushCaches+0x88>)
 80024de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b08      	ldr	r3, [pc, #32]	@ (8002508 <FLASH_FlushCaches+0x88>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a07      	ldr	r2, [pc, #28]	@ (8002508 <FLASH_FlushCaches+0x88>)
 80024ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024ee:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <FLASH_FlushCaches+0x88>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a04      	ldr	r2, [pc, #16]	@ (8002508 <FLASH_FlushCaches+0x88>)
 80024f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024fa:	6013      	str	r3, [r2, #0]
  }
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40023c00 	.word	0x40023c00

0800250c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	@ 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	e165      	b.n	80027f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002528:	2201      	movs	r2, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	429a      	cmp	r2, r3
 8002542:	f040 8154 	bne.w	80027ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d005      	beq.n	800255e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255a:	2b02      	cmp	r3, #2
 800255c:	d130      	bne.n	80025c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	2203      	movs	r2, #3
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002594:	2201      	movs	r2, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f003 0201 	and.w	r2, r3, #1
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d017      	beq.n	80025fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d123      	bne.n	8002650 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	08da      	lsrs	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3208      	adds	r2, #8
 8002610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	220f      	movs	r2, #15
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	08da      	lsrs	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3208      	adds	r2, #8
 800264a:	69b9      	ldr	r1, [r7, #24]
 800264c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	2203      	movs	r2, #3
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0203 	and.w	r2, r3, #3
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80ae 	beq.w	80027ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	4b5d      	ldr	r3, [pc, #372]	@ (800280c <HAL_GPIO_Init+0x300>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269a:	4a5c      	ldr	r2, [pc, #368]	@ (800280c <HAL_GPIO_Init+0x300>)
 800269c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026a2:	4b5a      	ldr	r3, [pc, #360]	@ (800280c <HAL_GPIO_Init+0x300>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ae:	4a58      	ldr	r2, [pc, #352]	@ (8002810 <HAL_GPIO_Init+0x304>)
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	089b      	lsrs	r3, r3, #2
 80026b4:	3302      	adds	r3, #2
 80026b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	220f      	movs	r2, #15
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4f      	ldr	r2, [pc, #316]	@ (8002814 <HAL_GPIO_Init+0x308>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d025      	beq.n	8002726 <HAL_GPIO_Init+0x21a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a4e      	ldr	r2, [pc, #312]	@ (8002818 <HAL_GPIO_Init+0x30c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d01f      	beq.n	8002722 <HAL_GPIO_Init+0x216>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4d      	ldr	r2, [pc, #308]	@ (800281c <HAL_GPIO_Init+0x310>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d019      	beq.n	800271e <HAL_GPIO_Init+0x212>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4c      	ldr	r2, [pc, #304]	@ (8002820 <HAL_GPIO_Init+0x314>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <HAL_GPIO_Init+0x20e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a4b      	ldr	r2, [pc, #300]	@ (8002824 <HAL_GPIO_Init+0x318>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00d      	beq.n	8002716 <HAL_GPIO_Init+0x20a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002828 <HAL_GPIO_Init+0x31c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d007      	beq.n	8002712 <HAL_GPIO_Init+0x206>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a49      	ldr	r2, [pc, #292]	@ (800282c <HAL_GPIO_Init+0x320>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d101      	bne.n	800270e <HAL_GPIO_Init+0x202>
 800270a:	2306      	movs	r3, #6
 800270c:	e00c      	b.n	8002728 <HAL_GPIO_Init+0x21c>
 800270e:	2307      	movs	r3, #7
 8002710:	e00a      	b.n	8002728 <HAL_GPIO_Init+0x21c>
 8002712:	2305      	movs	r3, #5
 8002714:	e008      	b.n	8002728 <HAL_GPIO_Init+0x21c>
 8002716:	2304      	movs	r3, #4
 8002718:	e006      	b.n	8002728 <HAL_GPIO_Init+0x21c>
 800271a:	2303      	movs	r3, #3
 800271c:	e004      	b.n	8002728 <HAL_GPIO_Init+0x21c>
 800271e:	2302      	movs	r3, #2
 8002720:	e002      	b.n	8002728 <HAL_GPIO_Init+0x21c>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_GPIO_Init+0x21c>
 8002726:	2300      	movs	r3, #0
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	f002 0203 	and.w	r2, r2, #3
 800272e:	0092      	lsls	r2, r2, #2
 8002730:	4093      	lsls	r3, r2
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002738:	4935      	ldr	r1, [pc, #212]	@ (8002810 <HAL_GPIO_Init+0x304>)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	3302      	adds	r3, #2
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002746:	4b3a      	ldr	r3, [pc, #232]	@ (8002830 <HAL_GPIO_Init+0x324>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	43db      	mvns	r3, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4013      	ands	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800276a:	4a31      	ldr	r2, [pc, #196]	@ (8002830 <HAL_GPIO_Init+0x324>)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002770:	4b2f      	ldr	r3, [pc, #188]	@ (8002830 <HAL_GPIO_Init+0x324>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002794:	4a26      	ldr	r2, [pc, #152]	@ (8002830 <HAL_GPIO_Init+0x324>)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800279a:	4b25      	ldr	r3, [pc, #148]	@ (8002830 <HAL_GPIO_Init+0x324>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027be:	4a1c      	ldr	r2, [pc, #112]	@ (8002830 <HAL_GPIO_Init+0x324>)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002830 <HAL_GPIO_Init+0x324>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027e8:	4a11      	ldr	r2, [pc, #68]	@ (8002830 <HAL_GPIO_Init+0x324>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3301      	adds	r3, #1
 80027f2:	61fb      	str	r3, [r7, #28]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	2b0f      	cmp	r3, #15
 80027f8:	f67f ae96 	bls.w	8002528 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3724      	adds	r7, #36	@ 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800
 8002810:	40013800 	.word	0x40013800
 8002814:	40020000 	.word	0x40020000
 8002818:	40020400 	.word	0x40020400
 800281c:	40020800 	.word	0x40020800
 8002820:	40020c00 	.word	0x40020c00
 8002824:	40021000 	.word	0x40021000
 8002828:	40021400 	.word	0x40021400
 800282c:	40021800 	.word	0x40021800
 8002830:	40013c00 	.word	0x40013c00

08002834 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	887b      	ldrh	r3, [r7, #2]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
 8002850:	e001      	b.n	8002856 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002856:	7bfb      	ldrb	r3, [r7, #15]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
 8002870:	4613      	mov	r3, r2
 8002872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002874:	787b      	ldrb	r3, [r7, #1]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002880:	e003      	b.n	800288a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002882:	887b      	ldrh	r3, [r7, #2]
 8002884:	041a      	lsls	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	619a      	str	r2, [r3, #24]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	4b20      	ldr	r3, [pc, #128]	@ (8002928 <HAL_PWREx_EnableOverDrive+0x90>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002928 <HAL_PWREx_EnableOverDrive+0x90>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002928 <HAL_PWREx_EnableOverDrive+0x90>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80028be:	4b1b      	ldr	r3, [pc, #108]	@ (800292c <HAL_PWREx_EnableOverDrive+0x94>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028c4:	f7ff f96a 	bl	8001b9c <HAL_GetTick>
 80028c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028ca:	e009      	b.n	80028e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028cc:	f7ff f966 	bl	8001b9c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028da:	d901      	bls.n	80028e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e01f      	b.n	8002920 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028e0:	4b13      	ldr	r3, [pc, #76]	@ (8002930 <HAL_PWREx_EnableOverDrive+0x98>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028ec:	d1ee      	bne.n	80028cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028ee:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028f4:	f7ff f952 	bl	8001b9c <HAL_GetTick>
 80028f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028fa:	e009      	b.n	8002910 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028fc:	f7ff f94e 	bl	8001b9c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800290a:	d901      	bls.n	8002910 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e007      	b.n	8002920 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002910:	4b07      	ldr	r3, [pc, #28]	@ (8002930 <HAL_PWREx_EnableOverDrive+0x98>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002918:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800291c:	d1ee      	bne.n	80028fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	420e0040 	.word	0x420e0040
 8002930:	40007000 	.word	0x40007000
 8002934:	420e0044 	.word	0x420e0044

08002938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0cc      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800294c:	4b68      	ldr	r3, [pc, #416]	@ (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d90c      	bls.n	8002974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b65      	ldr	r3, [pc, #404]	@ (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b63      	ldr	r3, [pc, #396]	@ (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0b8      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d020      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800298c:	4b59      	ldr	r3, [pc, #356]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a58      	ldr	r2, [pc, #352]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002996:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a4:	4b53      	ldr	r3, [pc, #332]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4a52      	ldr	r2, [pc, #328]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b0:	4b50      	ldr	r3, [pc, #320]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	494d      	ldr	r1, [pc, #308]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d044      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d6:	4b47      	ldr	r3, [pc, #284]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d119      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e07f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d003      	beq.n	80029f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f6:	4b3f      	ldr	r3, [pc, #252]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e06f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a06:	4b3b      	ldr	r3, [pc, #236]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e067      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a16:	4b37      	ldr	r3, [pc, #220]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f023 0203 	bic.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4934      	ldr	r1, [pc, #208]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a28:	f7ff f8b8 	bl	8001b9c <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a30:	f7ff f8b4 	bl	8001b9c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e04f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	4b2b      	ldr	r3, [pc, #172]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 020c 	and.w	r2, r3, #12
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1eb      	bne.n	8002a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a58:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d20c      	bcs.n	8002a80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b22      	ldr	r3, [pc, #136]	@ (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b20      	ldr	r3, [pc, #128]	@ (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e032      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a8c:	4b19      	ldr	r3, [pc, #100]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4916      	ldr	r1, [pc, #88]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aaa:	4b12      	ldr	r3, [pc, #72]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	490e      	ldr	r1, [pc, #56]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002abe:	f000 f855 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	490a      	ldr	r1, [pc, #40]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	5ccb      	ldrb	r3, [r1, r3]
 8002ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad6:	4a09      	ldr	r2, [pc, #36]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ada:	4b09      	ldr	r3, [pc, #36]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff f818 	bl	8001b14 <HAL_InitTick>

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023c00 	.word	0x40023c00
 8002af4:	40023800 	.word	0x40023800
 8002af8:	08004da8 	.word	0x08004da8
 8002afc:	20000008 	.word	0x20000008
 8002b00:	2000000c 	.word	0x2000000c

08002b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b08:	4b03      	ldr	r3, [pc, #12]	@ (8002b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000008 	.word	0x20000008

08002b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b20:	f7ff fff0 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b05      	ldr	r3, [pc, #20]	@ (8002b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	0a9b      	lsrs	r3, r3, #10
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	4903      	ldr	r1, [pc, #12]	@ (8002b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b32:	5ccb      	ldrb	r3, [r1, r3]
 8002b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	08004db8 	.word	0x08004db8

08002b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b48:	f7ff ffdc 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b05      	ldr	r3, [pc, #20]	@ (8002b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	0b5b      	lsrs	r3, r3, #13
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	4903      	ldr	r1, [pc, #12]	@ (8002b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b5a:	5ccb      	ldrb	r3, [r1, r3]
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40023800 	.word	0x40023800
 8002b68:	08004db8 	.word	0x08004db8

08002b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b70:	b0a6      	sub	sp, #152	@ 0x98
 8002b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b92:	4bc8      	ldr	r3, [pc, #800]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b0c      	cmp	r3, #12
 8002b9c:	f200 817e 	bhi.w	8002e9c <HAL_RCC_GetSysClockFreq+0x330>
 8002ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba6:	bf00      	nop
 8002ba8:	08002bdd 	.word	0x08002bdd
 8002bac:	08002e9d 	.word	0x08002e9d
 8002bb0:	08002e9d 	.word	0x08002e9d
 8002bb4:	08002e9d 	.word	0x08002e9d
 8002bb8:	08002be5 	.word	0x08002be5
 8002bbc:	08002e9d 	.word	0x08002e9d
 8002bc0:	08002e9d 	.word	0x08002e9d
 8002bc4:	08002e9d 	.word	0x08002e9d
 8002bc8:	08002bed 	.word	0x08002bed
 8002bcc:	08002e9d 	.word	0x08002e9d
 8002bd0:	08002e9d 	.word	0x08002e9d
 8002bd4:	08002e9d 	.word	0x08002e9d
 8002bd8:	08002d57 	.word	0x08002d57
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bdc:	4bb6      	ldr	r3, [pc, #728]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002bde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002be2:	e15f      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002be4:	4bb5      	ldr	r3, [pc, #724]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x350>)
 8002be6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002bea:	e15b      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bec:	4bb1      	ldr	r3, [pc, #708]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bf8:	4bae      	ldr	r3, [pc, #696]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d031      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c04:	4bab      	ldr	r3, [pc, #684]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	099b      	lsrs	r3, r3, #6
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c16:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c18:	2300      	movs	r3, #0
 8002c1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c1c:	4ba7      	ldr	r3, [pc, #668]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x350>)
 8002c1e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002c22:	462a      	mov	r2, r5
 8002c24:	fb03 f202 	mul.w	r2, r3, r2
 8002c28:	2300      	movs	r3, #0
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	4aa2      	ldr	r2, [pc, #648]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x350>)
 8002c34:	4621      	mov	r1, r4
 8002c36:	fba1 1202 	umull	r1, r2, r1, r2
 8002c3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c3c:	460a      	mov	r2, r1
 8002c3e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002c40:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002c42:	4413      	add	r3, r2
 8002c44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c4e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002c50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c54:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002c58:	f7fd fb32 	bl	80002c0 <__aeabi_uldivmod>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4613      	mov	r3, r2
 8002c62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c66:	e064      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c68:	4b92      	ldr	r3, [pc, #584]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	099b      	lsrs	r3, r3, #6
 8002c6e:	2200      	movs	r2, #0
 8002c70:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c72:	657a      	str	r2, [r7, #84]	@ 0x54
 8002c74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c80:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002c84:	4622      	mov	r2, r4
 8002c86:	462b      	mov	r3, r5
 8002c88:	f04f 0000 	mov.w	r0, #0
 8002c8c:	f04f 0100 	mov.w	r1, #0
 8002c90:	0159      	lsls	r1, r3, #5
 8002c92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c96:	0150      	lsls	r0, r2, #5
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	1a51      	subs	r1, r2, r1
 8002ca0:	6139      	str	r1, [r7, #16]
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	eb63 0301 	sbc.w	r3, r3, r1
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cb6:	4659      	mov	r1, fp
 8002cb8:	018b      	lsls	r3, r1, #6
 8002cba:	4651      	mov	r1, sl
 8002cbc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cc0:	4651      	mov	r1, sl
 8002cc2:	018a      	lsls	r2, r1, #6
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	ebb2 0801 	subs.w	r8, r2, r1
 8002cca:	4659      	mov	r1, fp
 8002ccc:	eb63 0901 	sbc.w	r9, r3, r1
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cdc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ce0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ce4:	4690      	mov	r8, r2
 8002ce6:	4699      	mov	r9, r3
 8002ce8:	4623      	mov	r3, r4
 8002cea:	eb18 0303 	adds.w	r3, r8, r3
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	462b      	mov	r3, r5
 8002cf2:	eb49 0303 	adc.w	r3, r9, r3
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d04:	4629      	mov	r1, r5
 8002d06:	028b      	lsls	r3, r1, #10
 8002d08:	4621      	mov	r1, r4
 8002d0a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d0e:	4621      	mov	r1, r4
 8002d10:	028a      	lsls	r2, r1, #10
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d24:	f7fd facc 	bl	80002c0 <__aeabi_uldivmod>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d32:	4b60      	ldr	r3, [pc, #384]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	0c1b      	lsrs	r3, r3, #16
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002d44:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002d54:	e0a6      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d56:	4b57      	ldr	r3, [pc, #348]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d62:	4b54      	ldr	r3, [pc, #336]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d02a      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6e:	4b51      	ldr	r3, [pc, #324]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	099b      	lsrs	r3, r3, #6
 8002d74:	2200      	movs	r2, #0
 8002d76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d80:	2100      	movs	r1, #0
 8002d82:	4b4e      	ldr	r3, [pc, #312]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x350>)
 8002d84:	fb03 f201 	mul.w	r2, r3, r1
 8002d88:	2300      	movs	r3, #0
 8002d8a:	fb00 f303 	mul.w	r3, r0, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a4a      	ldr	r2, [pc, #296]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x350>)
 8002d92:	fba0 1202 	umull	r1, r2, r0, r2
 8002d96:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d98:	460a      	mov	r2, r1
 8002d9a:	673a      	str	r2, [r7, #112]	@ 0x70
 8002d9c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002d9e:	4413      	add	r3, r2
 8002da0:	677b      	str	r3, [r7, #116]	@ 0x74
 8002da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002da6:	2200      	movs	r2, #0
 8002da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002daa:	637a      	str	r2, [r7, #52]	@ 0x34
 8002dac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002db0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002db4:	f7fd fa84 	bl	80002c0 <__aeabi_uldivmod>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002dc2:	e05b      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	099b      	lsrs	r3, r3, #6
 8002dca:	2200      	movs	r2, #0
 8002dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd6:	623b      	str	r3, [r7, #32]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ddc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002de0:	4642      	mov	r2, r8
 8002de2:	464b      	mov	r3, r9
 8002de4:	f04f 0000 	mov.w	r0, #0
 8002de8:	f04f 0100 	mov.w	r1, #0
 8002dec:	0159      	lsls	r1, r3, #5
 8002dee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df2:	0150      	lsls	r0, r2, #5
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4641      	mov	r1, r8
 8002dfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dfe:	4649      	mov	r1, r9
 8002e00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e18:	ebb2 040a 	subs.w	r4, r2, sl
 8002e1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	00eb      	lsls	r3, r5, #3
 8002e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e2e:	00e2      	lsls	r2, r4, #3
 8002e30:	4614      	mov	r4, r2
 8002e32:	461d      	mov	r5, r3
 8002e34:	4643      	mov	r3, r8
 8002e36:	18e3      	adds	r3, r4, r3
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	464b      	mov	r3, r9
 8002e3c:	eb45 0303 	adc.w	r3, r5, r3
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e4e:	4629      	mov	r1, r5
 8002e50:	028b      	lsls	r3, r1, #10
 8002e52:	4621      	mov	r1, r4
 8002e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e58:	4621      	mov	r1, r4
 8002e5a:	028a      	lsls	r2, r1, #10
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e64:	2200      	movs	r2, #0
 8002e66:	61bb      	str	r3, [r7, #24]
 8002e68:	61fa      	str	r2, [r7, #28]
 8002e6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e6e:	f7fd fa27 	bl	80002c0 <__aeabi_uldivmod>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4613      	mov	r3, r2
 8002e78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	0f1b      	lsrs	r3, r3, #28
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002e8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002e9a:	e003      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002e9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002ea2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3798      	adds	r7, #152	@ 0x98
 8002eac:	46bd      	mov	sp, r7
 8002eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	017d7840 	.word	0x017d7840

08002ec0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ec6:	f7fe fe69 	bl	8001b9c <HAL_GetTick>
 8002eca:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002ecc:	4b72      	ldr	r3, [pc, #456]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a71      	ldr	r2, [pc, #452]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eda:	f7fe fe5f 	bl	8001b9c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e0d0      	b.n	800308e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002eec:	4b6a      	ldr	r3, [pc, #424]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002ef8:	4b67      	ldr	r3, [pc, #412]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a66      	ldr	r2, [pc, #408]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f02:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002f04:	f7fe fe4a 	bl	8001b9c <HAL_GetTick>
 8002f08:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002f0a:	4b63      	ldr	r3, [pc, #396]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002f10:	e00a      	b.n	8002f28 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f12:	f7fe fe43 	bl	8001b9c <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e0b2      	b.n	800308e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002f28:	4b5b      	ldr	r3, [pc, #364]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1ee      	bne.n	8002f12 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002f34:	f7fe fe32 	bl	8001b9c <HAL_GetTick>
 8002f38:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002f3a:	4b57      	ldr	r3, [pc, #348]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a56      	ldr	r2, [pc, #344]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002f40:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8002f44:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f48:	f7fe fe28 	bl	8001b9c <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	@ 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e099      	b.n	800308e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002f66:	f7fe fe19 	bl	8001b9c <HAL_GetTick>
 8002f6a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002f6c:	4b4a      	ldr	r3, [pc, #296]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a49      	ldr	r2, [pc, #292]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002f72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f76:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7fe fe0f 	bl	8001b9c <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e080      	b.n	800308e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002f8c:	4b42      	ldr	r3, [pc, #264]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1f0      	bne.n	8002f7a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002f98:	f7fe fe00 	bl	8001b9c <HAL_GetTick>
 8002f9c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a3d      	ldr	r2, [pc, #244]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002fa4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002fa8:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fac:	f7fe fdf6 	bl	8001b9c <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e067      	b.n	800308e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002fbe:	4b36      	ldr	r3, [pc, #216]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002fca:	f7fe fde7 	bl	8001b9c <HAL_GetTick>
 8002fce:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8002fd0:	4b31      	ldr	r3, [pc, #196]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a30      	ldr	r2, [pc, #192]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fda:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fde:	f7fe fddd 	bl	8001b9c <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e04e      	b.n	800308e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002ff0:	4b29      	ldr	r3, [pc, #164]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f0      	bne.n	8002fde <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8002ffc:	4b26      	ldr	r3, [pc, #152]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8002ffe:	4a27      	ldr	r2, [pc, #156]	@ (800309c <HAL_RCC_DeInit+0x1dc>)
 8003000:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003002:	4b25      	ldr	r3, [pc, #148]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8003004:	4a25      	ldr	r2, [pc, #148]	@ (800309c <HAL_RCC_DeInit+0x1dc>)
 8003006:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 800300a:	4b23      	ldr	r3, [pc, #140]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 800300c:	4a24      	ldr	r2, [pc, #144]	@ (80030a0 <HAL_RCC_DeInit+0x1e0>)
 800300e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003012:	4b21      	ldr	r3, [pc, #132]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	4a20      	ldr	r2, [pc, #128]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8003018:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800301c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800301e:	4b1e      	ldr	r3, [pc, #120]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	4a1d      	ldr	r2, [pc, #116]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8003024:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003028:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 800302a:	4b1b      	ldr	r3, [pc, #108]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	4a1a      	ldr	r2, [pc, #104]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8003030:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003034:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 8003036:	4b18      	ldr	r3, [pc, #96]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	4a17      	ldr	r2, [pc, #92]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 800303c:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8003040:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003042:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	4a14      	ldr	r2, [pc, #80]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8003048:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800304c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 800304e:	4b12      	ldr	r3, [pc, #72]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	4a11      	ldr	r2, [pc, #68]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8003054:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003058:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800305a:	4b0f      	ldr	r3, [pc, #60]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 800305c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800305e:	4a0e      	ldr	r2, [pc, #56]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003066:	4b0c      	ldr	r3, [pc, #48]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 8003068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800306a:	4a0b      	ldr	r2, [pc, #44]	@ (8003098 <HAL_RCC_DeInit+0x1d8>)
 800306c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003070:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003072:	4b0c      	ldr	r3, [pc, #48]	@ (80030a4 <HAL_RCC_DeInit+0x1e4>)
 8003074:	4a0c      	ldr	r2, [pc, #48]	@ (80030a8 <HAL_RCC_DeInit+0x1e8>)
 8003076:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003078:	4b0c      	ldr	r3, [pc, #48]	@ (80030ac <HAL_RCC_DeInit+0x1ec>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fd49 	bl	8001b14 <HAL_InitTick>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 800308c:	2300      	movs	r3, #0
  }
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800
 800309c:	24003010 	.word	0x24003010
 80030a0:	04003010 	.word	0x04003010
 80030a4:	20000008 	.word	0x20000008
 80030a8:	00f42400 	.word	0x00f42400
 80030ac:	2000000c 	.word	0x2000000c

080030b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e28d      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 8083 	beq.w	80031d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80030d0:	4b94      	ldr	r3, [pc, #592]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 030c 	and.w	r3, r3, #12
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d019      	beq.n	8003110 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80030dc:	4b91      	ldr	r3, [pc, #580]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 030c 	and.w	r3, r3, #12
        || \
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d106      	bne.n	80030f6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80030e8:	4b8e      	ldr	r3, [pc, #568]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030f4:	d00c      	beq.n	8003110 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f6:	4b8b      	ldr	r3, [pc, #556]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	d112      	bne.n	8003128 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003102:	4b88      	ldr	r3, [pc, #544]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800310a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800310e:	d10b      	bne.n	8003128 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003110:	4b84      	ldr	r3, [pc, #528]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d05b      	beq.n	80031d4 <HAL_RCC_OscConfig+0x124>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d157      	bne.n	80031d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e25a      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003130:	d106      	bne.n	8003140 <HAL_RCC_OscConfig+0x90>
 8003132:	4b7c      	ldr	r3, [pc, #496]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a7b      	ldr	r2, [pc, #492]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e01d      	b.n	800317c <HAL_RCC_OscConfig+0xcc>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0xb4>
 800314a:	4b76      	ldr	r3, [pc, #472]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a75      	ldr	r2, [pc, #468]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 8003150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4b73      	ldr	r3, [pc, #460]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a72      	ldr	r2, [pc, #456]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0xcc>
 8003164:	4b6f      	ldr	r3, [pc, #444]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a6e      	ldr	r2, [pc, #440]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 800316a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b6c      	ldr	r3, [pc, #432]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a6b      	ldr	r2, [pc, #428]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 8003176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800317a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d013      	beq.n	80031ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe fd0a 	bl	8001b9c <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800318c:	f7fe fd06 	bl	8001b9c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	@ 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e21f      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	4b61      	ldr	r3, [pc, #388]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0xdc>
 80031aa:	e014      	b.n	80031d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe fcf6 	bl	8001b9c <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fe fcf2 	bl	8001b9c <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	@ 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e20b      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c6:	4b57      	ldr	r3, [pc, #348]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x104>
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d06f      	beq.n	80032c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031e2:	4b50      	ldr	r3, [pc, #320]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d017      	beq.n	800321e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80031ee:	4b4d      	ldr	r3, [pc, #308]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
        || \
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d105      	bne.n	8003206 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80031fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003206:	4b47      	ldr	r3, [pc, #284]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800320e:	2b0c      	cmp	r3, #12
 8003210:	d11c      	bne.n	800324c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003212:	4b44      	ldr	r3, [pc, #272]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d116      	bne.n	800324c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321e:	4b41      	ldr	r3, [pc, #260]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <HAL_RCC_OscConfig+0x186>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d001      	beq.n	8003236 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e1d3      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003236:	4b3b      	ldr	r3, [pc, #236]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4937      	ldr	r1, [pc, #220]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324a:	e03a      	b.n	80032c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d020      	beq.n	8003296 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003254:	4b34      	ldr	r3, [pc, #208]	@ (8003328 <HAL_RCC_OscConfig+0x278>)
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325a:	f7fe fc9f 	bl	8001b9c <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003262:	f7fe fc9b 	bl	8001b9c <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e1b4      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003274:	4b2b      	ldr	r3, [pc, #172]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003280:	4b28      	ldr	r3, [pc, #160]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4925      	ldr	r1, [pc, #148]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 8003290:	4313      	orrs	r3, r2
 8003292:	600b      	str	r3, [r1, #0]
 8003294:	e015      	b.n	80032c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003296:	4b24      	ldr	r3, [pc, #144]	@ (8003328 <HAL_RCC_OscConfig+0x278>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fe fc7e 	bl	8001b9c <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032a4:	f7fe fc7a 	bl	8001b9c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e193      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d036      	beq.n	800333c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d016      	beq.n	8003304 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d6:	4b15      	ldr	r3, [pc, #84]	@ (800332c <HAL_RCC_OscConfig+0x27c>)
 80032d8:	2201      	movs	r2, #1
 80032da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032dc:	f7fe fc5e 	bl	8001b9c <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e4:	f7fe fc5a 	bl	8001b9c <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e173      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <HAL_RCC_OscConfig+0x274>)
 80032f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x234>
 8003302:	e01b      	b.n	800333c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003304:	4b09      	ldr	r3, [pc, #36]	@ (800332c <HAL_RCC_OscConfig+0x27c>)
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330a:	f7fe fc47 	bl	8001b9c <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003310:	e00e      	b.n	8003330 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003312:	f7fe fc43 	bl	8001b9c <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d907      	bls.n	8003330 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e15c      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
 8003324:	40023800 	.word	0x40023800
 8003328:	42470000 	.word	0x42470000
 800332c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003330:	4b8a      	ldr	r3, [pc, #552]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1ea      	bne.n	8003312 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8097 	beq.w	8003478 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800334a:	2300      	movs	r3, #0
 800334c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800334e:	4b83      	ldr	r3, [pc, #524]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10f      	bne.n	800337a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	4b7f      	ldr	r3, [pc, #508]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	4a7e      	ldr	r2, [pc, #504]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003368:	6413      	str	r3, [r2, #64]	@ 0x40
 800336a:	4b7c      	ldr	r3, [pc, #496]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003376:	2301      	movs	r3, #1
 8003378:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337a:	4b79      	ldr	r3, [pc, #484]	@ (8003560 <HAL_RCC_OscConfig+0x4b0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003382:	2b00      	cmp	r3, #0
 8003384:	d118      	bne.n	80033b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003386:	4b76      	ldr	r3, [pc, #472]	@ (8003560 <HAL_RCC_OscConfig+0x4b0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a75      	ldr	r2, [pc, #468]	@ (8003560 <HAL_RCC_OscConfig+0x4b0>)
 800338c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003392:	f7fe fc03 	bl	8001b9c <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339a:	f7fe fbff 	bl	8001b9c <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e118      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ac:	4b6c      	ldr	r3, [pc, #432]	@ (8003560 <HAL_RCC_OscConfig+0x4b0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f0      	beq.n	800339a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d106      	bne.n	80033ce <HAL_RCC_OscConfig+0x31e>
 80033c0:	4b66      	ldr	r3, [pc, #408]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 80033c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c4:	4a65      	ldr	r2, [pc, #404]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80033cc:	e01c      	b.n	8003408 <HAL_RCC_OscConfig+0x358>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2b05      	cmp	r3, #5
 80033d4:	d10c      	bne.n	80033f0 <HAL_RCC_OscConfig+0x340>
 80033d6:	4b61      	ldr	r3, [pc, #388]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033da:	4a60      	ldr	r2, [pc, #384]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 80033dc:	f043 0304 	orr.w	r3, r3, #4
 80033e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033e2:	4b5e      	ldr	r3, [pc, #376]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e6:	4a5d      	ldr	r2, [pc, #372]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ee:	e00b      	b.n	8003408 <HAL_RCC_OscConfig+0x358>
 80033f0:	4b5a      	ldr	r3, [pc, #360]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f4:	4a59      	ldr	r2, [pc, #356]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 80033f6:	f023 0301 	bic.w	r3, r3, #1
 80033fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80033fc:	4b57      	ldr	r3, [pc, #348]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003400:	4a56      	ldr	r2, [pc, #344]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003402:	f023 0304 	bic.w	r3, r3, #4
 8003406:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d015      	beq.n	800343c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003410:	f7fe fbc4 	bl	8001b9c <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003416:	e00a      	b.n	800342e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003418:	f7fe fbc0 	bl	8001b9c <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003426:	4293      	cmp	r3, r2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e0d7      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342e:	4b4b      	ldr	r3, [pc, #300]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0ee      	beq.n	8003418 <HAL_RCC_OscConfig+0x368>
 800343a:	e014      	b.n	8003466 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343c:	f7fe fbae 	bl	8001b9c <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003442:	e00a      	b.n	800345a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003444:	f7fe fbaa 	bl	8001b9c <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e0c1      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345a:	4b40      	ldr	r3, [pc, #256]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 800345c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1ee      	bne.n	8003444 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003466:	7dfb      	ldrb	r3, [r7, #23]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d105      	bne.n	8003478 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346c:	4b3b      	ldr	r3, [pc, #236]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	4a3a      	ldr	r2, [pc, #232]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003476:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80ad 	beq.w	80035dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003482:	4b36      	ldr	r3, [pc, #216]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	2b08      	cmp	r3, #8
 800348c:	d060      	beq.n	8003550 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d145      	bne.n	8003522 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003496:	4b33      	ldr	r3, [pc, #204]	@ (8003564 <HAL_RCC_OscConfig+0x4b4>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fe fb7e 	bl	8001b9c <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a4:	f7fe fb7a 	bl	8001b9c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e093      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b6:	4b29      	ldr	r3, [pc, #164]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d0:	019b      	lsls	r3, r3, #6
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d8:	085b      	lsrs	r3, r3, #1
 80034da:	3b01      	subs	r3, #1
 80034dc:	041b      	lsls	r3, r3, #16
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e4:	061b      	lsls	r3, r3, #24
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ec:	071b      	lsls	r3, r3, #28
 80034ee:	491b      	ldr	r1, [pc, #108]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003564 <HAL_RCC_OscConfig+0x4b4>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fa:	f7fe fb4f 	bl	8001b9c <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003502:	f7fe fb4b 	bl	8001b9c <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e064      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003514:	4b11      	ldr	r3, [pc, #68]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x452>
 8003520:	e05c      	b.n	80035dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003522:	4b10      	ldr	r3, [pc, #64]	@ (8003564 <HAL_RCC_OscConfig+0x4b4>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fe fb38 	bl	8001b9c <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003530:	f7fe fb34 	bl	8001b9c <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e04d      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003542:	4b06      	ldr	r3, [pc, #24]	@ (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x480>
 800354e:	e045      	b.n	80035dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d107      	bne.n	8003568 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e040      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
 800355c:	40023800 	.word	0x40023800
 8003560:	40007000 	.word	0x40007000
 8003564:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003568:	4b1f      	ldr	r3, [pc, #124]	@ (80035e8 <HAL_RCC_OscConfig+0x538>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d030      	beq.n	80035d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d129      	bne.n	80035d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358e:	429a      	cmp	r2, r3
 8003590:	d122      	bne.n	80035d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003598:	4013      	ands	r3, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800359e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d119      	bne.n	80035d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	3b01      	subs	r3, #1
 80035b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d10f      	bne.n	80035d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d107      	bne.n	80035d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40023800 	.word	0x40023800

080035ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e042      	b.n	8003684 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fe f890 	bl	8001738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2224      	movs	r2, #36	@ 0x24
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800362e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fa09 	bl	8003a48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	@ 0x28
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	4613      	mov	r3, r2
 800369a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d175      	bne.n	8003798 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_UART_Transmit+0x2c>
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e06e      	b.n	800379a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2221      	movs	r2, #33	@ 0x21
 80036c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ca:	f7fe fa67 	bl	8001b9c <HAL_GetTick>
 80036ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	88fa      	ldrh	r2, [r7, #6]
 80036d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	88fa      	ldrh	r2, [r7, #6]
 80036da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e4:	d108      	bne.n	80036f8 <HAL_UART_Transmit+0x6c>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d104      	bne.n	80036f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	e003      	b.n	8003700 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003700:	e02e      	b.n	8003760 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2200      	movs	r2, #0
 800370a:	2180      	movs	r1, #128	@ 0x80
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f8df 	bl	80038d0 <UART_WaitOnFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e03a      	b.n	800379a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10b      	bne.n	8003742 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003738:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	3302      	adds	r3, #2
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	e007      	b.n	8003752 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	781a      	ldrb	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	3301      	adds	r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1cb      	bne.n	8003702 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2200      	movs	r2, #0
 8003772:	2140      	movs	r1, #64	@ 0x40
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f8ab 	bl	80038d0 <UART_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e006      	b.n	800379a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	e000      	b.n	800379a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003798:	2302      	movs	r3, #2
  }
}
 800379a:	4618      	mov	r0, r3
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b08a      	sub	sp, #40	@ 0x28
 80037a6:	af02      	add	r7, sp, #8
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	603b      	str	r3, [r7, #0]
 80037ae:	4613      	mov	r3, r2
 80037b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b20      	cmp	r3, #32
 80037c0:	f040 8081 	bne.w	80038c6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <HAL_UART_Receive+0x2e>
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e079      	b.n	80038c8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2222      	movs	r2, #34	@ 0x22
 80037de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037e8:	f7fe f9d8 	bl	8001b9c <HAL_GetTick>
 80037ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	88fa      	ldrh	r2, [r7, #6]
 80037f2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	88fa      	ldrh	r2, [r7, #6]
 80037f8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003802:	d108      	bne.n	8003816 <HAL_UART_Receive+0x74>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d104      	bne.n	8003816 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800380c:	2300      	movs	r3, #0
 800380e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	61bb      	str	r3, [r7, #24]
 8003814:	e003      	b.n	800381e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800381e:	e047      	b.n	80038b0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2200      	movs	r2, #0
 8003828:	2120      	movs	r1, #32
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f850 	bl	80038d0 <UART_WaitOnFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e042      	b.n	80038c8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10c      	bne.n	8003862 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	b29b      	uxth	r3, r3
 8003850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003854:	b29a      	uxth	r2, r3
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	3302      	adds	r3, #2
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	e01f      	b.n	80038a2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800386a:	d007      	beq.n	800387c <HAL_UART_Receive+0xda>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10a      	bne.n	800388a <HAL_UART_Receive+0xe8>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	b2da      	uxtb	r2, r3
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	e008      	b.n	800389c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003896:	b2da      	uxtb	r2, r3
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	3301      	adds	r3, #1
 80038a0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1b2      	bne.n	8003820 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e000      	b.n	80038c8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80038c6:	2302      	movs	r3, #2
  }
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3720      	adds	r7, #32
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	4613      	mov	r3, r2
 80038de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e0:	e03b      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e8:	d037      	beq.n	800395a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ea:	f7fe f957 	bl	8001b9c <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	6a3a      	ldr	r2, [r7, #32]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d302      	bcc.n	8003900 <UART_WaitOnFlagUntilTimeout+0x30>
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e03a      	b.n	800397a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d023      	beq.n	800395a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b80      	cmp	r3, #128	@ 0x80
 8003916:	d020      	beq.n	800395a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b40      	cmp	r3, #64	@ 0x40
 800391c:	d01d      	beq.n	800395a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b08      	cmp	r3, #8
 800392a:	d116      	bne.n	800395a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f81d 	bl	8003982 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2208      	movs	r2, #8
 800394c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e00f      	b.n	800397a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4013      	ands	r3, r2
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	429a      	cmp	r2, r3
 8003968:	bf0c      	ite	eq
 800396a:	2301      	moveq	r3, #1
 800396c:	2300      	movne	r3, #0
 800396e:	b2db      	uxtb	r3, r3
 8003970:	461a      	mov	r2, r3
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	429a      	cmp	r2, r3
 8003976:	d0b4      	beq.n	80038e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003982:	b480      	push	{r7}
 8003984:	b095      	sub	sp, #84	@ 0x54
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	330c      	adds	r3, #12
 8003990:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003994:	e853 3f00 	ldrex	r3, [r3]
 8003998:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800399a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	330c      	adds	r3, #12
 80039a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80039ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039b2:	e841 2300 	strex	r3, r2, [r1]
 80039b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e5      	bne.n	800398a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3314      	adds	r3, #20
 80039c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3314      	adds	r3, #20
 80039dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e5      	bne.n	80039be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d119      	bne.n	8003a2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	330c      	adds	r3, #12
 8003a00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f023 0310 	bic.w	r3, r3, #16
 8003a10:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	330c      	adds	r3, #12
 8003a18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a1a:	61ba      	str	r2, [r7, #24]
 8003a1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	6979      	ldr	r1, [r7, #20]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	613b      	str	r3, [r7, #16]
   return(result);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e5      	bne.n	80039fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a3c:	bf00      	nop
 8003a3e:	3754      	adds	r7, #84	@ 0x54
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a4c:	b0c0      	sub	sp, #256	@ 0x100
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a64:	68d9      	ldr	r1, [r3, #12]
 8003a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	ea40 0301 	orr.w	r3, r0, r1
 8003a70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003aa0:	f021 010c 	bic.w	r1, r1, #12
 8003aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac2:	6999      	ldr	r1, [r3, #24]
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	ea40 0301 	orr.w	r3, r0, r1
 8003ace:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4b8f      	ldr	r3, [pc, #572]	@ (8003d14 <UART_SetConfig+0x2cc>)
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d005      	beq.n	8003ae8 <UART_SetConfig+0xa0>
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	4b8d      	ldr	r3, [pc, #564]	@ (8003d18 <UART_SetConfig+0x2d0>)
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d104      	bne.n	8003af2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ae8:	f7ff f82c 	bl	8002b44 <HAL_RCC_GetPCLK2Freq>
 8003aec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003af0:	e003      	b.n	8003afa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003af2:	f7ff f813 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8003af6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b04:	f040 810c 	bne.w	8003d20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b1a:	4622      	mov	r2, r4
 8003b1c:	462b      	mov	r3, r5
 8003b1e:	1891      	adds	r1, r2, r2
 8003b20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b22:	415b      	adcs	r3, r3
 8003b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	eb12 0801 	adds.w	r8, r2, r1
 8003b30:	4629      	mov	r1, r5
 8003b32:	eb43 0901 	adc.w	r9, r3, r1
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b4a:	4690      	mov	r8, r2
 8003b4c:	4699      	mov	r9, r3
 8003b4e:	4623      	mov	r3, r4
 8003b50:	eb18 0303 	adds.w	r3, r8, r3
 8003b54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b58:	462b      	mov	r3, r5
 8003b5a:	eb49 0303 	adc.w	r3, r9, r3
 8003b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b76:	460b      	mov	r3, r1
 8003b78:	18db      	adds	r3, r3, r3
 8003b7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	eb42 0303 	adc.w	r3, r2, r3
 8003b82:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b8c:	f7fc fb98 	bl	80002c0 <__aeabi_uldivmod>
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4b61      	ldr	r3, [pc, #388]	@ (8003d1c <UART_SetConfig+0x2d4>)
 8003b96:	fba3 2302 	umull	r2, r3, r3, r2
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	011c      	lsls	r4, r3, #4
 8003b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ba8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003bac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003bb0:	4642      	mov	r2, r8
 8003bb2:	464b      	mov	r3, r9
 8003bb4:	1891      	adds	r1, r2, r2
 8003bb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003bb8:	415b      	adcs	r3, r3
 8003bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003bc0:	4641      	mov	r1, r8
 8003bc2:	eb12 0a01 	adds.w	sl, r2, r1
 8003bc6:	4649      	mov	r1, r9
 8003bc8:	eb43 0b01 	adc.w	fp, r3, r1
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003be0:	4692      	mov	sl, r2
 8003be2:	469b      	mov	fp, r3
 8003be4:	4643      	mov	r3, r8
 8003be6:	eb1a 0303 	adds.w	r3, sl, r3
 8003bea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bee:	464b      	mov	r3, r9
 8003bf0:	eb4b 0303 	adc.w	r3, fp, r3
 8003bf4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	18db      	adds	r3, r3, r3
 8003c10:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c12:	4613      	mov	r3, r2
 8003c14:	eb42 0303 	adc.w	r3, r2, r3
 8003c18:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c22:	f7fc fb4d 	bl	80002c0 <__aeabi_uldivmod>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d1c <UART_SetConfig+0x2d4>)
 8003c2e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	2264      	movs	r2, #100	@ 0x64
 8003c36:	fb02 f303 	mul.w	r3, r2, r3
 8003c3a:	1acb      	subs	r3, r1, r3
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c42:	4b36      	ldr	r3, [pc, #216]	@ (8003d1c <UART_SetConfig+0x2d4>)
 8003c44:	fba3 2302 	umull	r2, r3, r3, r2
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c50:	441c      	add	r4, r3
 8003c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c64:	4642      	mov	r2, r8
 8003c66:	464b      	mov	r3, r9
 8003c68:	1891      	adds	r1, r2, r2
 8003c6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c6c:	415b      	adcs	r3, r3
 8003c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c74:	4641      	mov	r1, r8
 8003c76:	1851      	adds	r1, r2, r1
 8003c78:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	414b      	adcs	r3, r1
 8003c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c8c:	4659      	mov	r1, fp
 8003c8e:	00cb      	lsls	r3, r1, #3
 8003c90:	4651      	mov	r1, sl
 8003c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c96:	4651      	mov	r1, sl
 8003c98:	00ca      	lsls	r2, r1, #3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	4642      	mov	r2, r8
 8003ca2:	189b      	adds	r3, r3, r2
 8003ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ca8:	464b      	mov	r3, r9
 8003caa:	460a      	mov	r2, r1
 8003cac:	eb42 0303 	adc.w	r3, r2, r3
 8003cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003cc0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003cc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003cc8:	460b      	mov	r3, r1
 8003cca:	18db      	adds	r3, r3, r3
 8003ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cce:	4613      	mov	r3, r2
 8003cd0:	eb42 0303 	adc.w	r3, r2, r3
 8003cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003cde:	f7fc faef 	bl	80002c0 <__aeabi_uldivmod>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d1c <UART_SetConfig+0x2d4>)
 8003ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	2164      	movs	r1, #100	@ 0x64
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	3332      	adds	r3, #50	@ 0x32
 8003cfa:	4a08      	ldr	r2, [pc, #32]	@ (8003d1c <UART_SetConfig+0x2d4>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	f003 0207 	and.w	r2, r3, #7
 8003d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4422      	add	r2, r4
 8003d0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d10:	e106      	b.n	8003f20 <UART_SetConfig+0x4d8>
 8003d12:	bf00      	nop
 8003d14:	40011000 	.word	0x40011000
 8003d18:	40011400 	.word	0x40011400
 8003d1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d24:	2200      	movs	r2, #0
 8003d26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d32:	4642      	mov	r2, r8
 8003d34:	464b      	mov	r3, r9
 8003d36:	1891      	adds	r1, r2, r2
 8003d38:	6239      	str	r1, [r7, #32]
 8003d3a:	415b      	adcs	r3, r3
 8003d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d42:	4641      	mov	r1, r8
 8003d44:	1854      	adds	r4, r2, r1
 8003d46:	4649      	mov	r1, r9
 8003d48:	eb43 0501 	adc.w	r5, r3, r1
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	00eb      	lsls	r3, r5, #3
 8003d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d5a:	00e2      	lsls	r2, r4, #3
 8003d5c:	4614      	mov	r4, r2
 8003d5e:	461d      	mov	r5, r3
 8003d60:	4643      	mov	r3, r8
 8003d62:	18e3      	adds	r3, r4, r3
 8003d64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d68:	464b      	mov	r3, r9
 8003d6a:	eb45 0303 	adc.w	r3, r5, r3
 8003d6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d8e:	4629      	mov	r1, r5
 8003d90:	008b      	lsls	r3, r1, #2
 8003d92:	4621      	mov	r1, r4
 8003d94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d98:	4621      	mov	r1, r4
 8003d9a:	008a      	lsls	r2, r1, #2
 8003d9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003da0:	f7fc fa8e 	bl	80002c0 <__aeabi_uldivmod>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4b60      	ldr	r3, [pc, #384]	@ (8003f2c <UART_SetConfig+0x4e4>)
 8003daa:	fba3 2302 	umull	r2, r3, r3, r2
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	011c      	lsls	r4, r3, #4
 8003db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003db6:	2200      	movs	r2, #0
 8003db8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003dbc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003dc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003dc4:	4642      	mov	r2, r8
 8003dc6:	464b      	mov	r3, r9
 8003dc8:	1891      	adds	r1, r2, r2
 8003dca:	61b9      	str	r1, [r7, #24]
 8003dcc:	415b      	adcs	r3, r3
 8003dce:	61fb      	str	r3, [r7, #28]
 8003dd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dd4:	4641      	mov	r1, r8
 8003dd6:	1851      	adds	r1, r2, r1
 8003dd8:	6139      	str	r1, [r7, #16]
 8003dda:	4649      	mov	r1, r9
 8003ddc:	414b      	adcs	r3, r1
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dec:	4659      	mov	r1, fp
 8003dee:	00cb      	lsls	r3, r1, #3
 8003df0:	4651      	mov	r1, sl
 8003df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003df6:	4651      	mov	r1, sl
 8003df8:	00ca      	lsls	r2, r1, #3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	4642      	mov	r2, r8
 8003e02:	189b      	adds	r3, r3, r2
 8003e04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e08:	464b      	mov	r3, r9
 8003e0a:	460a      	mov	r2, r1
 8003e0c:	eb42 0303 	adc.w	r3, r2, r3
 8003e10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e2c:	4649      	mov	r1, r9
 8003e2e:	008b      	lsls	r3, r1, #2
 8003e30:	4641      	mov	r1, r8
 8003e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e36:	4641      	mov	r1, r8
 8003e38:	008a      	lsls	r2, r1, #2
 8003e3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e3e:	f7fc fa3f 	bl	80002c0 <__aeabi_uldivmod>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	4b38      	ldr	r3, [pc, #224]	@ (8003f2c <UART_SetConfig+0x4e4>)
 8003e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	2264      	movs	r2, #100	@ 0x64
 8003e52:	fb02 f303 	mul.w	r3, r2, r3
 8003e56:	1acb      	subs	r3, r1, r3
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	3332      	adds	r3, #50	@ 0x32
 8003e5c:	4a33      	ldr	r2, [pc, #204]	@ (8003f2c <UART_SetConfig+0x4e4>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e68:	441c      	add	r4, r3
 8003e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e6e:	2200      	movs	r2, #0
 8003e70:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e72:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e78:	4642      	mov	r2, r8
 8003e7a:	464b      	mov	r3, r9
 8003e7c:	1891      	adds	r1, r2, r2
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	415b      	adcs	r3, r3
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e88:	4641      	mov	r1, r8
 8003e8a:	1851      	adds	r1, r2, r1
 8003e8c:	6039      	str	r1, [r7, #0]
 8003e8e:	4649      	mov	r1, r9
 8003e90:	414b      	adcs	r3, r1
 8003e92:	607b      	str	r3, [r7, #4]
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ea0:	4659      	mov	r1, fp
 8003ea2:	00cb      	lsls	r3, r1, #3
 8003ea4:	4651      	mov	r1, sl
 8003ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eaa:	4651      	mov	r1, sl
 8003eac:	00ca      	lsls	r2, r1, #3
 8003eae:	4610      	mov	r0, r2
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	4642      	mov	r2, r8
 8003eb6:	189b      	adds	r3, r3, r2
 8003eb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003eba:	464b      	mov	r3, r9
 8003ebc:	460a      	mov	r2, r1
 8003ebe:	eb42 0303 	adc.w	r3, r2, r3
 8003ec2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ece:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003edc:	4649      	mov	r1, r9
 8003ede:	008b      	lsls	r3, r1, #2
 8003ee0:	4641      	mov	r1, r8
 8003ee2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ee6:	4641      	mov	r1, r8
 8003ee8:	008a      	lsls	r2, r1, #2
 8003eea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003eee:	f7fc f9e7 	bl	80002c0 <__aeabi_uldivmod>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f2c <UART_SetConfig+0x4e4>)
 8003ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	2164      	movs	r1, #100	@ 0x64
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	3332      	adds	r3, #50	@ 0x32
 8003f0a:	4a08      	ldr	r2, [pc, #32]	@ (8003f2c <UART_SetConfig+0x4e4>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	f003 020f 	and.w	r2, r3, #15
 8003f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4422      	add	r2, r4
 8003f1e:	609a      	str	r2, [r3, #8]
}
 8003f20:	bf00      	nop
 8003f22:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f26:	46bd      	mov	sp, r7
 8003f28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f2c:	51eb851f 	.word	0x51eb851f

08003f30 <_vsiprintf_r>:
 8003f30:	b510      	push	{r4, lr}
 8003f32:	b09a      	sub	sp, #104	@ 0x68
 8003f34:	2400      	movs	r4, #0
 8003f36:	9100      	str	r1, [sp, #0]
 8003f38:	9104      	str	r1, [sp, #16]
 8003f3a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003f3e:	9105      	str	r1, [sp, #20]
 8003f40:	9102      	str	r1, [sp, #8]
 8003f42:	4905      	ldr	r1, [pc, #20]	@ (8003f58 <_vsiprintf_r+0x28>)
 8003f44:	9103      	str	r1, [sp, #12]
 8003f46:	4669      	mov	r1, sp
 8003f48:	9419      	str	r4, [sp, #100]	@ 0x64
 8003f4a:	f000 f999 	bl	8004280 <_svfiprintf_r>
 8003f4e:	9b00      	ldr	r3, [sp, #0]
 8003f50:	701c      	strb	r4, [r3, #0]
 8003f52:	b01a      	add	sp, #104	@ 0x68
 8003f54:	bd10      	pop	{r4, pc}
 8003f56:	bf00      	nop
 8003f58:	ffff0208 	.word	0xffff0208

08003f5c <vsiprintf>:
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	460a      	mov	r2, r1
 8003f60:	4601      	mov	r1, r0
 8003f62:	4802      	ldr	r0, [pc, #8]	@ (8003f6c <vsiprintf+0x10>)
 8003f64:	6800      	ldr	r0, [r0, #0]
 8003f66:	f7ff bfe3 	b.w	8003f30 <_vsiprintf_r>
 8003f6a:	bf00      	nop
 8003f6c:	20000014 	.word	0x20000014

08003f70 <memset>:
 8003f70:	4402      	add	r2, r0
 8003f72:	4603      	mov	r3, r0
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d100      	bne.n	8003f7a <memset+0xa>
 8003f78:	4770      	bx	lr
 8003f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f7e:	e7f9      	b.n	8003f74 <memset+0x4>

08003f80 <__errno>:
 8003f80:	4b01      	ldr	r3, [pc, #4]	@ (8003f88 <__errno+0x8>)
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	20000014 	.word	0x20000014

08003f8c <__libc_init_array>:
 8003f8c:	b570      	push	{r4, r5, r6, lr}
 8003f8e:	4d0d      	ldr	r5, [pc, #52]	@ (8003fc4 <__libc_init_array+0x38>)
 8003f90:	4c0d      	ldr	r4, [pc, #52]	@ (8003fc8 <__libc_init_array+0x3c>)
 8003f92:	1b64      	subs	r4, r4, r5
 8003f94:	10a4      	asrs	r4, r4, #2
 8003f96:	2600      	movs	r6, #0
 8003f98:	42a6      	cmp	r6, r4
 8003f9a:	d109      	bne.n	8003fb0 <__libc_init_array+0x24>
 8003f9c:	4d0b      	ldr	r5, [pc, #44]	@ (8003fcc <__libc_init_array+0x40>)
 8003f9e:	4c0c      	ldr	r4, [pc, #48]	@ (8003fd0 <__libc_init_array+0x44>)
 8003fa0:	f000 fc64 	bl	800486c <_init>
 8003fa4:	1b64      	subs	r4, r4, r5
 8003fa6:	10a4      	asrs	r4, r4, #2
 8003fa8:	2600      	movs	r6, #0
 8003faa:	42a6      	cmp	r6, r4
 8003fac:	d105      	bne.n	8003fba <__libc_init_array+0x2e>
 8003fae:	bd70      	pop	{r4, r5, r6, pc}
 8003fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb4:	4798      	blx	r3
 8003fb6:	3601      	adds	r6, #1
 8003fb8:	e7ee      	b.n	8003f98 <__libc_init_array+0xc>
 8003fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fbe:	4798      	blx	r3
 8003fc0:	3601      	adds	r6, #1
 8003fc2:	e7f2      	b.n	8003faa <__libc_init_array+0x1e>
 8003fc4:	08004dfc 	.word	0x08004dfc
 8003fc8:	08004dfc 	.word	0x08004dfc
 8003fcc:	08004dfc 	.word	0x08004dfc
 8003fd0:	08004e00 	.word	0x08004e00

08003fd4 <__retarget_lock_acquire_recursive>:
 8003fd4:	4770      	bx	lr

08003fd6 <__retarget_lock_release_recursive>:
 8003fd6:	4770      	bx	lr

08003fd8 <_free_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	4605      	mov	r5, r0
 8003fdc:	2900      	cmp	r1, #0
 8003fde:	d041      	beq.n	8004064 <_free_r+0x8c>
 8003fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fe4:	1f0c      	subs	r4, r1, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	bfb8      	it	lt
 8003fea:	18e4      	addlt	r4, r4, r3
 8003fec:	f000 f8e0 	bl	80041b0 <__malloc_lock>
 8003ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8004068 <_free_r+0x90>)
 8003ff2:	6813      	ldr	r3, [r2, #0]
 8003ff4:	b933      	cbnz	r3, 8004004 <_free_r+0x2c>
 8003ff6:	6063      	str	r3, [r4, #4]
 8003ff8:	6014      	str	r4, [r2, #0]
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004000:	f000 b8dc 	b.w	80041bc <__malloc_unlock>
 8004004:	42a3      	cmp	r3, r4
 8004006:	d908      	bls.n	800401a <_free_r+0x42>
 8004008:	6820      	ldr	r0, [r4, #0]
 800400a:	1821      	adds	r1, r4, r0
 800400c:	428b      	cmp	r3, r1
 800400e:	bf01      	itttt	eq
 8004010:	6819      	ldreq	r1, [r3, #0]
 8004012:	685b      	ldreq	r3, [r3, #4]
 8004014:	1809      	addeq	r1, r1, r0
 8004016:	6021      	streq	r1, [r4, #0]
 8004018:	e7ed      	b.n	8003ff6 <_free_r+0x1e>
 800401a:	461a      	mov	r2, r3
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	b10b      	cbz	r3, 8004024 <_free_r+0x4c>
 8004020:	42a3      	cmp	r3, r4
 8004022:	d9fa      	bls.n	800401a <_free_r+0x42>
 8004024:	6811      	ldr	r1, [r2, #0]
 8004026:	1850      	adds	r0, r2, r1
 8004028:	42a0      	cmp	r0, r4
 800402a:	d10b      	bne.n	8004044 <_free_r+0x6c>
 800402c:	6820      	ldr	r0, [r4, #0]
 800402e:	4401      	add	r1, r0
 8004030:	1850      	adds	r0, r2, r1
 8004032:	4283      	cmp	r3, r0
 8004034:	6011      	str	r1, [r2, #0]
 8004036:	d1e0      	bne.n	8003ffa <_free_r+0x22>
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	6053      	str	r3, [r2, #4]
 800403e:	4408      	add	r0, r1
 8004040:	6010      	str	r0, [r2, #0]
 8004042:	e7da      	b.n	8003ffa <_free_r+0x22>
 8004044:	d902      	bls.n	800404c <_free_r+0x74>
 8004046:	230c      	movs	r3, #12
 8004048:	602b      	str	r3, [r5, #0]
 800404a:	e7d6      	b.n	8003ffa <_free_r+0x22>
 800404c:	6820      	ldr	r0, [r4, #0]
 800404e:	1821      	adds	r1, r4, r0
 8004050:	428b      	cmp	r3, r1
 8004052:	bf04      	itt	eq
 8004054:	6819      	ldreq	r1, [r3, #0]
 8004056:	685b      	ldreq	r3, [r3, #4]
 8004058:	6063      	str	r3, [r4, #4]
 800405a:	bf04      	itt	eq
 800405c:	1809      	addeq	r1, r1, r0
 800405e:	6021      	streq	r1, [r4, #0]
 8004060:	6054      	str	r4, [r2, #4]
 8004062:	e7ca      	b.n	8003ffa <_free_r+0x22>
 8004064:	bd38      	pop	{r3, r4, r5, pc}
 8004066:	bf00      	nop
 8004068:	20000398 	.word	0x20000398

0800406c <sbrk_aligned>:
 800406c:	b570      	push	{r4, r5, r6, lr}
 800406e:	4e0f      	ldr	r6, [pc, #60]	@ (80040ac <sbrk_aligned+0x40>)
 8004070:	460c      	mov	r4, r1
 8004072:	6831      	ldr	r1, [r6, #0]
 8004074:	4605      	mov	r5, r0
 8004076:	b911      	cbnz	r1, 800407e <sbrk_aligned+0x12>
 8004078:	f000 fba4 	bl	80047c4 <_sbrk_r>
 800407c:	6030      	str	r0, [r6, #0]
 800407e:	4621      	mov	r1, r4
 8004080:	4628      	mov	r0, r5
 8004082:	f000 fb9f 	bl	80047c4 <_sbrk_r>
 8004086:	1c43      	adds	r3, r0, #1
 8004088:	d103      	bne.n	8004092 <sbrk_aligned+0x26>
 800408a:	f04f 34ff 	mov.w	r4, #4294967295
 800408e:	4620      	mov	r0, r4
 8004090:	bd70      	pop	{r4, r5, r6, pc}
 8004092:	1cc4      	adds	r4, r0, #3
 8004094:	f024 0403 	bic.w	r4, r4, #3
 8004098:	42a0      	cmp	r0, r4
 800409a:	d0f8      	beq.n	800408e <sbrk_aligned+0x22>
 800409c:	1a21      	subs	r1, r4, r0
 800409e:	4628      	mov	r0, r5
 80040a0:	f000 fb90 	bl	80047c4 <_sbrk_r>
 80040a4:	3001      	adds	r0, #1
 80040a6:	d1f2      	bne.n	800408e <sbrk_aligned+0x22>
 80040a8:	e7ef      	b.n	800408a <sbrk_aligned+0x1e>
 80040aa:	bf00      	nop
 80040ac:	20000394 	.word	0x20000394

080040b0 <_malloc_r>:
 80040b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040b4:	1ccd      	adds	r5, r1, #3
 80040b6:	f025 0503 	bic.w	r5, r5, #3
 80040ba:	3508      	adds	r5, #8
 80040bc:	2d0c      	cmp	r5, #12
 80040be:	bf38      	it	cc
 80040c0:	250c      	movcc	r5, #12
 80040c2:	2d00      	cmp	r5, #0
 80040c4:	4606      	mov	r6, r0
 80040c6:	db01      	blt.n	80040cc <_malloc_r+0x1c>
 80040c8:	42a9      	cmp	r1, r5
 80040ca:	d904      	bls.n	80040d6 <_malloc_r+0x26>
 80040cc:	230c      	movs	r3, #12
 80040ce:	6033      	str	r3, [r6, #0]
 80040d0:	2000      	movs	r0, #0
 80040d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80041ac <_malloc_r+0xfc>
 80040da:	f000 f869 	bl	80041b0 <__malloc_lock>
 80040de:	f8d8 3000 	ldr.w	r3, [r8]
 80040e2:	461c      	mov	r4, r3
 80040e4:	bb44      	cbnz	r4, 8004138 <_malloc_r+0x88>
 80040e6:	4629      	mov	r1, r5
 80040e8:	4630      	mov	r0, r6
 80040ea:	f7ff ffbf 	bl	800406c <sbrk_aligned>
 80040ee:	1c43      	adds	r3, r0, #1
 80040f0:	4604      	mov	r4, r0
 80040f2:	d158      	bne.n	80041a6 <_malloc_r+0xf6>
 80040f4:	f8d8 4000 	ldr.w	r4, [r8]
 80040f8:	4627      	mov	r7, r4
 80040fa:	2f00      	cmp	r7, #0
 80040fc:	d143      	bne.n	8004186 <_malloc_r+0xd6>
 80040fe:	2c00      	cmp	r4, #0
 8004100:	d04b      	beq.n	800419a <_malloc_r+0xea>
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	4639      	mov	r1, r7
 8004106:	4630      	mov	r0, r6
 8004108:	eb04 0903 	add.w	r9, r4, r3
 800410c:	f000 fb5a 	bl	80047c4 <_sbrk_r>
 8004110:	4581      	cmp	r9, r0
 8004112:	d142      	bne.n	800419a <_malloc_r+0xea>
 8004114:	6821      	ldr	r1, [r4, #0]
 8004116:	1a6d      	subs	r5, r5, r1
 8004118:	4629      	mov	r1, r5
 800411a:	4630      	mov	r0, r6
 800411c:	f7ff ffa6 	bl	800406c <sbrk_aligned>
 8004120:	3001      	adds	r0, #1
 8004122:	d03a      	beq.n	800419a <_malloc_r+0xea>
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	442b      	add	r3, r5
 8004128:	6023      	str	r3, [r4, #0]
 800412a:	f8d8 3000 	ldr.w	r3, [r8]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	bb62      	cbnz	r2, 800418c <_malloc_r+0xdc>
 8004132:	f8c8 7000 	str.w	r7, [r8]
 8004136:	e00f      	b.n	8004158 <_malloc_r+0xa8>
 8004138:	6822      	ldr	r2, [r4, #0]
 800413a:	1b52      	subs	r2, r2, r5
 800413c:	d420      	bmi.n	8004180 <_malloc_r+0xd0>
 800413e:	2a0b      	cmp	r2, #11
 8004140:	d917      	bls.n	8004172 <_malloc_r+0xc2>
 8004142:	1961      	adds	r1, r4, r5
 8004144:	42a3      	cmp	r3, r4
 8004146:	6025      	str	r5, [r4, #0]
 8004148:	bf18      	it	ne
 800414a:	6059      	strne	r1, [r3, #4]
 800414c:	6863      	ldr	r3, [r4, #4]
 800414e:	bf08      	it	eq
 8004150:	f8c8 1000 	streq.w	r1, [r8]
 8004154:	5162      	str	r2, [r4, r5]
 8004156:	604b      	str	r3, [r1, #4]
 8004158:	4630      	mov	r0, r6
 800415a:	f000 f82f 	bl	80041bc <__malloc_unlock>
 800415e:	f104 000b 	add.w	r0, r4, #11
 8004162:	1d23      	adds	r3, r4, #4
 8004164:	f020 0007 	bic.w	r0, r0, #7
 8004168:	1ac2      	subs	r2, r0, r3
 800416a:	bf1c      	itt	ne
 800416c:	1a1b      	subne	r3, r3, r0
 800416e:	50a3      	strne	r3, [r4, r2]
 8004170:	e7af      	b.n	80040d2 <_malloc_r+0x22>
 8004172:	6862      	ldr	r2, [r4, #4]
 8004174:	42a3      	cmp	r3, r4
 8004176:	bf0c      	ite	eq
 8004178:	f8c8 2000 	streq.w	r2, [r8]
 800417c:	605a      	strne	r2, [r3, #4]
 800417e:	e7eb      	b.n	8004158 <_malloc_r+0xa8>
 8004180:	4623      	mov	r3, r4
 8004182:	6864      	ldr	r4, [r4, #4]
 8004184:	e7ae      	b.n	80040e4 <_malloc_r+0x34>
 8004186:	463c      	mov	r4, r7
 8004188:	687f      	ldr	r7, [r7, #4]
 800418a:	e7b6      	b.n	80040fa <_malloc_r+0x4a>
 800418c:	461a      	mov	r2, r3
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	42a3      	cmp	r3, r4
 8004192:	d1fb      	bne.n	800418c <_malloc_r+0xdc>
 8004194:	2300      	movs	r3, #0
 8004196:	6053      	str	r3, [r2, #4]
 8004198:	e7de      	b.n	8004158 <_malloc_r+0xa8>
 800419a:	230c      	movs	r3, #12
 800419c:	6033      	str	r3, [r6, #0]
 800419e:	4630      	mov	r0, r6
 80041a0:	f000 f80c 	bl	80041bc <__malloc_unlock>
 80041a4:	e794      	b.n	80040d0 <_malloc_r+0x20>
 80041a6:	6005      	str	r5, [r0, #0]
 80041a8:	e7d6      	b.n	8004158 <_malloc_r+0xa8>
 80041aa:	bf00      	nop
 80041ac:	20000398 	.word	0x20000398

080041b0 <__malloc_lock>:
 80041b0:	4801      	ldr	r0, [pc, #4]	@ (80041b8 <__malloc_lock+0x8>)
 80041b2:	f7ff bf0f 	b.w	8003fd4 <__retarget_lock_acquire_recursive>
 80041b6:	bf00      	nop
 80041b8:	20000390 	.word	0x20000390

080041bc <__malloc_unlock>:
 80041bc:	4801      	ldr	r0, [pc, #4]	@ (80041c4 <__malloc_unlock+0x8>)
 80041be:	f7ff bf0a 	b.w	8003fd6 <__retarget_lock_release_recursive>
 80041c2:	bf00      	nop
 80041c4:	20000390 	.word	0x20000390

080041c8 <__ssputs_r>:
 80041c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041cc:	688e      	ldr	r6, [r1, #8]
 80041ce:	461f      	mov	r7, r3
 80041d0:	42be      	cmp	r6, r7
 80041d2:	680b      	ldr	r3, [r1, #0]
 80041d4:	4682      	mov	sl, r0
 80041d6:	460c      	mov	r4, r1
 80041d8:	4690      	mov	r8, r2
 80041da:	d82d      	bhi.n	8004238 <__ssputs_r+0x70>
 80041dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80041e4:	d026      	beq.n	8004234 <__ssputs_r+0x6c>
 80041e6:	6965      	ldr	r5, [r4, #20]
 80041e8:	6909      	ldr	r1, [r1, #16]
 80041ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041ee:	eba3 0901 	sub.w	r9, r3, r1
 80041f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041f6:	1c7b      	adds	r3, r7, #1
 80041f8:	444b      	add	r3, r9
 80041fa:	106d      	asrs	r5, r5, #1
 80041fc:	429d      	cmp	r5, r3
 80041fe:	bf38      	it	cc
 8004200:	461d      	movcc	r5, r3
 8004202:	0553      	lsls	r3, r2, #21
 8004204:	d527      	bpl.n	8004256 <__ssputs_r+0x8e>
 8004206:	4629      	mov	r1, r5
 8004208:	f7ff ff52 	bl	80040b0 <_malloc_r>
 800420c:	4606      	mov	r6, r0
 800420e:	b360      	cbz	r0, 800426a <__ssputs_r+0xa2>
 8004210:	6921      	ldr	r1, [r4, #16]
 8004212:	464a      	mov	r2, r9
 8004214:	f000 fae6 	bl	80047e4 <memcpy>
 8004218:	89a3      	ldrh	r3, [r4, #12]
 800421a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800421e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004222:	81a3      	strh	r3, [r4, #12]
 8004224:	6126      	str	r6, [r4, #16]
 8004226:	6165      	str	r5, [r4, #20]
 8004228:	444e      	add	r6, r9
 800422a:	eba5 0509 	sub.w	r5, r5, r9
 800422e:	6026      	str	r6, [r4, #0]
 8004230:	60a5      	str	r5, [r4, #8]
 8004232:	463e      	mov	r6, r7
 8004234:	42be      	cmp	r6, r7
 8004236:	d900      	bls.n	800423a <__ssputs_r+0x72>
 8004238:	463e      	mov	r6, r7
 800423a:	6820      	ldr	r0, [r4, #0]
 800423c:	4632      	mov	r2, r6
 800423e:	4641      	mov	r1, r8
 8004240:	f000 faa6 	bl	8004790 <memmove>
 8004244:	68a3      	ldr	r3, [r4, #8]
 8004246:	1b9b      	subs	r3, r3, r6
 8004248:	60a3      	str	r3, [r4, #8]
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	4433      	add	r3, r6
 800424e:	6023      	str	r3, [r4, #0]
 8004250:	2000      	movs	r0, #0
 8004252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004256:	462a      	mov	r2, r5
 8004258:	f000 fad2 	bl	8004800 <_realloc_r>
 800425c:	4606      	mov	r6, r0
 800425e:	2800      	cmp	r0, #0
 8004260:	d1e0      	bne.n	8004224 <__ssputs_r+0x5c>
 8004262:	6921      	ldr	r1, [r4, #16]
 8004264:	4650      	mov	r0, sl
 8004266:	f7ff feb7 	bl	8003fd8 <_free_r>
 800426a:	230c      	movs	r3, #12
 800426c:	f8ca 3000 	str.w	r3, [sl]
 8004270:	89a3      	ldrh	r3, [r4, #12]
 8004272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004276:	81a3      	strh	r3, [r4, #12]
 8004278:	f04f 30ff 	mov.w	r0, #4294967295
 800427c:	e7e9      	b.n	8004252 <__ssputs_r+0x8a>
	...

08004280 <_svfiprintf_r>:
 8004280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004284:	4698      	mov	r8, r3
 8004286:	898b      	ldrh	r3, [r1, #12]
 8004288:	061b      	lsls	r3, r3, #24
 800428a:	b09d      	sub	sp, #116	@ 0x74
 800428c:	4607      	mov	r7, r0
 800428e:	460d      	mov	r5, r1
 8004290:	4614      	mov	r4, r2
 8004292:	d510      	bpl.n	80042b6 <_svfiprintf_r+0x36>
 8004294:	690b      	ldr	r3, [r1, #16]
 8004296:	b973      	cbnz	r3, 80042b6 <_svfiprintf_r+0x36>
 8004298:	2140      	movs	r1, #64	@ 0x40
 800429a:	f7ff ff09 	bl	80040b0 <_malloc_r>
 800429e:	6028      	str	r0, [r5, #0]
 80042a0:	6128      	str	r0, [r5, #16]
 80042a2:	b930      	cbnz	r0, 80042b2 <_svfiprintf_r+0x32>
 80042a4:	230c      	movs	r3, #12
 80042a6:	603b      	str	r3, [r7, #0]
 80042a8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ac:	b01d      	add	sp, #116	@ 0x74
 80042ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b2:	2340      	movs	r3, #64	@ 0x40
 80042b4:	616b      	str	r3, [r5, #20]
 80042b6:	2300      	movs	r3, #0
 80042b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80042ba:	2320      	movs	r3, #32
 80042bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80042c4:	2330      	movs	r3, #48	@ 0x30
 80042c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004464 <_svfiprintf_r+0x1e4>
 80042ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042ce:	f04f 0901 	mov.w	r9, #1
 80042d2:	4623      	mov	r3, r4
 80042d4:	469a      	mov	sl, r3
 80042d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042da:	b10a      	cbz	r2, 80042e0 <_svfiprintf_r+0x60>
 80042dc:	2a25      	cmp	r2, #37	@ 0x25
 80042de:	d1f9      	bne.n	80042d4 <_svfiprintf_r+0x54>
 80042e0:	ebba 0b04 	subs.w	fp, sl, r4
 80042e4:	d00b      	beq.n	80042fe <_svfiprintf_r+0x7e>
 80042e6:	465b      	mov	r3, fp
 80042e8:	4622      	mov	r2, r4
 80042ea:	4629      	mov	r1, r5
 80042ec:	4638      	mov	r0, r7
 80042ee:	f7ff ff6b 	bl	80041c8 <__ssputs_r>
 80042f2:	3001      	adds	r0, #1
 80042f4:	f000 80a7 	beq.w	8004446 <_svfiprintf_r+0x1c6>
 80042f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042fa:	445a      	add	r2, fp
 80042fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80042fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 809f 	beq.w	8004446 <_svfiprintf_r+0x1c6>
 8004308:	2300      	movs	r3, #0
 800430a:	f04f 32ff 	mov.w	r2, #4294967295
 800430e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004312:	f10a 0a01 	add.w	sl, sl, #1
 8004316:	9304      	str	r3, [sp, #16]
 8004318:	9307      	str	r3, [sp, #28]
 800431a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800431e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004320:	4654      	mov	r4, sl
 8004322:	2205      	movs	r2, #5
 8004324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004328:	484e      	ldr	r0, [pc, #312]	@ (8004464 <_svfiprintf_r+0x1e4>)
 800432a:	f7fb ff79 	bl	8000220 <memchr>
 800432e:	9a04      	ldr	r2, [sp, #16]
 8004330:	b9d8      	cbnz	r0, 800436a <_svfiprintf_r+0xea>
 8004332:	06d0      	lsls	r0, r2, #27
 8004334:	bf44      	itt	mi
 8004336:	2320      	movmi	r3, #32
 8004338:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800433c:	0711      	lsls	r1, r2, #28
 800433e:	bf44      	itt	mi
 8004340:	232b      	movmi	r3, #43	@ 0x2b
 8004342:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004346:	f89a 3000 	ldrb.w	r3, [sl]
 800434a:	2b2a      	cmp	r3, #42	@ 0x2a
 800434c:	d015      	beq.n	800437a <_svfiprintf_r+0xfa>
 800434e:	9a07      	ldr	r2, [sp, #28]
 8004350:	4654      	mov	r4, sl
 8004352:	2000      	movs	r0, #0
 8004354:	f04f 0c0a 	mov.w	ip, #10
 8004358:	4621      	mov	r1, r4
 800435a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800435e:	3b30      	subs	r3, #48	@ 0x30
 8004360:	2b09      	cmp	r3, #9
 8004362:	d94b      	bls.n	80043fc <_svfiprintf_r+0x17c>
 8004364:	b1b0      	cbz	r0, 8004394 <_svfiprintf_r+0x114>
 8004366:	9207      	str	r2, [sp, #28]
 8004368:	e014      	b.n	8004394 <_svfiprintf_r+0x114>
 800436a:	eba0 0308 	sub.w	r3, r0, r8
 800436e:	fa09 f303 	lsl.w	r3, r9, r3
 8004372:	4313      	orrs	r3, r2
 8004374:	9304      	str	r3, [sp, #16]
 8004376:	46a2      	mov	sl, r4
 8004378:	e7d2      	b.n	8004320 <_svfiprintf_r+0xa0>
 800437a:	9b03      	ldr	r3, [sp, #12]
 800437c:	1d19      	adds	r1, r3, #4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	9103      	str	r1, [sp, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	bfbb      	ittet	lt
 8004386:	425b      	neglt	r3, r3
 8004388:	f042 0202 	orrlt.w	r2, r2, #2
 800438c:	9307      	strge	r3, [sp, #28]
 800438e:	9307      	strlt	r3, [sp, #28]
 8004390:	bfb8      	it	lt
 8004392:	9204      	strlt	r2, [sp, #16]
 8004394:	7823      	ldrb	r3, [r4, #0]
 8004396:	2b2e      	cmp	r3, #46	@ 0x2e
 8004398:	d10a      	bne.n	80043b0 <_svfiprintf_r+0x130>
 800439a:	7863      	ldrb	r3, [r4, #1]
 800439c:	2b2a      	cmp	r3, #42	@ 0x2a
 800439e:	d132      	bne.n	8004406 <_svfiprintf_r+0x186>
 80043a0:	9b03      	ldr	r3, [sp, #12]
 80043a2:	1d1a      	adds	r2, r3, #4
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	9203      	str	r2, [sp, #12]
 80043a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043ac:	3402      	adds	r4, #2
 80043ae:	9305      	str	r3, [sp, #20]
 80043b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004474 <_svfiprintf_r+0x1f4>
 80043b4:	7821      	ldrb	r1, [r4, #0]
 80043b6:	2203      	movs	r2, #3
 80043b8:	4650      	mov	r0, sl
 80043ba:	f7fb ff31 	bl	8000220 <memchr>
 80043be:	b138      	cbz	r0, 80043d0 <_svfiprintf_r+0x150>
 80043c0:	9b04      	ldr	r3, [sp, #16]
 80043c2:	eba0 000a 	sub.w	r0, r0, sl
 80043c6:	2240      	movs	r2, #64	@ 0x40
 80043c8:	4082      	lsls	r2, r0
 80043ca:	4313      	orrs	r3, r2
 80043cc:	3401      	adds	r4, #1
 80043ce:	9304      	str	r3, [sp, #16]
 80043d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043d4:	4824      	ldr	r0, [pc, #144]	@ (8004468 <_svfiprintf_r+0x1e8>)
 80043d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043da:	2206      	movs	r2, #6
 80043dc:	f7fb ff20 	bl	8000220 <memchr>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d036      	beq.n	8004452 <_svfiprintf_r+0x1d2>
 80043e4:	4b21      	ldr	r3, [pc, #132]	@ (800446c <_svfiprintf_r+0x1ec>)
 80043e6:	bb1b      	cbnz	r3, 8004430 <_svfiprintf_r+0x1b0>
 80043e8:	9b03      	ldr	r3, [sp, #12]
 80043ea:	3307      	adds	r3, #7
 80043ec:	f023 0307 	bic.w	r3, r3, #7
 80043f0:	3308      	adds	r3, #8
 80043f2:	9303      	str	r3, [sp, #12]
 80043f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043f6:	4433      	add	r3, r6
 80043f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80043fa:	e76a      	b.n	80042d2 <_svfiprintf_r+0x52>
 80043fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004400:	460c      	mov	r4, r1
 8004402:	2001      	movs	r0, #1
 8004404:	e7a8      	b.n	8004358 <_svfiprintf_r+0xd8>
 8004406:	2300      	movs	r3, #0
 8004408:	3401      	adds	r4, #1
 800440a:	9305      	str	r3, [sp, #20]
 800440c:	4619      	mov	r1, r3
 800440e:	f04f 0c0a 	mov.w	ip, #10
 8004412:	4620      	mov	r0, r4
 8004414:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004418:	3a30      	subs	r2, #48	@ 0x30
 800441a:	2a09      	cmp	r2, #9
 800441c:	d903      	bls.n	8004426 <_svfiprintf_r+0x1a6>
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0c6      	beq.n	80043b0 <_svfiprintf_r+0x130>
 8004422:	9105      	str	r1, [sp, #20]
 8004424:	e7c4      	b.n	80043b0 <_svfiprintf_r+0x130>
 8004426:	fb0c 2101 	mla	r1, ip, r1, r2
 800442a:	4604      	mov	r4, r0
 800442c:	2301      	movs	r3, #1
 800442e:	e7f0      	b.n	8004412 <_svfiprintf_r+0x192>
 8004430:	ab03      	add	r3, sp, #12
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	462a      	mov	r2, r5
 8004436:	4b0e      	ldr	r3, [pc, #56]	@ (8004470 <_svfiprintf_r+0x1f0>)
 8004438:	a904      	add	r1, sp, #16
 800443a:	4638      	mov	r0, r7
 800443c:	f3af 8000 	nop.w
 8004440:	1c42      	adds	r2, r0, #1
 8004442:	4606      	mov	r6, r0
 8004444:	d1d6      	bne.n	80043f4 <_svfiprintf_r+0x174>
 8004446:	89ab      	ldrh	r3, [r5, #12]
 8004448:	065b      	lsls	r3, r3, #25
 800444a:	f53f af2d 	bmi.w	80042a8 <_svfiprintf_r+0x28>
 800444e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004450:	e72c      	b.n	80042ac <_svfiprintf_r+0x2c>
 8004452:	ab03      	add	r3, sp, #12
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	462a      	mov	r2, r5
 8004458:	4b05      	ldr	r3, [pc, #20]	@ (8004470 <_svfiprintf_r+0x1f0>)
 800445a:	a904      	add	r1, sp, #16
 800445c:	4638      	mov	r0, r7
 800445e:	f000 f879 	bl	8004554 <_printf_i>
 8004462:	e7ed      	b.n	8004440 <_svfiprintf_r+0x1c0>
 8004464:	08004dc0 	.word	0x08004dc0
 8004468:	08004dca 	.word	0x08004dca
 800446c:	00000000 	.word	0x00000000
 8004470:	080041c9 	.word	0x080041c9
 8004474:	08004dc6 	.word	0x08004dc6

08004478 <_printf_common>:
 8004478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800447c:	4616      	mov	r6, r2
 800447e:	4698      	mov	r8, r3
 8004480:	688a      	ldr	r2, [r1, #8]
 8004482:	690b      	ldr	r3, [r1, #16]
 8004484:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004488:	4293      	cmp	r3, r2
 800448a:	bfb8      	it	lt
 800448c:	4613      	movlt	r3, r2
 800448e:	6033      	str	r3, [r6, #0]
 8004490:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004494:	4607      	mov	r7, r0
 8004496:	460c      	mov	r4, r1
 8004498:	b10a      	cbz	r2, 800449e <_printf_common+0x26>
 800449a:	3301      	adds	r3, #1
 800449c:	6033      	str	r3, [r6, #0]
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	0699      	lsls	r1, r3, #26
 80044a2:	bf42      	ittt	mi
 80044a4:	6833      	ldrmi	r3, [r6, #0]
 80044a6:	3302      	addmi	r3, #2
 80044a8:	6033      	strmi	r3, [r6, #0]
 80044aa:	6825      	ldr	r5, [r4, #0]
 80044ac:	f015 0506 	ands.w	r5, r5, #6
 80044b0:	d106      	bne.n	80044c0 <_printf_common+0x48>
 80044b2:	f104 0a19 	add.w	sl, r4, #25
 80044b6:	68e3      	ldr	r3, [r4, #12]
 80044b8:	6832      	ldr	r2, [r6, #0]
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	42ab      	cmp	r3, r5
 80044be:	dc26      	bgt.n	800450e <_printf_common+0x96>
 80044c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80044c4:	6822      	ldr	r2, [r4, #0]
 80044c6:	3b00      	subs	r3, #0
 80044c8:	bf18      	it	ne
 80044ca:	2301      	movne	r3, #1
 80044cc:	0692      	lsls	r2, r2, #26
 80044ce:	d42b      	bmi.n	8004528 <_printf_common+0xb0>
 80044d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80044d4:	4641      	mov	r1, r8
 80044d6:	4638      	mov	r0, r7
 80044d8:	47c8      	blx	r9
 80044da:	3001      	adds	r0, #1
 80044dc:	d01e      	beq.n	800451c <_printf_common+0xa4>
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	6922      	ldr	r2, [r4, #16]
 80044e2:	f003 0306 	and.w	r3, r3, #6
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	bf02      	ittt	eq
 80044ea:	68e5      	ldreq	r5, [r4, #12]
 80044ec:	6833      	ldreq	r3, [r6, #0]
 80044ee:	1aed      	subeq	r5, r5, r3
 80044f0:	68a3      	ldr	r3, [r4, #8]
 80044f2:	bf0c      	ite	eq
 80044f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044f8:	2500      	movne	r5, #0
 80044fa:	4293      	cmp	r3, r2
 80044fc:	bfc4      	itt	gt
 80044fe:	1a9b      	subgt	r3, r3, r2
 8004500:	18ed      	addgt	r5, r5, r3
 8004502:	2600      	movs	r6, #0
 8004504:	341a      	adds	r4, #26
 8004506:	42b5      	cmp	r5, r6
 8004508:	d11a      	bne.n	8004540 <_printf_common+0xc8>
 800450a:	2000      	movs	r0, #0
 800450c:	e008      	b.n	8004520 <_printf_common+0xa8>
 800450e:	2301      	movs	r3, #1
 8004510:	4652      	mov	r2, sl
 8004512:	4641      	mov	r1, r8
 8004514:	4638      	mov	r0, r7
 8004516:	47c8      	blx	r9
 8004518:	3001      	adds	r0, #1
 800451a:	d103      	bne.n	8004524 <_printf_common+0xac>
 800451c:	f04f 30ff 	mov.w	r0, #4294967295
 8004520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004524:	3501      	adds	r5, #1
 8004526:	e7c6      	b.n	80044b6 <_printf_common+0x3e>
 8004528:	18e1      	adds	r1, r4, r3
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	2030      	movs	r0, #48	@ 0x30
 800452e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004532:	4422      	add	r2, r4
 8004534:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004538:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800453c:	3302      	adds	r3, #2
 800453e:	e7c7      	b.n	80044d0 <_printf_common+0x58>
 8004540:	2301      	movs	r3, #1
 8004542:	4622      	mov	r2, r4
 8004544:	4641      	mov	r1, r8
 8004546:	4638      	mov	r0, r7
 8004548:	47c8      	blx	r9
 800454a:	3001      	adds	r0, #1
 800454c:	d0e6      	beq.n	800451c <_printf_common+0xa4>
 800454e:	3601      	adds	r6, #1
 8004550:	e7d9      	b.n	8004506 <_printf_common+0x8e>
	...

08004554 <_printf_i>:
 8004554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004558:	7e0f      	ldrb	r7, [r1, #24]
 800455a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800455c:	2f78      	cmp	r7, #120	@ 0x78
 800455e:	4691      	mov	r9, r2
 8004560:	4680      	mov	r8, r0
 8004562:	460c      	mov	r4, r1
 8004564:	469a      	mov	sl, r3
 8004566:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800456a:	d807      	bhi.n	800457c <_printf_i+0x28>
 800456c:	2f62      	cmp	r7, #98	@ 0x62
 800456e:	d80a      	bhi.n	8004586 <_printf_i+0x32>
 8004570:	2f00      	cmp	r7, #0
 8004572:	f000 80d1 	beq.w	8004718 <_printf_i+0x1c4>
 8004576:	2f58      	cmp	r7, #88	@ 0x58
 8004578:	f000 80b8 	beq.w	80046ec <_printf_i+0x198>
 800457c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004580:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004584:	e03a      	b.n	80045fc <_printf_i+0xa8>
 8004586:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800458a:	2b15      	cmp	r3, #21
 800458c:	d8f6      	bhi.n	800457c <_printf_i+0x28>
 800458e:	a101      	add	r1, pc, #4	@ (adr r1, 8004594 <_printf_i+0x40>)
 8004590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004594:	080045ed 	.word	0x080045ed
 8004598:	08004601 	.word	0x08004601
 800459c:	0800457d 	.word	0x0800457d
 80045a0:	0800457d 	.word	0x0800457d
 80045a4:	0800457d 	.word	0x0800457d
 80045a8:	0800457d 	.word	0x0800457d
 80045ac:	08004601 	.word	0x08004601
 80045b0:	0800457d 	.word	0x0800457d
 80045b4:	0800457d 	.word	0x0800457d
 80045b8:	0800457d 	.word	0x0800457d
 80045bc:	0800457d 	.word	0x0800457d
 80045c0:	080046ff 	.word	0x080046ff
 80045c4:	0800462b 	.word	0x0800462b
 80045c8:	080046b9 	.word	0x080046b9
 80045cc:	0800457d 	.word	0x0800457d
 80045d0:	0800457d 	.word	0x0800457d
 80045d4:	08004721 	.word	0x08004721
 80045d8:	0800457d 	.word	0x0800457d
 80045dc:	0800462b 	.word	0x0800462b
 80045e0:	0800457d 	.word	0x0800457d
 80045e4:	0800457d 	.word	0x0800457d
 80045e8:	080046c1 	.word	0x080046c1
 80045ec:	6833      	ldr	r3, [r6, #0]
 80045ee:	1d1a      	adds	r2, r3, #4
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6032      	str	r2, [r6, #0]
 80045f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045fc:	2301      	movs	r3, #1
 80045fe:	e09c      	b.n	800473a <_printf_i+0x1e6>
 8004600:	6833      	ldr	r3, [r6, #0]
 8004602:	6820      	ldr	r0, [r4, #0]
 8004604:	1d19      	adds	r1, r3, #4
 8004606:	6031      	str	r1, [r6, #0]
 8004608:	0606      	lsls	r6, r0, #24
 800460a:	d501      	bpl.n	8004610 <_printf_i+0xbc>
 800460c:	681d      	ldr	r5, [r3, #0]
 800460e:	e003      	b.n	8004618 <_printf_i+0xc4>
 8004610:	0645      	lsls	r5, r0, #25
 8004612:	d5fb      	bpl.n	800460c <_printf_i+0xb8>
 8004614:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004618:	2d00      	cmp	r5, #0
 800461a:	da03      	bge.n	8004624 <_printf_i+0xd0>
 800461c:	232d      	movs	r3, #45	@ 0x2d
 800461e:	426d      	negs	r5, r5
 8004620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004624:	4858      	ldr	r0, [pc, #352]	@ (8004788 <_printf_i+0x234>)
 8004626:	230a      	movs	r3, #10
 8004628:	e011      	b.n	800464e <_printf_i+0xfa>
 800462a:	6821      	ldr	r1, [r4, #0]
 800462c:	6833      	ldr	r3, [r6, #0]
 800462e:	0608      	lsls	r0, r1, #24
 8004630:	f853 5b04 	ldr.w	r5, [r3], #4
 8004634:	d402      	bmi.n	800463c <_printf_i+0xe8>
 8004636:	0649      	lsls	r1, r1, #25
 8004638:	bf48      	it	mi
 800463a:	b2ad      	uxthmi	r5, r5
 800463c:	2f6f      	cmp	r7, #111	@ 0x6f
 800463e:	4852      	ldr	r0, [pc, #328]	@ (8004788 <_printf_i+0x234>)
 8004640:	6033      	str	r3, [r6, #0]
 8004642:	bf14      	ite	ne
 8004644:	230a      	movne	r3, #10
 8004646:	2308      	moveq	r3, #8
 8004648:	2100      	movs	r1, #0
 800464a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800464e:	6866      	ldr	r6, [r4, #4]
 8004650:	60a6      	str	r6, [r4, #8]
 8004652:	2e00      	cmp	r6, #0
 8004654:	db05      	blt.n	8004662 <_printf_i+0x10e>
 8004656:	6821      	ldr	r1, [r4, #0]
 8004658:	432e      	orrs	r6, r5
 800465a:	f021 0104 	bic.w	r1, r1, #4
 800465e:	6021      	str	r1, [r4, #0]
 8004660:	d04b      	beq.n	80046fa <_printf_i+0x1a6>
 8004662:	4616      	mov	r6, r2
 8004664:	fbb5 f1f3 	udiv	r1, r5, r3
 8004668:	fb03 5711 	mls	r7, r3, r1, r5
 800466c:	5dc7      	ldrb	r7, [r0, r7]
 800466e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004672:	462f      	mov	r7, r5
 8004674:	42bb      	cmp	r3, r7
 8004676:	460d      	mov	r5, r1
 8004678:	d9f4      	bls.n	8004664 <_printf_i+0x110>
 800467a:	2b08      	cmp	r3, #8
 800467c:	d10b      	bne.n	8004696 <_printf_i+0x142>
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	07df      	lsls	r7, r3, #31
 8004682:	d508      	bpl.n	8004696 <_printf_i+0x142>
 8004684:	6923      	ldr	r3, [r4, #16]
 8004686:	6861      	ldr	r1, [r4, #4]
 8004688:	4299      	cmp	r1, r3
 800468a:	bfde      	ittt	le
 800468c:	2330      	movle	r3, #48	@ 0x30
 800468e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004692:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004696:	1b92      	subs	r2, r2, r6
 8004698:	6122      	str	r2, [r4, #16]
 800469a:	f8cd a000 	str.w	sl, [sp]
 800469e:	464b      	mov	r3, r9
 80046a0:	aa03      	add	r2, sp, #12
 80046a2:	4621      	mov	r1, r4
 80046a4:	4640      	mov	r0, r8
 80046a6:	f7ff fee7 	bl	8004478 <_printf_common>
 80046aa:	3001      	adds	r0, #1
 80046ac:	d14a      	bne.n	8004744 <_printf_i+0x1f0>
 80046ae:	f04f 30ff 	mov.w	r0, #4294967295
 80046b2:	b004      	add	sp, #16
 80046b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	f043 0320 	orr.w	r3, r3, #32
 80046be:	6023      	str	r3, [r4, #0]
 80046c0:	4832      	ldr	r0, [pc, #200]	@ (800478c <_printf_i+0x238>)
 80046c2:	2778      	movs	r7, #120	@ 0x78
 80046c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	6831      	ldr	r1, [r6, #0]
 80046cc:	061f      	lsls	r7, r3, #24
 80046ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80046d2:	d402      	bmi.n	80046da <_printf_i+0x186>
 80046d4:	065f      	lsls	r7, r3, #25
 80046d6:	bf48      	it	mi
 80046d8:	b2ad      	uxthmi	r5, r5
 80046da:	6031      	str	r1, [r6, #0]
 80046dc:	07d9      	lsls	r1, r3, #31
 80046de:	bf44      	itt	mi
 80046e0:	f043 0320 	orrmi.w	r3, r3, #32
 80046e4:	6023      	strmi	r3, [r4, #0]
 80046e6:	b11d      	cbz	r5, 80046f0 <_printf_i+0x19c>
 80046e8:	2310      	movs	r3, #16
 80046ea:	e7ad      	b.n	8004648 <_printf_i+0xf4>
 80046ec:	4826      	ldr	r0, [pc, #152]	@ (8004788 <_printf_i+0x234>)
 80046ee:	e7e9      	b.n	80046c4 <_printf_i+0x170>
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	f023 0320 	bic.w	r3, r3, #32
 80046f6:	6023      	str	r3, [r4, #0]
 80046f8:	e7f6      	b.n	80046e8 <_printf_i+0x194>
 80046fa:	4616      	mov	r6, r2
 80046fc:	e7bd      	b.n	800467a <_printf_i+0x126>
 80046fe:	6833      	ldr	r3, [r6, #0]
 8004700:	6825      	ldr	r5, [r4, #0]
 8004702:	6961      	ldr	r1, [r4, #20]
 8004704:	1d18      	adds	r0, r3, #4
 8004706:	6030      	str	r0, [r6, #0]
 8004708:	062e      	lsls	r6, r5, #24
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	d501      	bpl.n	8004712 <_printf_i+0x1be>
 800470e:	6019      	str	r1, [r3, #0]
 8004710:	e002      	b.n	8004718 <_printf_i+0x1c4>
 8004712:	0668      	lsls	r0, r5, #25
 8004714:	d5fb      	bpl.n	800470e <_printf_i+0x1ba>
 8004716:	8019      	strh	r1, [r3, #0]
 8004718:	2300      	movs	r3, #0
 800471a:	6123      	str	r3, [r4, #16]
 800471c:	4616      	mov	r6, r2
 800471e:	e7bc      	b.n	800469a <_printf_i+0x146>
 8004720:	6833      	ldr	r3, [r6, #0]
 8004722:	1d1a      	adds	r2, r3, #4
 8004724:	6032      	str	r2, [r6, #0]
 8004726:	681e      	ldr	r6, [r3, #0]
 8004728:	6862      	ldr	r2, [r4, #4]
 800472a:	2100      	movs	r1, #0
 800472c:	4630      	mov	r0, r6
 800472e:	f7fb fd77 	bl	8000220 <memchr>
 8004732:	b108      	cbz	r0, 8004738 <_printf_i+0x1e4>
 8004734:	1b80      	subs	r0, r0, r6
 8004736:	6060      	str	r0, [r4, #4]
 8004738:	6863      	ldr	r3, [r4, #4]
 800473a:	6123      	str	r3, [r4, #16]
 800473c:	2300      	movs	r3, #0
 800473e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004742:	e7aa      	b.n	800469a <_printf_i+0x146>
 8004744:	6923      	ldr	r3, [r4, #16]
 8004746:	4632      	mov	r2, r6
 8004748:	4649      	mov	r1, r9
 800474a:	4640      	mov	r0, r8
 800474c:	47d0      	blx	sl
 800474e:	3001      	adds	r0, #1
 8004750:	d0ad      	beq.n	80046ae <_printf_i+0x15a>
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	079b      	lsls	r3, r3, #30
 8004756:	d413      	bmi.n	8004780 <_printf_i+0x22c>
 8004758:	68e0      	ldr	r0, [r4, #12]
 800475a:	9b03      	ldr	r3, [sp, #12]
 800475c:	4298      	cmp	r0, r3
 800475e:	bfb8      	it	lt
 8004760:	4618      	movlt	r0, r3
 8004762:	e7a6      	b.n	80046b2 <_printf_i+0x15e>
 8004764:	2301      	movs	r3, #1
 8004766:	4632      	mov	r2, r6
 8004768:	4649      	mov	r1, r9
 800476a:	4640      	mov	r0, r8
 800476c:	47d0      	blx	sl
 800476e:	3001      	adds	r0, #1
 8004770:	d09d      	beq.n	80046ae <_printf_i+0x15a>
 8004772:	3501      	adds	r5, #1
 8004774:	68e3      	ldr	r3, [r4, #12]
 8004776:	9903      	ldr	r1, [sp, #12]
 8004778:	1a5b      	subs	r3, r3, r1
 800477a:	42ab      	cmp	r3, r5
 800477c:	dcf2      	bgt.n	8004764 <_printf_i+0x210>
 800477e:	e7eb      	b.n	8004758 <_printf_i+0x204>
 8004780:	2500      	movs	r5, #0
 8004782:	f104 0619 	add.w	r6, r4, #25
 8004786:	e7f5      	b.n	8004774 <_printf_i+0x220>
 8004788:	08004dd1 	.word	0x08004dd1
 800478c:	08004de2 	.word	0x08004de2

08004790 <memmove>:
 8004790:	4288      	cmp	r0, r1
 8004792:	b510      	push	{r4, lr}
 8004794:	eb01 0402 	add.w	r4, r1, r2
 8004798:	d902      	bls.n	80047a0 <memmove+0x10>
 800479a:	4284      	cmp	r4, r0
 800479c:	4623      	mov	r3, r4
 800479e:	d807      	bhi.n	80047b0 <memmove+0x20>
 80047a0:	1e43      	subs	r3, r0, #1
 80047a2:	42a1      	cmp	r1, r4
 80047a4:	d008      	beq.n	80047b8 <memmove+0x28>
 80047a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047ae:	e7f8      	b.n	80047a2 <memmove+0x12>
 80047b0:	4402      	add	r2, r0
 80047b2:	4601      	mov	r1, r0
 80047b4:	428a      	cmp	r2, r1
 80047b6:	d100      	bne.n	80047ba <memmove+0x2a>
 80047b8:	bd10      	pop	{r4, pc}
 80047ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047c2:	e7f7      	b.n	80047b4 <memmove+0x24>

080047c4 <_sbrk_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4d06      	ldr	r5, [pc, #24]	@ (80047e0 <_sbrk_r+0x1c>)
 80047c8:	2300      	movs	r3, #0
 80047ca:	4604      	mov	r4, r0
 80047cc:	4608      	mov	r0, r1
 80047ce:	602b      	str	r3, [r5, #0]
 80047d0:	f7fd f8d6 	bl	8001980 <_sbrk>
 80047d4:	1c43      	adds	r3, r0, #1
 80047d6:	d102      	bne.n	80047de <_sbrk_r+0x1a>
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	b103      	cbz	r3, 80047de <_sbrk_r+0x1a>
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	bd38      	pop	{r3, r4, r5, pc}
 80047e0:	2000038c 	.word	0x2000038c

080047e4 <memcpy>:
 80047e4:	440a      	add	r2, r1
 80047e6:	4291      	cmp	r1, r2
 80047e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80047ec:	d100      	bne.n	80047f0 <memcpy+0xc>
 80047ee:	4770      	bx	lr
 80047f0:	b510      	push	{r4, lr}
 80047f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047fa:	4291      	cmp	r1, r2
 80047fc:	d1f9      	bne.n	80047f2 <memcpy+0xe>
 80047fe:	bd10      	pop	{r4, pc}

08004800 <_realloc_r>:
 8004800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004804:	4607      	mov	r7, r0
 8004806:	4614      	mov	r4, r2
 8004808:	460d      	mov	r5, r1
 800480a:	b921      	cbnz	r1, 8004816 <_realloc_r+0x16>
 800480c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004810:	4611      	mov	r1, r2
 8004812:	f7ff bc4d 	b.w	80040b0 <_malloc_r>
 8004816:	b92a      	cbnz	r2, 8004824 <_realloc_r+0x24>
 8004818:	f7ff fbde 	bl	8003fd8 <_free_r>
 800481c:	4625      	mov	r5, r4
 800481e:	4628      	mov	r0, r5
 8004820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004824:	f000 f81a 	bl	800485c <_malloc_usable_size_r>
 8004828:	4284      	cmp	r4, r0
 800482a:	4606      	mov	r6, r0
 800482c:	d802      	bhi.n	8004834 <_realloc_r+0x34>
 800482e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004832:	d8f4      	bhi.n	800481e <_realloc_r+0x1e>
 8004834:	4621      	mov	r1, r4
 8004836:	4638      	mov	r0, r7
 8004838:	f7ff fc3a 	bl	80040b0 <_malloc_r>
 800483c:	4680      	mov	r8, r0
 800483e:	b908      	cbnz	r0, 8004844 <_realloc_r+0x44>
 8004840:	4645      	mov	r5, r8
 8004842:	e7ec      	b.n	800481e <_realloc_r+0x1e>
 8004844:	42b4      	cmp	r4, r6
 8004846:	4622      	mov	r2, r4
 8004848:	4629      	mov	r1, r5
 800484a:	bf28      	it	cs
 800484c:	4632      	movcs	r2, r6
 800484e:	f7ff ffc9 	bl	80047e4 <memcpy>
 8004852:	4629      	mov	r1, r5
 8004854:	4638      	mov	r0, r7
 8004856:	f7ff fbbf 	bl	8003fd8 <_free_r>
 800485a:	e7f1      	b.n	8004840 <_realloc_r+0x40>

0800485c <_malloc_usable_size_r>:
 800485c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004860:	1f18      	subs	r0, r3, #4
 8004862:	2b00      	cmp	r3, #0
 8004864:	bfbc      	itt	lt
 8004866:	580b      	ldrlt	r3, [r1, r0]
 8004868:	18c0      	addlt	r0, r0, r3
 800486a:	4770      	bx	lr

0800486c <_init>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	bf00      	nop
 8004870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004872:	bc08      	pop	{r3}
 8004874:	469e      	mov	lr, r3
 8004876:	4770      	bx	lr

08004878 <_fini>:
 8004878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487a:	bf00      	nop
 800487c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487e:	bc08      	pop	{r3}
 8004880:	469e      	mov	lr, r3
 8004882:	4770      	bx	lr
