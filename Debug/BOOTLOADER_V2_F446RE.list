
BOOTLOADER_V2_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a64  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b34  08005c34  08005c34  00006c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006768  08006768  00008070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006768  08006768  00007768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006770  08006770  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006770  08006770  00007770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006774  08006774  00007774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006778  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  20000070  080067e8  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  080067e8  000084cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecfc  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc1  00000000  00000000  00016d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00019a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac8  00000000  00000000  0001a878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023952  00000000  00000000  0001b340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e1e  00000000  00000000  0003ec92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd901  00000000  00000000  00050ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e3b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000425c  00000000  00000000  0011e3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00122650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005c1c 	.word	0x08005c1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005c1c 	.word	0x08005c1c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b085      	sub	sp, #20
 80005e0:	af02      	add	r7, sp, #8
 80005e2:	4604      	mov	r4, r0
 80005e4:	4608      	mov	r0, r1
 80005e6:	4611      	mov	r1, r2
 80005e8:	461a      	mov	r2, r3
 80005ea:	4623      	mov	r3, r4
 80005ec:	80fb      	strh	r3, [r7, #6]
 80005ee:	4603      	mov	r3, r0
 80005f0:	80bb      	strh	r3, [r7, #4]
 80005f2:	460b      	mov	r3, r1
 80005f4:	807b      	strh	r3, [r7, #2]
 80005f6:	4613      	mov	r3, r2
 80005f8:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80005fa:	88f8      	ldrh	r0, [r7, #6]
 80005fc:	88b9      	ldrh	r1, [r7, #4]
 80005fe:	887a      	ldrh	r2, [r7, #2]
 8000600:	883c      	ldrh	r4, [r7, #0]
 8000602:	8b3b      	ldrh	r3, [r7, #24]
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	4623      	mov	r3, r4
 8000608:	f000 fa88 	bl	8000b1c <ST7735_FillRectangle>
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bd90      	pop	{r4, r7, pc}

08000614 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af02      	add	r7, sp, #8
 800061a:	4603      	mov	r3, r0
 800061c:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800061e:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <fillScreen+0x2c>)
 8000620:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000624:	4b07      	ldr	r3, [pc, #28]	@ (8000644 <fillScreen+0x30>)
 8000626:	f9b3 1000 	ldrsh.w	r1, [r3]
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	460b      	mov	r3, r1
 8000630:	2100      	movs	r1, #0
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff ffd2 	bl	80005dc <fillRect>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000008c 	.word	0x2000008c
 8000644:	2000008e 	.word	0x2000008e

08000648 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2102      	movs	r1, #2
 8000650:	4802      	ldr	r0, [pc, #8]	@ (800065c <ST7735_Select+0x14>)
 8000652:	f002 fb1f 	bl	8002c94 <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40020000 	.word	0x40020000

08000660 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2102      	movs	r1, #2
 8000668:	4802      	ldr	r0, [pc, #8]	@ (8000674 <ST7735_Unselect+0x14>)
 800066a:	f002 fb13 	bl	8002c94 <HAL_GPIO_WritePin>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40020000 	.word	0x40020000

08000678 <ST7735_Reset>:

void ST7735_Reset()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	2110      	movs	r1, #16
 8000680:	4806      	ldr	r0, [pc, #24]	@ (800069c <ST7735_Reset+0x24>)
 8000682:	f002 fb07 	bl	8002c94 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000686:	2005      	movs	r0, #5
 8000688:	f001 fd24 	bl	80020d4 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2110      	movs	r1, #16
 8000690:	4802      	ldr	r0, [pc, #8]	@ (800069c <ST7735_Reset+0x24>)
 8000692:	f002 faff 	bl	8002c94 <HAL_GPIO_WritePin>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40020000 	.word	0x40020000

080006a0 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2110      	movs	r1, #16
 80006ae:	4807      	ldr	r0, [pc, #28]	@ (80006cc <ST7735_WriteCommand+0x2c>)
 80006b0:	f002 faf0 	bl	8002c94 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80006b4:	1df9      	adds	r1, r7, #7
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	2201      	movs	r2, #1
 80006bc:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <ST7735_WriteCommand+0x30>)
 80006be:	f003 fa36 	bl	8003b2e <HAL_SPI_Transmit>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40020800 	.word	0x40020800
 80006d0:	20000228 	.word	0x20000228

080006d4 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2110      	movs	r1, #16
 80006e2:	4807      	ldr	r0, [pc, #28]	@ (8000700 <ST7735_WriteData+0x2c>)
 80006e4:	f002 fad6 	bl	8002c94 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	6879      	ldr	r1, [r7, #4]
 80006f2:	4804      	ldr	r0, [pc, #16]	@ (8000704 <ST7735_WriteData+0x30>)
 80006f4:	f003 fa1b 	bl	8003b2e <HAL_SPI_Transmit>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40020800 	.word	0x40020800
 8000704:	20000228 	.word	0x20000228

08000708 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	607a      	str	r2, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800071a:	e034      	b.n	8000786 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	1c5a      	adds	r2, r3, #1
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000726:	7afb      	ldrb	r3, [r7, #11]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ffb9 	bl	80006a0 <ST7735_WriteCommand>

        numArgs = *addr++;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000738:	7abb      	ldrb	r3, [r7, #10]
 800073a:	b29b      	uxth	r3, r3
 800073c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000740:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000742:	7abb      	ldrb	r3, [r7, #10]
 8000744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000748:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800074a:	7abb      	ldrb	r3, [r7, #10]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d008      	beq.n	8000762 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000750:	7abb      	ldrb	r3, [r7, #10]
 8000752:	4619      	mov	r1, r3
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ffbd 	bl	80006d4 <ST7735_WriteData>
            addr += numArgs;
 800075a:	7abb      	ldrb	r3, [r7, #10]
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000762:	89bb      	ldrh	r3, [r7, #12]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d00e      	beq.n	8000786 <DisplayInit+0x7e>
            ms = *addr++;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	1c5a      	adds	r2, r3, #1
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000772:	89bb      	ldrh	r3, [r7, #12]
 8000774:	2bff      	cmp	r3, #255	@ 0xff
 8000776:	d102      	bne.n	800077e <DisplayInit+0x76>
 8000778:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800077c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800077e:	89bb      	ldrh	r3, [r7, #12]
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fca7 	bl	80020d4 <HAL_Delay>
    while(numCommands--) {
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	1e5a      	subs	r2, r3, #1
 800078a:	73fa      	strb	r2, [r7, #15]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d1c5      	bne.n	800071c <DisplayInit+0x14>
        }
    }
}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4604      	mov	r4, r0
 80007a4:	4608      	mov	r0, r1
 80007a6:	4611      	mov	r1, r2
 80007a8:	461a      	mov	r2, r3
 80007aa:	4623      	mov	r3, r4
 80007ac:	71fb      	strb	r3, [r7, #7]
 80007ae:	4603      	mov	r3, r0
 80007b0:	71bb      	strb	r3, [r7, #6]
 80007b2:	460b      	mov	r3, r1
 80007b4:	717b      	strb	r3, [r7, #5]
 80007b6:	4613      	mov	r3, r2
 80007b8:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80007ba:	202a      	movs	r0, #42	@ 0x2a
 80007bc:	f7ff ff70 	bl	80006a0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80007c0:	2300      	movs	r3, #0
 80007c2:	733b      	strb	r3, [r7, #12]
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <ST7735_SetAddressWindow+0x88>)
 80007c6:	781a      	ldrb	r2, [r3, #0]
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	4413      	add	r3, r2
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	737b      	strb	r3, [r7, #13]
 80007d0:	2300      	movs	r3, #0
 80007d2:	73bb      	strb	r3, [r7, #14]
 80007d4:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <ST7735_SetAddressWindow+0x88>)
 80007d6:	781a      	ldrb	r2, [r3, #0]
 80007d8:	797b      	ldrb	r3, [r7, #5]
 80007da:	4413      	add	r3, r2
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2104      	movs	r1, #4
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff74 	bl	80006d4 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80007ec:	202b      	movs	r0, #43	@ 0x2b
 80007ee:	f7ff ff57 	bl	80006a0 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <ST7735_SetAddressWindow+0x8c>)
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	4413      	add	r3, r2
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 80007fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <ST7735_SetAddressWindow+0x8c>)
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	793b      	ldrb	r3, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	b2db      	uxtb	r3, r3
 8000808:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2104      	movs	r1, #4
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff5f 	bl	80006d4 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000816:	202c      	movs	r0, #44	@ 0x2c
 8000818:	f7ff ff42 	bl	80006a0 <ST7735_WriteCommand>
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	20000093 	.word	0x20000093
 8000828:	20000094 	.word	0x20000094

0800082c <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000836:	f7ff ff07 	bl	8000648 <ST7735_Select>
    ST7735_Reset();
 800083a:	f7ff ff1d 	bl	8000678 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800083e:	480c      	ldr	r0, [pc, #48]	@ (8000870 <ST7735_Init+0x44>)
 8000840:	f7ff ff62 	bl	8000708 <DisplayInit>
    DisplayInit(init_cmds2);
 8000844:	480b      	ldr	r0, [pc, #44]	@ (8000874 <ST7735_Init+0x48>)
 8000846:	f7ff ff5f 	bl	8000708 <DisplayInit>
    DisplayInit(init_cmds3);
 800084a:	480b      	ldr	r0, [pc, #44]	@ (8000878 <ST7735_Init+0x4c>)
 800084c:	f7ff ff5c 	bl	8000708 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8000850:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <ST7735_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8000856:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <ST7735_Init+0x54>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f810 	bl	8000884 <ST7735_SetRotation>
    ST7735_Unselect();
 8000864:	f7ff fefc 	bl	8000660 <ST7735_Unselect>

}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	08005f3c 	.word	0x08005f3c
 8000874:	08005f74 	.word	0x08005f74
 8000878:	08005f84 	.word	0x08005f84
 800087c:	20000091 	.word	0x20000091
 8000880:	20000092 	.word	0x20000092

08000884 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f003 0303 	and.w	r3, r3, #3
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4b33      	ldr	r3, [pc, #204]	@ (8000968 <ST7735_SetRotation+0xe4>)
 800089c:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800089e:	4b32      	ldr	r3, [pc, #200]	@ (8000968 <ST7735_SetRotation+0xe4>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	d84e      	bhi.n	8000944 <ST7735_SetRotation+0xc0>
 80008a6:	a201      	add	r2, pc, #4	@ (adr r2, 80008ac <ST7735_SetRotation+0x28>)
 80008a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ac:	080008bd 	.word	0x080008bd
 80008b0:	080008df 	.word	0x080008df
 80008b4:	08000901 	.word	0x08000901
 80008b8:	08000923 	.word	0x08000923
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80008bc:	23c0      	movs	r3, #192	@ 0xc0
 80008be:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80008c0:	4b2a      	ldr	r3, [pc, #168]	@ (800096c <ST7735_SetRotation+0xe8>)
 80008c2:	22a0      	movs	r2, #160	@ 0xa0
 80008c4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80008c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000970 <ST7735_SetRotation+0xec>)
 80008c8:	2280      	movs	r2, #128	@ 0x80
 80008ca:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80008cc:	4b29      	ldr	r3, [pc, #164]	@ (8000974 <ST7735_SetRotation+0xf0>)
 80008ce:	781a      	ldrb	r2, [r3, #0]
 80008d0:	4b29      	ldr	r3, [pc, #164]	@ (8000978 <ST7735_SetRotation+0xf4>)
 80008d2:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80008d4:	4b29      	ldr	r3, [pc, #164]	@ (800097c <ST7735_SetRotation+0xf8>)
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	4b29      	ldr	r3, [pc, #164]	@ (8000980 <ST7735_SetRotation+0xfc>)
 80008da:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80008dc:	e032      	b.n	8000944 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80008de:	23a0      	movs	r3, #160	@ 0xa0
 80008e0:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80008e2:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <ST7735_SetRotation+0xec>)
 80008e4:	22a0      	movs	r2, #160	@ 0xa0
 80008e6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80008e8:	4b20      	ldr	r3, [pc, #128]	@ (800096c <ST7735_SetRotation+0xe8>)
 80008ea:	2280      	movs	r2, #128	@ 0x80
 80008ec:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80008ee:	4b21      	ldr	r3, [pc, #132]	@ (8000974 <ST7735_SetRotation+0xf0>)
 80008f0:	781a      	ldrb	r2, [r3, #0]
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <ST7735_SetRotation+0xfc>)
 80008f4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80008f6:	4b21      	ldr	r3, [pc, #132]	@ (800097c <ST7735_SetRotation+0xf8>)
 80008f8:	781a      	ldrb	r2, [r3, #0]
 80008fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <ST7735_SetRotation+0xf4>)
 80008fc:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80008fe:	e021      	b.n	8000944 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000900:	2300      	movs	r3, #0
 8000902:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000904:	4b19      	ldr	r3, [pc, #100]	@ (800096c <ST7735_SetRotation+0xe8>)
 8000906:	22a0      	movs	r2, #160	@ 0xa0
 8000908:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800090a:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <ST7735_SetRotation+0xec>)
 800090c:	2280      	movs	r2, #128	@ 0x80
 800090e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000910:	4b18      	ldr	r3, [pc, #96]	@ (8000974 <ST7735_SetRotation+0xf0>)
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <ST7735_SetRotation+0xf4>)
 8000916:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000918:	4b18      	ldr	r3, [pc, #96]	@ (800097c <ST7735_SetRotation+0xf8>)
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <ST7735_SetRotation+0xfc>)
 800091e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000920:	e010      	b.n	8000944 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000922:	2360      	movs	r3, #96	@ 0x60
 8000924:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <ST7735_SetRotation+0xec>)
 8000928:	22a0      	movs	r2, #160	@ 0xa0
 800092a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <ST7735_SetRotation+0xe8>)
 800092e:	2280      	movs	r2, #128	@ 0x80
 8000930:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <ST7735_SetRotation+0xf0>)
 8000934:	781a      	ldrb	r2, [r3, #0]
 8000936:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <ST7735_SetRotation+0xfc>)
 8000938:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <ST7735_SetRotation+0xf8>)
 800093c:	781a      	ldrb	r2, [r3, #0]
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <ST7735_SetRotation+0xf4>)
 8000940:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000942:	bf00      	nop
  }
  ST7735_Select();
 8000944:	f7ff fe80 	bl	8000648 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000948:	2036      	movs	r0, #54	@ 0x36
 800094a:	f7ff fea9 	bl	80006a0 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800094e:	f107 030f 	add.w	r3, r7, #15
 8000952:	2101      	movs	r1, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff febd 	bl	80006d4 <ST7735_WriteData>
  ST7735_Unselect();
 800095a:	f7ff fe81 	bl	8000660 <ST7735_Unselect>
}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000090 	.word	0x20000090
 800096c:	2000008e 	.word	0x2000008e
 8000970:	2000008c 	.word	0x2000008c
 8000974:	20000091 	.word	0x20000091
 8000978:	20000093 	.word	0x20000093
 800097c:	20000092 	.word	0x20000092
 8000980:	20000094 	.word	0x20000094

08000984 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000984:	b082      	sub	sp, #8
 8000986:	b590      	push	{r4, r7, lr}
 8000988:	b089      	sub	sp, #36	@ 0x24
 800098a:	af00      	add	r7, sp, #0
 800098c:	637b      	str	r3, [r7, #52]	@ 0x34
 800098e:	4603      	mov	r3, r0
 8000990:	80fb      	strh	r3, [r7, #6]
 8000992:	460b      	mov	r3, r1
 8000994:	80bb      	strh	r3, [r7, #4]
 8000996:	4613      	mov	r3, r2
 8000998:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	b2d8      	uxtb	r0, r3
 800099e:	88bb      	ldrh	r3, [r7, #4]
 80009a0:	b2d9      	uxtb	r1, r3
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80009aa:	4413      	add	r3, r2
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	3b01      	subs	r3, #1
 80009b0:	b2dc      	uxtb	r4, r3
 80009b2:	88bb      	ldrh	r3, [r7, #4]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80009ba:	4413      	add	r3, r2
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	3b01      	subs	r3, #1
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4622      	mov	r2, r4
 80009c4:	f7ff feea 	bl	800079c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
 80009cc:	e043      	b.n	8000a56 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80009ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	3b20      	subs	r3, #32
 80009d4:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80009d8:	fb01 f303 	mul.w	r3, r1, r3
 80009dc:	4619      	mov	r1, r3
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	440b      	add	r3, r1
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
 80009ee:	e029      	b.n	8000a44 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80009f0:	697a      	ldr	r2, [r7, #20]
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00e      	beq.n	8000a1e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000a00:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000a02:	0a1b      	lsrs	r3, r3, #8
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	743b      	strb	r3, [r7, #16]
 8000a0a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	2102      	movs	r1, #2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fe5c 	bl	80006d4 <ST7735_WriteData>
 8000a1c:	e00f      	b.n	8000a3e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000a1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000a22:	0a1b      	lsrs	r3, r3, #8
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	733b      	strb	r3, [r7, #12]
 8000a2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	2102      	movs	r1, #2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fe4b 	bl	80006d4 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	3301      	adds	r3, #1
 8000a42:	61bb      	str	r3, [r7, #24]
 8000a44:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000a48:	461a      	mov	r2, r3
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d3cf      	bcc.n	80009f0 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	3301      	adds	r3, #1
 8000a54:	61fb      	str	r3, [r7, #28]
 8000a56:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d3b5      	bcc.n	80009ce <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	3724      	adds	r7, #36	@ 0x24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000a6e:	b002      	add	sp, #8
 8000a70:	4770      	bx	lr
	...

08000a74 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a74:	b082      	sub	sp, #8
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af04      	add	r7, sp, #16
 8000a7c:	603a      	str	r2, [r7, #0]
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	4603      	mov	r3, r0
 8000a82:	80fb      	strh	r3, [r7, #6]
 8000a84:	460b      	mov	r3, r1
 8000a86:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000a88:	f7ff fdde 	bl	8000648 <ST7735_Select>

    while(*str) {
 8000a8c:	e033      	b.n	8000af6 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	7d3a      	ldrb	r2, [r7, #20]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a1f      	ldr	r2, [pc, #124]	@ (8000b14 <ST7735_WriteString+0xa0>)
 8000a96:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	db16      	blt.n	8000acc <ST7735_WriteString+0x58>
            x = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000aa2:	7d7b      	ldrb	r3, [r7, #21]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	88bb      	ldrh	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000aac:	88bb      	ldrh	r3, [r7, #4]
 8000aae:	7d7a      	ldrb	r2, [r7, #21]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a19      	ldr	r2, [pc, #100]	@ (8000b18 <ST7735_WriteString+0xa4>)
 8000ab4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	da21      	bge.n	8000b00 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b20      	cmp	r3, #32
 8000ac2:	d103      	bne.n	8000acc <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	603b      	str	r3, [r7, #0]
                continue;
 8000aca:	e014      	b.n	8000af6 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	88b9      	ldrh	r1, [r7, #4]
 8000ad2:	88f8      	ldrh	r0, [r7, #6]
 8000ad4:	8c3b      	ldrh	r3, [r7, #32]
 8000ad6:	9302      	str	r3, [sp, #8]
 8000ad8:	8bbb      	ldrh	r3, [r7, #28]
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	f7ff ff4f 	bl	8000984 <ST7735_WriteChar>
        x += font.width;
 8000ae6:	7d3b      	ldrb	r3, [r7, #20]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	4413      	add	r3, r2
 8000aee:	80fb      	strh	r3, [r7, #6]
        str++;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1c7      	bne.n	8000a8e <ST7735_WriteString+0x1a>
 8000afe:	e000      	b.n	8000b02 <ST7735_WriteString+0x8e>
                break;
 8000b00:	bf00      	nop
    }

    ST7735_Unselect();
 8000b02:	f7ff fdad 	bl	8000660 <ST7735_Unselect>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b10:	b002      	add	sp, #8
 8000b12:	4770      	bx	lr
 8000b14:	2000008c 	.word	0x2000008c
 8000b18:	2000008e 	.word	0x2000008e

08000b1c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4604      	mov	r4, r0
 8000b24:	4608      	mov	r0, r1
 8000b26:	4611      	mov	r1, r2
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4623      	mov	r3, r4
 8000b2c:	80fb      	strh	r3, [r7, #6]
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80bb      	strh	r3, [r7, #4]
 8000b32:	460b      	mov	r3, r1
 8000b34:	807b      	strh	r3, [r7, #2]
 8000b36:	4613      	mov	r3, r2
 8000b38:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	4a37      	ldr	r2, [pc, #220]	@ (8000c1c <ST7735_FillRectangle+0x100>)
 8000b3e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b42:	4293      	cmp	r3, r2
 8000b44:	da66      	bge.n	8000c14 <ST7735_FillRectangle+0xf8>
 8000b46:	88bb      	ldrh	r3, [r7, #4]
 8000b48:	4a35      	ldr	r2, [pc, #212]	@ (8000c20 <ST7735_FillRectangle+0x104>)
 8000b4a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	da60      	bge.n	8000c14 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8000b52:	88fa      	ldrh	r2, [r7, #6]
 8000b54:	887b      	ldrh	r3, [r7, #2]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a30      	ldr	r2, [pc, #192]	@ (8000c1c <ST7735_FillRectangle+0x100>)
 8000b5a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	dd06      	ble.n	8000b70 <ST7735_FillRectangle+0x54>
 8000b62:	4b2e      	ldr	r3, [pc, #184]	@ (8000c1c <ST7735_FillRectangle+0x100>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000b70:	88ba      	ldrh	r2, [r7, #4]
 8000b72:	883b      	ldrh	r3, [r7, #0]
 8000b74:	4413      	add	r3, r2
 8000b76:	4a2a      	ldr	r2, [pc, #168]	@ (8000c20 <ST7735_FillRectangle+0x104>)
 8000b78:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	dd06      	ble.n	8000b8e <ST7735_FillRectangle+0x72>
 8000b80:	4b27      	ldr	r3, [pc, #156]	@ (8000c20 <ST7735_FillRectangle+0x104>)
 8000b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000b8e:	f7ff fd5b 	bl	8000648 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	b2d8      	uxtb	r0, r3
 8000b96:	88bb      	ldrh	r3, [r7, #4]
 8000b98:	b2d9      	uxtb	r1, r3
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	887b      	ldrh	r3, [r7, #2]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	4413      	add	r3, r2
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	b2dc      	uxtb	r4, r3
 8000baa:	88bb      	ldrh	r3, [r7, #4]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	883b      	ldrh	r3, [r7, #0]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4413      	add	r3, r2
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4622      	mov	r2, r4
 8000bbc:	f7ff fdee 	bl	800079c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000bc0:	8c3b      	ldrh	r3, [r7, #32]
 8000bc2:	0a1b      	lsrs	r3, r3, #8
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	733b      	strb	r3, [r7, #12]
 8000bca:	8c3b      	ldrh	r3, [r7, #32]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	4813      	ldr	r0, [pc, #76]	@ (8000c24 <ST7735_FillRectangle+0x108>)
 8000bd6:	f002 f85d 	bl	8002c94 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000bda:	883b      	ldrh	r3, [r7, #0]
 8000bdc:	80bb      	strh	r3, [r7, #4]
 8000bde:	e013      	b.n	8000c08 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	80fb      	strh	r3, [r7, #6]
 8000be4:	e00a      	b.n	8000bfc <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000be6:	f107 010c 	add.w	r1, r7, #12
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	2202      	movs	r2, #2
 8000bf0:	480d      	ldr	r0, [pc, #52]	@ (8000c28 <ST7735_FillRectangle+0x10c>)
 8000bf2:	f002 ff9c 	bl	8003b2e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	80fb      	strh	r3, [r7, #6]
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1f1      	bne.n	8000be6 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8000c02:	88bb      	ldrh	r3, [r7, #4]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	80bb      	strh	r3, [r7, #4]
 8000c08:	88bb      	ldrh	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1e8      	bne.n	8000be0 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8000c0e:	f7ff fd27 	bl	8000660 <ST7735_Unselect>
 8000c12:	e000      	b.n	8000c16 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8000c14:	bf00      	nop
}
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd90      	pop	{r4, r7, pc}
 8000c1c:	2000008c 	.word	0x2000008c
 8000c20:	2000008e 	.word	0x2000008e
 8000c24:	40020800 	.word	0x40020800
 8000c28:	20000228 	.word	0x20000228

08000c2c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c30:	f3bf 8f4f 	dsb	sy
}
 8000c34:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <__NVIC_SystemReset+0x24>)
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c3e:	4904      	ldr	r1, [pc, #16]	@ (8000c50 <__NVIC_SystemReset+0x24>)
 8000c40:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <__NVIC_SystemReset+0x28>)
 8000c42:	4313      	orrs	r3, r2
 8000c44:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c46:	f3bf 8f4f 	dsb	sy
}
 8000c4a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <__NVIC_SystemReset+0x20>
 8000c50:	e000ed00 	.word	0xe000ed00
 8000c54:	05fa0004 	.word	0x05fa0004

08000c58 <bootloader_uart_read_data>:

uint8_t bl_rx_buffer[BL_RX_LEN];
UART_HandleTypeDef *C_UART = NULL;

void  bootloader_uart_read_data(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
    uint8_t rcv_len=0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bl_rx_buffer,0,200);
 8000c62:	22c8      	movs	r2, #200	@ 0xc8
 8000c64:	2100      	movs	r1, #0
 8000c66:	481e      	ldr	r0, [pc, #120]	@ (8000ce0 <bootloader_uart_read_data+0x88>)
 8000c68:	f004 f884 	bl	8004d74 <memset>
		//here we will read and decode the commands coming from host
		//first read only one byte from the host , which is the "length" field of the command packet
        HAL_UART_Receive(C_UART,bl_rx_buffer,1,HAL_MAX_DELAY);
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <bootloader_uart_read_data+0x8c>)
 8000c6e:	6818      	ldr	r0, [r3, #0]
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	2201      	movs	r2, #1
 8000c76:	491a      	ldr	r1, [pc, #104]	@ (8000ce0 <bootloader_uart_read_data+0x88>)
 8000c78:	f003 fa55 	bl	8004126 <HAL_UART_Receive>
		rcv_len= bl_rx_buffer[0];
 8000c7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <bootloader_uart_read_data+0x88>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART,&bl_rx_buffer[1],rcv_len,HAL_MAX_DELAY);
 8000c82:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <bootloader_uart_read_data+0x8c>)
 8000c84:	6818      	ldr	r0, [r3, #0]
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	4916      	ldr	r1, [pc, #88]	@ (8000ce8 <bootloader_uart_read_data+0x90>)
 8000c90:	f003 fa49 	bl	8004126 <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <bootloader_uart_read_data+0x88>)
 8000c96:	785b      	ldrb	r3, [r3, #1]
 8000c98:	3b51      	subs	r3, #81	@ 0x51
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d81a      	bhi.n	8000cd4 <bootloader_uart_read_data+0x7c>
 8000c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8000ca4 <bootloader_uart_read_data+0x4c>)
 8000ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca4:	08000cb5 	.word	0x08000cb5
 8000ca8:	08000cbd 	.word	0x08000cbd
 8000cac:	08000cc5 	.word	0x08000cc5
 8000cb0:	08000ccd 	.word	0x08000ccd
		{
            case BL_GET_CID:
                bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000cb4:	480a      	ldr	r0, [pc, #40]	@ (8000ce0 <bootloader_uart_read_data+0x88>)
 8000cb6:	f000 f8d7 	bl	8000e68 <bootloader_handle_getcid_cmd>
                break;
 8000cba:	e00f      	b.n	8000cdc <bootloader_uart_read_data+0x84>
            case BL_GO_TO_RESET:
            	bootloader_go_reset_cmd(bl_rx_buffer);
 8000cbc:	4808      	ldr	r0, [pc, #32]	@ (8000ce0 <bootloader_uart_read_data+0x88>)
 8000cbe:	f000 f88f 	bl	8000de0 <bootloader_go_reset_cmd>
                break;
 8000cc2:	e00b      	b.n	8000cdc <bootloader_uart_read_data+0x84>
            case BL_FLASH_ERASE:
                bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000cc4:	4806      	ldr	r0, [pc, #24]	@ (8000ce0 <bootloader_uart_read_data+0x88>)
 8000cc6:	f000 f91b 	bl	8000f00 <bootloader_handle_flash_erase_cmd>
                break;
 8000cca:	e007      	b.n	8000cdc <bootloader_uart_read_data+0x84>
            case BL_MEM_WRITE:
                bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000ccc:	4804      	ldr	r0, [pc, #16]	@ (8000ce0 <bootloader_uart_read_data+0x88>)
 8000cce:	f000 f981 	bl	8000fd4 <bootloader_handle_mem_write_cmd>
                break;
 8000cd2:	e003      	b.n	8000cdc <bootloader_uart_read_data+0x84>
             default:
                printf("BL_MSG:Invalid command code received from host \n");
 8000cd4:	4805      	ldr	r0, [pc, #20]	@ (8000cec <bootloader_uart_read_data+0x94>)
 8000cd6:	f003 ff17 	bl	8004b08 <puts>
                break;
 8000cda:	bf00      	nop
		memset(bl_rx_buffer,0,200);
 8000cdc:	e7c1      	b.n	8000c62 <bootloader_uart_read_data+0xa>
 8000cde:	bf00      	nop
 8000ce0:	20000098 	.word	0x20000098
 8000ce4:	20000160 	.word	0x20000160
 8000ce8:	20000099 	.word	0x20000099
 8000cec:	08005c34 	.word	0x08005c34

08000cf0 <bootloader_jump_to_user_app>:
		}
	}
}

void bootloader_jump_to_user_app(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08c      	sub	sp, #48	@ 0x30
 8000cf4:	af00      	add	r7, sp, #0
	 void (*app_reset_handler)(void);

	    printf("BL_MSG: bootloader_jump_to_user_app\n");
 8000cf6:	4831      	ldr	r0, [pc, #196]	@ (8000dbc <bootloader_jump_to_user_app+0xcc>)
 8000cf8:	f003 ff06 	bl	8004b08 <puts>

	    // 1. Fetch MSP and Reset Handler
	    uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 8000cfc:	4b30      	ldr	r3, [pc, #192]	@ (8000dc0 <bootloader_jump_to_user_app+0xd0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	62bb      	str	r3, [r7, #40]	@ 0x28
	    uint32_t reset_handler_address = *(volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS + 4);
 8000d02:	4b30      	ldr	r3, [pc, #192]	@ (8000dc4 <bootloader_jump_to_user_app+0xd4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24

	    char msg[23];
		snprintf(msg, sizeof(msg), "MSP: 0x%08lX\n", msp_value);
 8000d08:	1d38      	adds	r0, r7, #4
 8000d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d0c:	4a2e      	ldr	r2, [pc, #184]	@ (8000dc8 <bootloader_jump_to_user_app+0xd8>)
 8000d0e:	2117      	movs	r1, #23
 8000d10:	f003 ff02 	bl	8004b18 <sniprintf>
		printf("%s",msg);
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	482c      	ldr	r0, [pc, #176]	@ (8000dcc <bootloader_jump_to_user_app+0xdc>)
 8000d1a:	f003 fe8d 	bl	8004a38 <iprintf>
		print_To_display(msg);
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 fc49 	bl	80015b8 <print_To_display>

		snprintf(msg, sizeof(msg), "Reset: 0x%08lX\n", reset_handler_address);
 8000d26:	1d38      	adds	r0, r7, #4
 8000d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2a:	4a29      	ldr	r2, [pc, #164]	@ (8000dd0 <bootloader_jump_to_user_app+0xe0>)
 8000d2c:	2117      	movs	r1, #23
 8000d2e:	f003 fef3 	bl	8004b18 <sniprintf>
		printf("%s",msg);
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	4619      	mov	r1, r3
 8000d36:	4825      	ldr	r0, [pc, #148]	@ (8000dcc <bootloader_jump_to_user_app+0xdc>)
 8000d38:	f003 fe7e 	bl	8004a38 <iprintf>
		print_To_display(msg);
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fc3a 	bl	80015b8 <print_To_display>

	    // 2. Disable interrupts
	   // __disable_irq();
	    HAL_RCC_DeInit();
 8000d44:	f002 fad4 	bl	80032f0 <HAL_RCC_DeInit>
		HAL_DeInit();
 8000d48:	f001 f93e 	bl	8001fc8 <HAL_DeInit>

		// Reset SysTick
		SysTick->CTRL = 0;
 8000d4c:	4b21      	ldr	r3, [pc, #132]	@ (8000dd4 <bootloader_jump_to_user_app+0xe4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 8000d52:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <bootloader_jump_to_user_app+0xe4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
 8000d58:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd4 <bootloader_jump_to_user_app+0xe4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
		//__disable_irq();
		for (int i = 0; i < 8; i++) {
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d62:	e010      	b.n	8000d86 <bootloader_jump_to_user_app+0x96>
			NVIC->ICER[i] = 0xFFFFFFFF;
 8000d64:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd8 <bootloader_jump_to_user_app+0xe8>)
 8000d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d68:	3320      	adds	r3, #32
 8000d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			NVIC->ICPR[i] = 0xFFFFFFFF;
 8000d72:	4a19      	ldr	r2, [pc, #100]	@ (8000dd8 <bootloader_jump_to_user_app+0xe8>)
 8000d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d76:	3360      	adds	r3, #96	@ 0x60
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 8; i++) {
 8000d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d82:	3301      	adds	r3, #1
 8000d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d88:	2b07      	cmp	r3, #7
 8000d8a:	ddeb      	ble.n	8000d64 <bootloader_jump_to_user_app+0x74>
		}
	    // 3. Set vector table offset and MSP
	    SCB->VTOR = FLASH_SECTOR2_BASE_ADDRESS;
 8000d8c:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <bootloader_jump_to_user_app+0xec>)
 8000d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc0 <bootloader_jump_to_user_app+0xd0>)
 8000d90:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d92:	f3bf 8f4f 	dsb	sy
}
 8000d96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d98:	f3bf 8f6f 	isb	sy
}
 8000d9c:	bf00      	nop
 8000d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000da0:	61fb      	str	r3, [r7, #28]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	f383 8808 	msr	MSP, r3
}
 8000da8:	bf00      	nop
		__DSB();
		__ISB();
	    __set_MSP(msp_value);

	    // 4. Jump to application
	    app_reset_handler = (void *)reset_handler_address;
 8000daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dac:	623b      	str	r3, [r7, #32]
	    app_reset_handler();
 8000dae:	6a3b      	ldr	r3, [r7, #32]
 8000db0:	4798      	blx	r3

}
 8000db2:	bf00      	nop
 8000db4:	3730      	adds	r7, #48	@ 0x30
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	08005c64 	.word	0x08005c64
 8000dc0:	08008000 	.word	0x08008000
 8000dc4:	08008004 	.word	0x08008004
 8000dc8:	08005c88 	.word	0x08005c88
 8000dcc:	08005c98 	.word	0x08005c98
 8000dd0:	08005c9c 	.word	0x08005c9c
 8000dd4:	e000e010 	.word	0xe000e010
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <bootloader_go_reset_cmd>:

void bootloader_go_reset_cmd(uint8_t *pBuffer)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	printf("BL_MSG:bootloader_go_reset_cmd\n");
 8000de8:	481a      	ldr	r0, [pc, #104]	@ (8000e54 <bootloader_go_reset_cmd+0x74>)
 8000dea:	f003 fe8d 	bl	8004b08 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <bootloader_go_reset_cmd+0x78>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	60fb      	str	r3, [r7, #12]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3b04      	subs	r3, #4
 8000dfa:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <bootloader_go_reset_cmd+0x78>)
 8000dfc:	4413      	add	r3, r2
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60bb      	str	r3, [r7, #8]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	3b04      	subs	r3, #4
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4813      	ldr	r0, [pc, #76]	@ (8000e58 <bootloader_go_reset_cmd+0x78>)
 8000e0c:	f000 f9b0 	bl	8001170 <bootloader_verify_crc>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d114      	bne.n	8000e40 <bootloader_go_reset_cmd+0x60>
	{
		 printf("BL_MSG:checksum success !!\n");
 8000e16:	4811      	ldr	r0, [pc, #68]	@ (8000e5c <bootloader_go_reset_cmd+0x7c>)
 8000e18:	f003 fe76 	bl	8004b08 <puts>
		 bootloader_send_ack(pBuffer[0],1);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2101      	movs	r1, #1
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f974 	bl	8001110 <bootloader_send_ack>
		 bootloader_uart_write_data(ADDR_VALID, 1);
 8000e28:	2101      	movs	r1, #1
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f9d4 	bl	80011d8 <bootloader_uart_write_data>
		 printf("BL_MSG:Going to reset... !!\n");
 8000e30:	480b      	ldr	r0, [pc, #44]	@ (8000e60 <bootloader_go_reset_cmd+0x80>)
 8000e32:	f003 fe69 	bl	8004b08 <puts>
		 HAL_Delay(100);
 8000e36:	2064      	movs	r0, #100	@ 0x64
 8000e38:	f001 f94c 	bl	80020d4 <HAL_Delay>
		 NVIC_SystemReset();
 8000e3c:	f7ff fef6 	bl	8000c2c <__NVIC_SystemReset>
	}
	else
	{
		 printf("BL_MSG:checksum fail !!\n");
 8000e40:	4808      	ldr	r0, [pc, #32]	@ (8000e64 <bootloader_go_reset_cmd+0x84>)
 8000e42:	f003 fe61 	bl	8004b08 <puts>
		 bootloader_send_nack();
 8000e46:	f000 f97f 	bl	8001148 <bootloader_send_nack>
	}
}
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	08005cac 	.word	0x08005cac
 8000e58:	20000098 	.word	0x20000098
 8000e5c:	08005ccc 	.word	0x08005ccc
 8000e60:	08005ce8 	.word	0x08005ce8
 8000e64:	08005d04 	.word	0x08005d04

08000e68 <bootloader_handle_getcid_cmd>:

 void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
 {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 	uint16_t bl_cid_num = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	81fb      	strh	r3, [r7, #14]
 	printf("BL_MSG:bootloader_handle_getcid_cmd\n");
 8000e74:	481d      	ldr	r0, [pc, #116]	@ (8000eec <bootloader_handle_getcid_cmd+0x84>)
 8000e76:	f003 fe47 	bl	8004b08 <puts>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef0 <bootloader_handle_getcid_cmd+0x88>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3b04      	subs	r3, #4
 8000e86:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef0 <bootloader_handle_getcid_cmd+0x88>)
 8000e88:	4413      	add	r3, r2
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	613b      	str	r3, [r7, #16]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3b04      	subs	r3, #4
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4619      	mov	r1, r3
 8000e96:	4816      	ldr	r0, [pc, #88]	@ (8000ef0 <bootloader_handle_getcid_cmd+0x88>)
 8000e98:	f000 f96a 	bl	8001170 <bootloader_verify_crc>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d11a      	bne.n	8000ed8 <bootloader_handle_getcid_cmd+0x70>
 	{
         printf("BL_MSG:checksum success !!\n");
 8000ea2:	4814      	ldr	r0, [pc, #80]	@ (8000ef4 <bootloader_handle_getcid_cmd+0x8c>)
 8000ea4:	f003 fe30 	bl	8004b08 <puts>
         bootloader_send_ack(pBuffer[0],2);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2102      	movs	r1, #2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f92e 	bl	8001110 <bootloader_send_ack>
         bl_cid_num = get_mcu_chip_id();
 8000eb4:	f000 f9a4 	bl	8001200 <get_mcu_chip_id>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	81fb      	strh	r3, [r7, #14]
         printf("BL_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
 8000ebc:	89fb      	ldrh	r3, [r7, #14]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	89fb      	ldrh	r3, [r7, #14]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	480c      	ldr	r0, [pc, #48]	@ (8000ef8 <bootloader_handle_getcid_cmd+0x90>)
 8000ec6:	f003 fdb7 	bl	8004a38 <iprintf>
         bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000eca:	f107 030e 	add.w	r3, r7, #14
 8000ece:	2102      	movs	r1, #2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f981 	bl	80011d8 <bootloader_uart_write_data>
 	}else
 	{
         printf("BL_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}
 }
 8000ed6:	e004      	b.n	8000ee2 <bootloader_handle_getcid_cmd+0x7a>
         printf("BL_MSG:checksum fail !!\n");
 8000ed8:	4808      	ldr	r0, [pc, #32]	@ (8000efc <bootloader_handle_getcid_cmd+0x94>)
 8000eda:	f003 fe15 	bl	8004b08 <puts>
         bootloader_send_nack();
 8000ede:	f000 f933 	bl	8001148 <bootloader_send_nack>
 }
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	08005d1c 	.word	0x08005d1c
 8000ef0:	20000098 	.word	0x20000098
 8000ef4:	08005ccc 	.word	0x08005ccc
 8000ef8:	08005d40 	.word	0x08005d40
 8000efc:	08005d04 	.word	0x08005d04

08000f00 <bootloader_handle_flash_erase_cmd>:

 void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
 {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
     uint8_t erase_status = 0x00;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]
     printf("BL_MSG:bootloader_handle_flash_erase_cmd\n");
 8000f0c:	482a      	ldr	r0, [pc, #168]	@ (8000fb8 <bootloader_handle_flash_erase_cmd+0xb8>)
 8000f0e:	f003 fdfb 	bl	8004b08 <puts>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000f12:	4b2a      	ldr	r3, [pc, #168]	@ (8000fbc <bootloader_handle_flash_erase_cmd+0xbc>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3b04      	subs	r3, #4
 8000f1e:	4a27      	ldr	r2, [pc, #156]	@ (8000fbc <bootloader_handle_flash_erase_cmd+0xbc>)
 8000f20:	4413      	add	r3, r2
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	613b      	str	r3, [r7, #16]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3b04      	subs	r3, #4
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4823      	ldr	r0, [pc, #140]	@ (8000fbc <bootloader_handle_flash_erase_cmd+0xbc>)
 8000f30:	f000 f91e 	bl	8001170 <bootloader_verify_crc>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d135      	bne.n	8000fa6 <bootloader_handle_flash_erase_cmd+0xa6>
 	{
         printf("BL_MSG:checksum success !!\n");
 8000f3a:	4821      	ldr	r0, [pc, #132]	@ (8000fc0 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000f3c:	f003 fde4 	bl	8004b08 <puts>
         bootloader_send_ack(pBuffer[0],1);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2101      	movs	r1, #1
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f8e2 	bl	8001110 <bootloader_send_ack>
         printf("BL_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3302      	adds	r3, #2
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	4619      	mov	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3303      	adds	r3, #3
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4819      	ldr	r0, [pc, #100]	@ (8000fc4 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000f5e:	f003 fd6b 	bl	8004a38 <iprintf>

         HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2101      	movs	r1, #1
 8000f66:	4818      	ldr	r0, [pc, #96]	@ (8000fc8 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000f68:	f001 fe94 	bl	8002c94 <HAL_GPIO_WritePin>
         erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3302      	adds	r3, #2
 8000f70:	781a      	ldrb	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3303      	adds	r3, #3
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	f000 f990 	bl	80012a0 <execute_flash_erase>
 8000f80:	4603      	mov	r3, r0
 8000f82:	73fb      	strb	r3, [r7, #15]
         HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2101      	movs	r1, #1
 8000f88:	480f      	ldr	r0, [pc, #60]	@ (8000fc8 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000f8a:	f001 fe83 	bl	8002c94 <HAL_GPIO_WritePin>

         printf("BL_MSG: flash erase status: %#x\n",erase_status);
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	4619      	mov	r1, r3
 8000f92:	480e      	ldr	r0, [pc, #56]	@ (8000fcc <bootloader_handle_flash_erase_cmd+0xcc>)
 8000f94:	f003 fd50 	bl	8004a38 <iprintf>

         bootloader_uart_write_data(&erase_status,1);
 8000f98:	f107 030f 	add.w	r3, r7, #15
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f91a 	bl	80011d8 <bootloader_uart_write_data>
 	}else
 	{
         printf("BL_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}
 }
 8000fa4:	e004      	b.n	8000fb0 <bootloader_handle_flash_erase_cmd+0xb0>
         printf("BL_MSG:checksum fail !!\n");
 8000fa6:	480a      	ldr	r0, [pc, #40]	@ (8000fd0 <bootloader_handle_flash_erase_cmd+0xd0>)
 8000fa8:	f003 fdae 	bl	8004b08 <puts>
         bootloader_send_nack();
 8000fac:	f000 f8cc 	bl	8001148 <bootloader_send_nack>
 }
 8000fb0:	bf00      	nop
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	08005d5c 	.word	0x08005d5c
 8000fbc:	20000098 	.word	0x20000098
 8000fc0:	08005ccc 	.word	0x08005ccc
 8000fc4:	08005d88 	.word	0x08005d88
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	08005db8 	.word	0x08005db8
 8000fd0:	08005d04 	.word	0x08005d04

08000fd4 <bootloader_handle_mem_write_cmd>:


 void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
 {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b096      	sub	sp, #88	@ 0x58
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 	uint8_t addr_valid = ADDR_VALID;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 	uint8_t write_status = 0x00;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 	uint8_t chksum =0, len=0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 	len = pBuffer[0];
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 	uint8_t payload_len = pBuffer[6];
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	799b      	ldrb	r3, [r3, #6]
 8001000:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

 	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800100a:	653b      	str	r3, [r7, #80]	@ 0x50

 	chksum = pBuffer[len];
 800100c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	4413      	add	r3, r2
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

     printf("BL_MSG:bootloader_handle_mem_write_cmd\n");
 800101a:	4834      	ldr	r0, [pc, #208]	@ (80010ec <bootloader_handle_mem_write_cmd+0x118>)
 800101c:	f003 fd74 	bl	8004b08 <puts>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8001020:	4b33      	ldr	r3, [pc, #204]	@ (80010f0 <bootloader_handle_mem_write_cmd+0x11c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	64fb      	str	r3, [r7, #76]	@ 0x4c

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8001028:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800102a:	3b04      	subs	r3, #4
 800102c:	4a30      	ldr	r2, [pc, #192]	@ (80010f0 <bootloader_handle_mem_write_cmd+0x11c>)
 800102e:	4413      	add	r3, r2
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	64bb      	str	r3, [r7, #72]	@ 0x48


 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8001034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001036:	3b04      	subs	r3, #4
 8001038:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800103a:	4619      	mov	r1, r3
 800103c:	482c      	ldr	r0, [pc, #176]	@ (80010f0 <bootloader_handle_mem_write_cmd+0x11c>)
 800103e:	f000 f897 	bl	8001170 <bootloader_verify_crc>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d147      	bne.n	80010d8 <bootloader_handle_mem_write_cmd+0x104>
 	{
         printf("BL_MSG:checksum success !!\n");
 8001048:	482a      	ldr	r0, [pc, #168]	@ (80010f4 <bootloader_handle_mem_write_cmd+0x120>)
 800104a:	f003 fd5d 	bl	8004b08 <puts>

         bootloader_send_ack(pBuffer[0],1);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2101      	movs	r1, #1
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f85b 	bl	8001110 <bootloader_send_ack>

         char msg[60];
         snprintf(msg, sizeof(msg), "mem write addr : %#x\n", mem_address);
 800105a:	f107 0008 	add.w	r0, r7, #8
 800105e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001060:	4a25      	ldr	r2, [pc, #148]	@ (80010f8 <bootloader_handle_mem_write_cmd+0x124>)
 8001062:	213c      	movs	r1, #60	@ 0x3c
 8001064:	f003 fd58 	bl	8004b18 <sniprintf>
         printf("%s", msg);
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	4619      	mov	r1, r3
 800106e:	4823      	ldr	r0, [pc, #140]	@ (80010fc <bootloader_handle_mem_write_cmd+0x128>)
 8001070:	f003 fce2 	bl	8004a38 <iprintf>

 		if( verify_address(mem_address) == ADDR_VALID )
 8001074:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001076:	f000 f8d5 	bl	8001224 <verify_address>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d11e      	bne.n	80010be <bootloader_handle_mem_write_cmd+0xea>
 		{

             printf("BL_MSG: valid mem write address\n");
 8001080:	481f      	ldr	r0, [pc, #124]	@ (8001100 <bootloader_handle_mem_write_cmd+0x12c>)
 8001082:	f003 fd41 	bl	8004b08 <puts>

             //glow the led to indicate bootloader is currently writing to memory
             HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001086:	2201      	movs	r2, #1
 8001088:	2101      	movs	r1, #1
 800108a:	481e      	ldr	r0, [pc, #120]	@ (8001104 <bootloader_handle_mem_write_cmd+0x130>)
 800108c:	f001 fe02 	bl	8002c94 <HAL_GPIO_WritePin>

             //execute mem write
             write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3307      	adds	r3, #7
 8001094:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8001098:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f947 	bl	800132e <execute_mem_write>
 80010a0:	4603      	mov	r3, r0
 80010a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

             //turn off the led to indicate memory write is over
             HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2101      	movs	r1, #1
 80010aa:	4816      	ldr	r0, [pc, #88]	@ (8001104 <bootloader_handle_mem_write_cmd+0x130>)
 80010ac:	f001 fdf2 	bl	8002c94 <HAL_GPIO_WritePin>

             //inform host about the status
             bootloader_uart_write_data(&write_status,1);
 80010b0:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 80010b4:	2101      	movs	r1, #1
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f88e 	bl	80011d8 <bootloader_uart_write_data>
 	else
 	{
         printf("BL_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}
 }
 80010bc:	e011      	b.n	80010e2 <bootloader_handle_mem_write_cmd+0x10e>
             printf("BL_MSG: invalid mem write address\n");
 80010be:	4812      	ldr	r0, [pc, #72]	@ (8001108 <bootloader_handle_mem_write_cmd+0x134>)
 80010c0:	f003 fd22 	bl	8004b08 <puts>
             write_status = ADDR_INVALID;
 80010c4:	2301      	movs	r3, #1
 80010c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
             bootloader_uart_write_data(&write_status,1);
 80010ca:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 80010ce:	2101      	movs	r1, #1
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f881 	bl	80011d8 <bootloader_uart_write_data>
 }
 80010d6:	e004      	b.n	80010e2 <bootloader_handle_mem_write_cmd+0x10e>
         printf("BL_MSG:checksum fail !!\n");
 80010d8:	480c      	ldr	r0, [pc, #48]	@ (800110c <bootloader_handle_mem_write_cmd+0x138>)
 80010da:	f003 fd15 	bl	8004b08 <puts>
         bootloader_send_nack();
 80010de:	f000 f833 	bl	8001148 <bootloader_send_nack>
 }
 80010e2:	bf00      	nop
 80010e4:	3758      	adds	r7, #88	@ 0x58
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	08005ddc 	.word	0x08005ddc
 80010f0:	20000098 	.word	0x20000098
 80010f4:	08005ccc 	.word	0x08005ccc
 80010f8:	08005e04 	.word	0x08005e04
 80010fc:	08005c98 	.word	0x08005c98
 8001100:	08005e1c 	.word	0x08005e1c
 8001104:	40020800 	.word	0x40020800
 8001108:	08005e3c 	.word	0x08005e3c
 800110c:	08005d04 	.word	0x08005d04

08001110 <bootloader_send_ack>:


 void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
 {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	460a      	mov	r2, r1
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
 	 //here we send 2 byte.. first byte is ack and the second byte is len value
 	uint8_t ack_buf[2];
 	ack_buf[0] = BL_ACK;
 8001120:	23a5      	movs	r3, #165	@ 0xa5
 8001122:	733b      	strb	r3, [r7, #12]
 	ack_buf[1] = follow_len;
 8001124:	79bb      	ldrb	r3, [r7, #6]
 8001126:	737b      	strb	r3, [r7, #13]
 	HAL_UART_Transmit(C_UART,ack_buf,2,HAL_MAX_DELAY);
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <bootloader_send_ack+0x34>)
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	f107 010c 	add.w	r1, r7, #12
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2202      	movs	r2, #2
 8001136:	f002 ff6b 	bl	8004010 <HAL_UART_Transmit>

 }
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000160 	.word	0x20000160

08001148 <bootloader_send_nack>:

 /*This function sends NACK */
 void bootloader_send_nack(void)
 {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 	uint8_t nack = BL_NACK;
 800114e:	237f      	movs	r3, #127	@ 0x7f
 8001150:	71fb      	strb	r3, [r7, #7]
 	HAL_UART_Transmit(C_UART,&nack,1,HAL_MAX_DELAY);
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <bootloader_send_nack+0x24>)
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	1df9      	adds	r1, r7, #7
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
 800115c:	2201      	movs	r2, #1
 800115e:	f002 ff57 	bl	8004010 <HAL_UART_Transmit>
 }
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000160 	.word	0x20000160

08001170 <bootloader_verify_crc>:

 //This verifies the CRC of the given buffer in pData .
 uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
 {
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
     uint32_t uwCRCValue=0xff;
 800117c:	23ff      	movs	r3, #255	@ 0xff
 800117e:	61fb      	str	r3, [r7, #28]

     for (uint32_t i=0 ; i < len ; i++)
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	e00f      	b.n	80011a6 <bootloader_verify_crc+0x36>
 	{
         uint32_t i_data = pData[i];
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	4413      	add	r3, r2
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	617b      	str	r3, [r7, #20]
         uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2201      	movs	r2, #1
 8001196:	4619      	mov	r1, r3
 8001198:	480e      	ldr	r0, [pc, #56]	@ (80011d4 <bootloader_verify_crc+0x64>)
 800119a:	f001 f8c0 	bl	800231e <HAL_CRC_Accumulate>
 800119e:	61f8      	str	r0, [r7, #28]
     for (uint32_t i=0 ; i < len ; i++)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	3301      	adds	r3, #1
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d3eb      	bcc.n	8001186 <bootloader_verify_crc+0x16>
 	}

 	 /* Reset CRC Calculation Unit */
   __HAL_CRC_DR_RESET(&hcrc);
 80011ae:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <bootloader_verify_crc+0x64>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <bootloader_verify_crc+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f042 0201 	orr.w	r2, r2, #1
 80011bc:	609a      	str	r2, [r3, #8]

 	if( uwCRCValue == crc_host)
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d101      	bne.n	80011ca <bootloader_verify_crc+0x5a>
 	{
 		return VERIFY_CRC_SUCCESS;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <bootloader_verify_crc+0x5c>
 	}

 	return VERIFY_CRC_FAIL;
 80011ca:	2301      	movs	r3, #1
 }
 80011cc:	4618      	mov	r0, r3
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000220 	.word	0x20000220

080011d8 <bootloader_uart_write_data>:


 void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
 {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
     /*you can replace the below ST's USART driver API call with your MCUs driver API call */
 	HAL_UART_Transmit(C_UART,pBuffer,len,HAL_MAX_DELAY);
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <bootloader_uart_write_data+0x24>)
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f002 ff0e 	bl	8004010 <HAL_UART_Transmit>

 }
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000160 	.word	0x20000160

08001200 <get_mcu_chip_id>:

 uint16_t get_mcu_chip_id(void)
 {
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 	uint16_t cid;
 	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <get_mcu_chip_id+0x20>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	b29b      	uxth	r3, r3
 800120c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001210:	80fb      	strh	r3, [r7, #6]
 	return  cid;
 8001212:	88fb      	ldrh	r3, [r7, #6]
 }
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e0042000 	.word	0xe0042000

08001224 <verify_address>:


 uint8_t verify_address(uint32_t go_address)
 {
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 	//can we jump to backup sram memory ? yes
 	//can we jump to peripheral memory ? its possible , but dont allow. so no
 	//can we jump to external memory ? yes.

 //incomplete -poorly written .. optimize it
 	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001232:	d305      	bcc.n	8001240 <verify_address+0x1c>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a15      	ldr	r2, [pc, #84]	@ (800128c <verify_address+0x68>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d801      	bhi.n	8001240 <verify_address+0x1c>
 	{
 		return ADDR_VALID;
 800123c:	2300      	movs	r3, #0
 800123e:	e01e      	b.n	800127e <verify_address+0x5a>
 	}
 	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a12      	ldr	r2, [pc, #72]	@ (800128c <verify_address+0x68>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d305      	bcc.n	8001254 <verify_address+0x30>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a11      	ldr	r2, [pc, #68]	@ (8001290 <verify_address+0x6c>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d801      	bhi.n	8001254 <verify_address+0x30>
 	{
 		return ADDR_VALID;
 8001250:	2300      	movs	r3, #0
 8001252:	e014      	b.n	800127e <verify_address+0x5a>
 	}
 	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800125a:	d305      	bcc.n	8001268 <verify_address+0x44>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <verify_address+0x70>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d801      	bhi.n	8001268 <verify_address+0x44>
 	{
 		return ADDR_VALID;
 8001264:	2300      	movs	r3, #0
 8001266:	e00a      	b.n	800127e <verify_address+0x5a>
 	}
 	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a0b      	ldr	r2, [pc, #44]	@ (8001298 <verify_address+0x74>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d305      	bcc.n	800127c <verify_address+0x58>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <verify_address+0x78>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d801      	bhi.n	800127c <verify_address+0x58>
 	{
 		return ADDR_VALID;
 8001278:	2300      	movs	r3, #0
 800127a:	e000      	b.n	800127e <verify_address+0x5a>
 	}
 	else
 		return ADDR_INVALID;
 800127c:	2301      	movs	r3, #1
 }
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	2001c000 	.word	0x2001c000
 8001290:	20020000 	.word	0x20020000
 8001294:	0807ffff 	.word	0x0807ffff
 8001298:	40024000 	.word	0x40024000
 800129c:	40025000 	.word	0x40025000

080012a0 <execute_flash_erase>:

  uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
 {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	@ 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	460a      	mov	r2, r1
 80012aa:	71fb      	strb	r3, [r7, #7]
 80012ac:	4613      	mov	r3, r2
 80012ae:	71bb      	strb	r3, [r7, #6]
 	FLASH_EraseInitTypeDef flashErase_handle;
 	uint32_t sectorError;
 	HAL_StatusTypeDef status;


 	if( number_of_sector > 8 )
 80012b0:	79bb      	ldrb	r3, [r7, #6]
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d901      	bls.n	80012ba <execute_flash_erase+0x1a>
 		return INVALID_SECTOR;
 80012b6:	2304      	movs	r3, #4
 80012b8:	e035      	b.n	8001326 <execute_flash_erase+0x86>

 	if( (sector_number == 0xff ) || (sector_number <= 7) )
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	2bff      	cmp	r3, #255	@ 0xff
 80012be:	d002      	beq.n	80012c6 <execute_flash_erase+0x26>
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b07      	cmp	r3, #7
 80012c4:	d82e      	bhi.n	8001324 <execute_flash_erase+0x84>
 	{
 		if(sector_number == (uint8_t) 0xff)
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2bff      	cmp	r3, #255	@ 0xff
 80012ca:	d102      	bne.n	80012d2 <execute_flash_erase+0x32>
 		{
 			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80012cc:	2301      	movs	r3, #1
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	e012      	b.n	80012f8 <execute_flash_erase+0x58>
 		}else
 		{
 		    /*Here we are just calculating how many sectors needs to erased */
 			uint8_t remanining_sector = 8 - sector_number;
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	f1c3 0308 	rsb	r3, r3, #8
 80012d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
             if( number_of_sector > remanining_sector)
 80012dc:	79ba      	ldrb	r2, [r7, #6]
 80012de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d902      	bls.n	80012ec <execute_flash_erase+0x4c>
             {
             	number_of_sector = remanining_sector;
 80012e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012ea:	71bb      	strb	r3, [r7, #6]
             }
 			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
 			flashErase_handle.Sector = sector_number; // this is the initial sector
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	61bb      	str	r3, [r7, #24]
 			flashErase_handle.NbSectors = number_of_sector;
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	61fb      	str	r3, [r7, #28]
 		}
 		flashErase_handle.Banks = FLASH_BANK_1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]

 		/*Get access to touch the flash registers */
 		HAL_FLASH_Unlock();
 80012fc:	f001 f88c 	bl	8002418 <HAL_FLASH_Unlock>
 		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 8001300:	2302      	movs	r3, #2
 8001302:	623b      	str	r3, [r7, #32]
 		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8001304:	f107 020c 	add.w	r2, r7, #12
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f001 f9f4 	bl	80026fc <HAL_FLASHEx_Erase>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 		HAL_FLASH_Lock();
 800131a:	f001 f89f 	bl	800245c <HAL_FLASH_Lock>

 		return status;
 800131e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001322:	e000      	b.n	8001326 <execute_flash_erase+0x86>
 	}


 	return INVALID_SECTOR;
 8001324:	2304      	movs	r3, #4
 }
 8001326:	4618      	mov	r0, r3
 8001328:	3728      	adds	r7, #40	@ 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <execute_mem_write>:

 /*This function writes the contents of pBuffer to  "mem_address" byte by byte */
 //Note1 : Currently this function supports writing to Flash only .
 //Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
 uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
 {
 800132e:	b5b0      	push	{r4, r5, r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
     uint8_t status=HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	75fb      	strb	r3, [r7, #23]

     //We have to unlock flash module to get control of registers
     HAL_FLASH_Unlock();
 800133e:	f001 f86b 	bl	8002418 <HAL_FLASH_Unlock>

     for(uint32_t i = 0 ; i <len ; i++)
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	e014      	b.n	8001372 <execute_mem_write+0x44>
     {
         //Here we program the flash byte by byte
         status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	18d1      	adds	r1, r2, r3
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4413      	add	r3, r2
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2200      	movs	r2, #0
 800135a:	461c      	mov	r4, r3
 800135c:	4615      	mov	r5, r2
 800135e:	4622      	mov	r2, r4
 8001360:	462b      	mov	r3, r5
 8001362:	2000      	movs	r0, #0
 8001364:	f001 f806 	bl	8002374 <HAL_FLASH_Program>
 8001368:	4603      	mov	r3, r0
 800136a:	75fb      	strb	r3, [r7, #23]
     for(uint32_t i = 0 ; i <len ; i++)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	3301      	adds	r3, #1
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	429a      	cmp	r2, r3
 8001378:	d3e6      	bcc.n	8001348 <execute_mem_write+0x1a>
     }

     HAL_FLASH_Lock();
 800137a:	f001 f86f 	bl	800245c <HAL_FLASH_Lock>

     return status;
 800137e:	7dfb      	ldrb	r3, [r7, #23]
 }
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bdb0      	pop	{r4, r5, r7, pc}

08001388 <InitializeDisplay>:

uint8_t current_line = 0;
char display_buffer[MAX_DISPLAY_LINES][23];

void InitializeDisplay(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af04      	add	r7, sp, #16
    ST7735_Init(0);
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fa4c 	bl	800082c <ST7735_Init>
    fillScreen(BLACK);
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff f93d 	bl	8000614 <fillScreen>
    ST7735_SetRotation(1);
 800139a:	2001      	movs	r0, #1
 800139c:	f7ff fa72 	bl	8000884 <ST7735_SetRotation>
    // Clear display buffer
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	e00f      	b.n	80013c6 <InitializeDisplay+0x3e>
        memset(display_buffer[i], 0, 23);
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	4a18      	ldr	r2, [pc, #96]	@ (8001414 <InitializeDisplay+0x8c>)
 80013b4:	4413      	add	r3, r2
 80013b6:	2217      	movs	r2, #23
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f003 fcda 	bl	8004d74 <memset>
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3301      	adds	r3, #1
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b07      	cmp	r3, #7
 80013ca:	ddec      	ble.n	80013a6 <InitializeDisplay+0x1e>
    }
    current_line = 0;
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <InitializeDisplay+0x90>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]

    // Display header
    ST7735_WriteString(5, 5, "Bootloader v1.0", Font_7x10, GREEN, BLACK);
 80013d2:	4b12      	ldr	r3, [pc, #72]	@ (800141c <InitializeDisplay+0x94>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	9202      	str	r2, [sp, #8]
 80013d8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80013dc:	9201      	str	r2, [sp, #4]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	9200      	str	r2, [sp, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001420 <InitializeDisplay+0x98>)
 80013e6:	2105      	movs	r1, #5
 80013e8:	2005      	movs	r0, #5
 80013ea:	f7ff fb43 	bl	8000a74 <ST7735_WriteString>
    ST7735_WriteString(5, 18, "Status Messages:", Font_7x10, YELLOW, BLACK);
 80013ee:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <InitializeDisplay+0x94>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	9202      	str	r2, [sp, #8]
 80013f4:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80013f8:	9201      	str	r2, [sp, #4]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	9200      	str	r2, [sp, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a08      	ldr	r2, [pc, #32]	@ (8001424 <InitializeDisplay+0x9c>)
 8001402:	2112      	movs	r1, #18
 8001404:	2005      	movs	r0, #5
 8001406:	f7ff fb35 	bl	8000a74 <ST7735_WriteString>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000168 	.word	0x20000168
 8001418:	20000164 	.word	0x20000164
 800141c:	20000000 	.word	0x20000000
 8001420:	08005e60 	.word	0x08005e60
 8001424:	08005e70 	.word	0x08005e70

08001428 <ScrollDisplay>:
        memset(display_buffer[i], 0, 23);
    }
}

void ScrollDisplay(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af04      	add	r7, sp, #16
    for(int i = 0; i < MAX_DISPLAY_LINES - 1; i++) {
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	e016      	b.n	8001462 <ScrollDisplay+0x3a>
        strcpy(display_buffer[i], display_buffer[i + 1]);
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	1a9b      	subs	r3, r3, r2
 8001440:	4a2b      	ldr	r2, [pc, #172]	@ (80014f0 <ScrollDisplay+0xc8>)
 8001442:	1898      	adds	r0, r3, r2
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	1a9b      	subs	r3, r3, r2
 8001452:	4a27      	ldr	r2, [pc, #156]	@ (80014f0 <ScrollDisplay+0xc8>)
 8001454:	4413      	add	r3, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f003 fd1b 	bl	8004e92 <strcpy>
    for(int i = 0; i < MAX_DISPLAY_LINES - 1; i++) {
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3301      	adds	r3, #1
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b06      	cmp	r3, #6
 8001466:	dde5      	ble.n	8001434 <ScrollDisplay+0xc>
    }

    // Clear the last line
    memset(display_buffer[MAX_DISPLAY_LINES - 1], 0, 23);
 8001468:	2217      	movs	r2, #23
 800146a:	2100      	movs	r1, #0
 800146c:	4821      	ldr	r0, [pc, #132]	@ (80014f4 <ScrollDisplay+0xcc>)
 800146e:	f003 fc81 	bl	8004d74 <memset>

    // Redraw all lines
    fillRect(0, 30, DISPLAY_WIDTH, MAX_DISPLAY_LINES * LINE_HEIGHT, BLACK);
 8001472:	2300      	movs	r3, #0
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2360      	movs	r3, #96	@ 0x60
 8001478:	22a0      	movs	r2, #160	@ 0xa0
 800147a:	211e      	movs	r1, #30
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff f8ad 	bl	80005dc <fillRect>

    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	e02b      	b.n	80014e0 <ScrollDisplay+0xb8>
        if(strlen(display_buffer[i]) > 0) {
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	1a9b      	subs	r3, r3, r2
 8001494:	4a16      	ldr	r2, [pc, #88]	@ (80014f0 <ScrollDisplay+0xc8>)
 8001496:	4413      	add	r3, r2
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d01d      	beq.n	80014da <ScrollDisplay+0xb2>
            ST7735_WriteString(5, 30 + (i * LINE_HEIGHT), display_buffer[i], Font_7x10, WHITE, BLACK);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	461a      	mov	r2, r3
 80014a4:	0052      	lsls	r2, r2, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	331e      	adds	r3, #30
 80014ae:	b299      	uxth	r1, r3
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	1a9b      	subs	r3, r3, r2
 80014bc:	4a0c      	ldr	r2, [pc, #48]	@ (80014f0 <ScrollDisplay+0xc8>)
 80014be:	1898      	adds	r0, r3, r2
 80014c0:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <ScrollDisplay+0xd0>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	9202      	str	r2, [sp, #8]
 80014c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014ca:	9201      	str	r2, [sp, #4]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	9200      	str	r2, [sp, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4602      	mov	r2, r0
 80014d4:	2005      	movs	r0, #5
 80014d6:	f7ff facd 	bl	8000a74 <ST7735_WriteString>
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	2b07      	cmp	r3, #7
 80014e4:	ddd0      	ble.n	8001488 <ScrollDisplay+0x60>
        }
    }
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000168 	.word	0x20000168
 80014f4:	20000209 	.word	0x20000209
 80014f8:	20000000 	.word	0x20000000

080014fc <DisplayMessage>:


void DisplayMessage(const char* message)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af04      	add	r7, sp, #16
 8001502:	6078      	str	r0, [r7, #4]
    if(!message) return;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d04b      	beq.n	80015a2 <DisplayMessage+0xa6>

    // If we've reached the bottom, scroll up
    if(current_line >= MAX_DISPLAY_LINES) {
 800150a:	4b28      	ldr	r3, [pc, #160]	@ (80015ac <DisplayMessage+0xb0>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b07      	cmp	r3, #7
 8001510:	d904      	bls.n	800151c <DisplayMessage+0x20>
        ScrollDisplay();
 8001512:	f7ff ff89 	bl	8001428 <ScrollDisplay>
        current_line = MAX_DISPLAY_LINES - 1;
 8001516:	4b25      	ldr	r3, [pc, #148]	@ (80015ac <DisplayMessage+0xb0>)
 8001518:	2207      	movs	r2, #7
 800151a:	701a      	strb	r2, [r3, #0]
    }

    strncpy(display_buffer[current_line], message, 22);
 800151c:	4b23      	ldr	r3, [pc, #140]	@ (80015ac <DisplayMessage+0xb0>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4613      	mov	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4413      	add	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	1a9b      	subs	r3, r3, r2
 800152c:	4a20      	ldr	r2, [pc, #128]	@ (80015b0 <DisplayMessage+0xb4>)
 800152e:	4413      	add	r3, r2
 8001530:	2216      	movs	r2, #22
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4618      	mov	r0, r3
 8001536:	f003 fc25 	bl	8004d84 <strncpy>
    display_buffer[current_line][22] = '\0';
 800153a:	4b1c      	ldr	r3, [pc, #112]	@ (80015ac <DisplayMessage+0xb0>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	491b      	ldr	r1, [pc, #108]	@ (80015b0 <DisplayMessage+0xb4>)
 8001542:	4613      	mov	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	1a9b      	subs	r3, r3, r2
 800154c:	440b      	add	r3, r1
 800154e:	3316      	adds	r3, #22
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]

    // Display the message
    ST7735_WriteString(5, 30 + (current_line * LINE_HEIGHT), display_buffer[current_line], Font_7x10, WHITE, BLACK);
 8001554:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <DisplayMessage+0xb0>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	0052      	lsls	r2, r2, #1
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	b29b      	uxth	r3, r3
 8001562:	331e      	adds	r3, #30
 8001564:	b299      	uxth	r1, r3
 8001566:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <DisplayMessage+0xb0>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	4613      	mov	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	1a9b      	subs	r3, r3, r2
 8001576:	4a0e      	ldr	r2, [pc, #56]	@ (80015b0 <DisplayMessage+0xb4>)
 8001578:	1898      	adds	r0, r3, r2
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <DisplayMessage+0xb8>)
 800157c:	2200      	movs	r2, #0
 800157e:	9202      	str	r2, [sp, #8]
 8001580:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001584:	9201      	str	r2, [sp, #4]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	9200      	str	r2, [sp, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4602      	mov	r2, r0
 800158e:	2005      	movs	r0, #5
 8001590:	f7ff fa70 	bl	8000a74 <ST7735_WriteString>

    current_line++;
 8001594:	4b05      	ldr	r3, [pc, #20]	@ (80015ac <DisplayMessage+0xb0>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b03      	ldr	r3, [pc, #12]	@ (80015ac <DisplayMessage+0xb0>)
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	e000      	b.n	80015a4 <DisplayMessage+0xa8>
    if(!message) return;
 80015a2:	bf00      	nop
}
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000164 	.word	0x20000164
 80015b0:	20000168 	.word	0x20000168
 80015b4:	20000000 	.word	0x20000000

080015b8 <print_To_display>:

void print_To_display(char *format,...)
{
 80015b8:	b40f      	push	{r0, r1, r2, r3}
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b096      	sub	sp, #88	@ 0x58
 80015be:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80015c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015c4:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fb32 	bl	8004c38 <vsiprintf>
	// Also display on screen
	DisplayMessage(str);
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff8f 	bl	80014fc <DisplayMessage>
    va_start(args, format);
    vsprintf(str, format, args);
    DisplayMessage(str);
    va_end(args);
#endif
}
 80015de:	bf00      	nop
 80015e0:	3758      	adds	r7, #88	@ 0x58
 80015e2:	46bd      	mov	sp, r7
 80015e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015e8:	b004      	add	sp, #16
 80015ea:	4770      	bx	lr

080015ec <bootloader_main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void bootloader_main(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80015f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015f6:	4819      	ldr	r0, [pc, #100]	@ (800165c <bootloader_main+0x70>)
 80015f8:	f001 fb34 	bl	8002c64 <HAL_GPIO_ReadPin>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d108      	bne.n	8001614 <bootloader_main+0x28>
	{
		C_UART = &huart5;
 8001602:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <bootloader_main+0x74>)
 8001604:	4a17      	ldr	r2, [pc, #92]	@ (8001664 <bootloader_main+0x78>)
 8001606:	601a      	str	r2, [r3, #0]
		printf("button pressed...entering the bootloader mode\n");
 8001608:	4817      	ldr	r0, [pc, #92]	@ (8001668 <bootloader_main+0x7c>)
 800160a:	f003 fa7d 	bl	8004b08 <puts>
		bootloader_uart_read_data();
 800160e:	f7ff fb23 	bl	8000c58 <bootloader_uart_read_data>
		{
			printf("No valid BOOT_CMD received...jumping to application\n\r");
			bootloader_jump_to_user_app();
		}
	}
}
 8001612:	e01e      	b.n	8001652 <bootloader_main+0x66>
		uint8_t rx_byte = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	71bb      	strb	r3, [r7, #6]
		status = HAL_UART_Receive(&huart3, &rx_byte, 1, UART_TIMEOUT_MS);
 8001618:	1db9      	adds	r1, r7, #6
 800161a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800161e:	2201      	movs	r2, #1
 8001620:	4812      	ldr	r0, [pc, #72]	@ (800166c <bootloader_main+0x80>)
 8001622:	f002 fd80 	bl	8004126 <HAL_UART_Receive>
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
		if (status == HAL_OK && rx_byte == BOOT_CMD)
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10b      	bne.n	8001648 <bootloader_main+0x5c>
 8001630:	79bb      	ldrb	r3, [r7, #6]
 8001632:	2b50      	cmp	r3, #80	@ 0x50
 8001634:	d108      	bne.n	8001648 <bootloader_main+0x5c>
			C_UART = &huart3;
 8001636:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <bootloader_main+0x74>)
 8001638:	4a0c      	ldr	r2, [pc, #48]	@ (800166c <bootloader_main+0x80>)
 800163a:	601a      	str	r2, [r3, #0]
			printf("BOOT_CMD (0x50) received...entering bootloader mode\n\r");
 800163c:	480c      	ldr	r0, [pc, #48]	@ (8001670 <bootloader_main+0x84>)
 800163e:	f003 f9fb 	bl	8004a38 <iprintf>
			bootloader_uart_read_data();
 8001642:	f7ff fb09 	bl	8000c58 <bootloader_uart_read_data>
}
 8001646:	e004      	b.n	8001652 <bootloader_main+0x66>
			printf("No valid BOOT_CMD received...jumping to application\n\r");
 8001648:	480a      	ldr	r0, [pc, #40]	@ (8001674 <bootloader_main+0x88>)
 800164a:	f003 f9f5 	bl	8004a38 <iprintf>
			bootloader_jump_to_user_app();
 800164e:	f7ff fb4f 	bl	8000cf0 <bootloader_jump_to_user_app>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40020800 	.word	0x40020800
 8001660:	20000160 	.word	0x20000160
 8001664:	20000280 	.word	0x20000280
 8001668:	08005e84 	.word	0x08005e84
 800166c:	20000310 	.word	0x20000310
 8001670:	08005eb4 	.word	0x08005eb4
 8001674:	08005eec 	.word	0x08005eec

08001678 <__io_putchar>:

#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001680:	1d39      	adds	r1, r7, #4
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	2201      	movs	r2, #1
 8001688:	4803      	ldr	r0, [pc, #12]	@ (8001698 <__io_putchar+0x20>)
 800168a:	f002 fcc1 	bl	8004010 <HAL_UART_Transmit>
	return ch;
 800168e:	687b      	ldr	r3, [r7, #4]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200002c8 	.word	0x200002c8

0800169c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a0:	f000 fc70 	bl	8001f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a4:	f000 f818 	bl	80016d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a8:	f000 f952 	bl	8001950 <MX_GPIO_Init>
  MX_CRC_Init();
 80016ac:	f000 f886 	bl	80017bc <MX_CRC_Init>
  MX_USART2_UART_Init();
 80016b0:	f000 f8fa 	bl	80018a8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80016b4:	f000 f922 	bl	80018fc <MX_USART3_UART_Init>
  MX_UART5_Init();
 80016b8:	f000 f8cc 	bl	8001854 <MX_UART5_Init>
  MX_SPI1_Init();
 80016bc:	f000 f892 	bl	80017e4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  InitializeDisplay();
 80016c0:	f7ff fe62 	bl	8001388 <InitializeDisplay>
  printf("bootloader running....\n");
 80016c4:	4803      	ldr	r0, [pc, #12]	@ (80016d4 <main+0x38>)
 80016c6:	f003 fa1f 	bl	8004b08 <puts>
  bootloader_main();
 80016ca:	f7ff ff8f 	bl	80015ec <bootloader_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016ce:	bf00      	nop
 80016d0:	e7fd      	b.n	80016ce <main+0x32>
 80016d2:	bf00      	nop
 80016d4:	08005f24 	.word	0x08005f24

080016d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b094      	sub	sp, #80	@ 0x50
 80016dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	2234      	movs	r2, #52	@ 0x34
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f003 fb44 	bl	8004d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ec:	f107 0308 	add.w	r3, r7, #8
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	4b2c      	ldr	r3, [pc, #176]	@ (80017b4 <SystemClock_Config+0xdc>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001704:	4a2b      	ldr	r2, [pc, #172]	@ (80017b4 <SystemClock_Config+0xdc>)
 8001706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800170a:	6413      	str	r3, [r2, #64]	@ 0x40
 800170c:	4b29      	ldr	r3, [pc, #164]	@ (80017b4 <SystemClock_Config+0xdc>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001718:	2300      	movs	r3, #0
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	4b26      	ldr	r3, [pc, #152]	@ (80017b8 <SystemClock_Config+0xe0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a25      	ldr	r2, [pc, #148]	@ (80017b8 <SystemClock_Config+0xe0>)
 8001722:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b23      	ldr	r3, [pc, #140]	@ (80017b8 <SystemClock_Config+0xe0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001734:	2302      	movs	r3, #2
 8001736:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001738:	2301      	movs	r3, #1
 800173a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800173c:	2310      	movs	r3, #16
 800173e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001740:	2302      	movs	r3, #2
 8001742:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001744:	2300      	movs	r3, #0
 8001746:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001748:	2308      	movs	r3, #8
 800174a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800174c:	23b4      	movs	r3, #180	@ 0xb4
 800174e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001750:	2302      	movs	r3, #2
 8001752:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001754:	2302      	movs	r3, #2
 8001756:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001758:	2302      	movs	r3, #2
 800175a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	4618      	mov	r0, r3
 8001762:	f001 febd 	bl	80034e0 <HAL_RCC_OscConfig>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800176c:	f000 f970 	bl	8001a50 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001770:	f001 faaa 	bl	8002cc8 <HAL_PWREx_EnableOverDrive>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800177a:	f000 f969 	bl	8001a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177e:	230f      	movs	r3, #15
 8001780:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001782:	2302      	movs	r3, #2
 8001784:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800178a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800178e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001790:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001794:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	2105      	movs	r1, #5
 800179c:	4618      	mov	r0, r3
 800179e:	f001 fae3 	bl	8002d68 <HAL_RCC_ClockConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80017a8:	f000 f952 	bl	8001a50 <Error_Handler>
  }
}
 80017ac:	bf00      	nop
 80017ae:	3750      	adds	r7, #80	@ 0x50
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40007000 	.word	0x40007000

080017bc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <MX_CRC_Init+0x20>)
 80017c2:	4a07      	ldr	r2, [pc, #28]	@ (80017e0 <MX_CRC_Init+0x24>)
 80017c4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	@ (80017dc <MX_CRC_Init+0x20>)
 80017c8:	f000 fd8d 	bl	80022e6 <HAL_CRC_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80017d2:	f000 f93d 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000220 	.word	0x20000220
 80017e0:	40023000 	.word	0x40023000

080017e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017e8:	4b18      	ldr	r3, [pc, #96]	@ (800184c <MX_SPI1_Init+0x68>)
 80017ea:	4a19      	ldr	r2, [pc, #100]	@ (8001850 <MX_SPI1_Init+0x6c>)
 80017ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ee:	4b17      	ldr	r3, [pc, #92]	@ (800184c <MX_SPI1_Init+0x68>)
 80017f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80017f6:	4b15      	ldr	r3, [pc, #84]	@ (800184c <MX_SPI1_Init+0x68>)
 80017f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017fc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017fe:	4b13      	ldr	r3, [pc, #76]	@ (800184c <MX_SPI1_Init+0x68>)
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001804:	4b11      	ldr	r3, [pc, #68]	@ (800184c <MX_SPI1_Init+0x68>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800180a:	4b10      	ldr	r3, [pc, #64]	@ (800184c <MX_SPI1_Init+0x68>)
 800180c:	2200      	movs	r2, #0
 800180e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001810:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <MX_SPI1_Init+0x68>)
 8001812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001816:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <MX_SPI1_Init+0x68>)
 800181a:	2210      	movs	r2, #16
 800181c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800181e:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <MX_SPI1_Init+0x68>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <MX_SPI1_Init+0x68>)
 8001826:	2200      	movs	r2, #0
 8001828:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800182a:	4b08      	ldr	r3, [pc, #32]	@ (800184c <MX_SPI1_Init+0x68>)
 800182c:	2200      	movs	r2, #0
 800182e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <MX_SPI1_Init+0x68>)
 8001832:	220a      	movs	r2, #10
 8001834:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	@ (800184c <MX_SPI1_Init+0x68>)
 8001838:	f002 f8f0 	bl	8003a1c <HAL_SPI_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001842:	f000 f905 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000228 	.word	0x20000228
 8001850:	40013000 	.word	0x40013000

08001854 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001858:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <MX_UART5_Init+0x4c>)
 800185a:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <MX_UART5_Init+0x50>)
 800185c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <MX_UART5_Init+0x4c>)
 8001860:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001864:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001866:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <MX_UART5_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <MX_UART5_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001872:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <MX_UART5_Init+0x4c>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001878:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <MX_UART5_Init+0x4c>)
 800187a:	220c      	movs	r2, #12
 800187c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <MX_UART5_Init+0x4c>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <MX_UART5_Init+0x4c>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800188a:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <MX_UART5_Init+0x4c>)
 800188c:	f002 fb70 	bl	8003f70 <HAL_UART_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001896:	f000 f8db 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000280 	.word	0x20000280
 80018a4:	40005000 	.word	0x40005000

080018a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <MX_USART2_UART_Init+0x50>)
 80018b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018cc:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018ce:	220c      	movs	r2, #12
 80018d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d2:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018de:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018e0:	f002 fb46 	bl	8003f70 <HAL_UART_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018ea:	f000 f8b1 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200002c8 	.word	0x200002c8
 80018f8:	40004400 	.word	0x40004400

080018fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <MX_USART3_UART_Init+0x4c>)
 8001902:	4a12      	ldr	r2, [pc, #72]	@ (800194c <MX_USART3_UART_Init+0x50>)
 8001904:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <MX_USART3_UART_Init+0x4c>)
 8001908:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800190c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800190e:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <MX_USART3_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <MX_USART3_UART_Init+0x4c>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800191a:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <MX_USART3_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001920:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <MX_USART3_UART_Init+0x4c>)
 8001922:	220c      	movs	r2, #12
 8001924:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001926:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <MX_USART3_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <MX_USART3_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001932:	4805      	ldr	r0, [pc, #20]	@ (8001948 <MX_USART3_UART_Init+0x4c>)
 8001934:	f002 fb1c 	bl	8003f70 <HAL_UART_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800193e:	f000 f887 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000310 	.word	0x20000310
 800194c:	40004800 	.word	0x40004800

08001950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	@ 0x28
 8001954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	4b36      	ldr	r3, [pc, #216]	@ (8001a44 <MX_GPIO_Init+0xf4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	4a35      	ldr	r2, [pc, #212]	@ (8001a44 <MX_GPIO_Init+0xf4>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	6313      	str	r3, [r2, #48]	@ 0x30
 8001976:	4b33      	ldr	r3, [pc, #204]	@ (8001a44 <MX_GPIO_Init+0xf4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b2f      	ldr	r3, [pc, #188]	@ (8001a44 <MX_GPIO_Init+0xf4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a2e      	ldr	r2, [pc, #184]	@ (8001a44 <MX_GPIO_Init+0xf4>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b2c      	ldr	r3, [pc, #176]	@ (8001a44 <MX_GPIO_Init+0xf4>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	4b28      	ldr	r3, [pc, #160]	@ (8001a44 <MX_GPIO_Init+0xf4>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a27      	ldr	r2, [pc, #156]	@ (8001a44 <MX_GPIO_Init+0xf4>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b25      	ldr	r3, [pc, #148]	@ (8001a44 <MX_GPIO_Init+0xf4>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <MX_GPIO_Init+0xf4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a20      	ldr	r2, [pc, #128]	@ (8001a44 <MX_GPIO_Init+0xf4>)
 80019c4:	f043 0308 	orr.w	r3, r3, #8
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001a44 <MX_GPIO_Init+0xf4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD2_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2111      	movs	r1, #17
 80019da:	481b      	ldr	r0, [pc, #108]	@ (8001a48 <MX_GPIO_Init+0xf8>)
 80019dc:	f001 f95a 	bl	8002c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2112      	movs	r1, #18
 80019e4:	4819      	ldr	r0, [pc, #100]	@ (8001a4c <MX_GPIO_Init+0xfc>)
 80019e6:	f001 f955 	bl	8002c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	4812      	ldr	r0, [pc, #72]	@ (8001a48 <MX_GPIO_Init+0xf8>)
 8001a00:	f000 ff9c 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PC4 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_4;
 8001a04:	2311      	movs	r3, #17
 8001a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4619      	mov	r1, r3
 8001a1a:	480b      	ldr	r0, [pc, #44]	@ (8001a48 <MX_GPIO_Init+0xf8>)
 8001a1c:	f000 ff8e 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001a20:	2312      	movs	r3, #18
 8001a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	4805      	ldr	r0, [pc, #20]	@ (8001a4c <MX_GPIO_Init+0xfc>)
 8001a38:	f000 ff80 	bl	800293c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a3c:	bf00      	nop
 8001a3e:	3728      	adds	r7, #40	@ 0x28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020800 	.word	0x40020800
 8001a4c:	40020000 	.word	0x40020000

08001a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <Error_Handler+0x8>

08001a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a72:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	4a08      	ldr	r2, [pc, #32]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8e:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae8 <HAL_CRC_MspInit+0x3c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d10d      	bne.n	8001ada <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <HAL_CRC_MspInit+0x40>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	4a09      	ldr	r2, [pc, #36]	@ (8001aec <HAL_CRC_MspInit+0x40>)
 8001ac8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ace:	4b07      	ldr	r3, [pc, #28]	@ (8001aec <HAL_CRC_MspInit+0x40>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40023000 	.word	0x40023000
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	@ 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a19      	ldr	r2, [pc, #100]	@ (8001b74 <HAL_SPI_MspInit+0x84>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d12b      	bne.n	8001b6a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	4b18      	ldr	r3, [pc, #96]	@ (8001b78 <HAL_SPI_MspInit+0x88>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	4a17      	ldr	r2, [pc, #92]	@ (8001b78 <HAL_SPI_MspInit+0x88>)
 8001b1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b22:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <HAL_SPI_MspInit+0x88>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <HAL_SPI_MspInit+0x88>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	4a10      	ldr	r2, [pc, #64]	@ (8001b78 <HAL_SPI_MspInit+0x88>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <HAL_SPI_MspInit+0x88>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b4a:	23a0      	movs	r3, #160	@ 0xa0
 8001b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	4805      	ldr	r0, [pc, #20]	@ (8001b7c <HAL_SPI_MspInit+0x8c>)
 8001b66:	f000 fee9 	bl	800293c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	@ 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40013000 	.word	0x40013000
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020000 	.word	0x40020000

08001b80 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b090      	sub	sp, #64	@ 0x40
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a6a      	ldr	r2, [pc, #424]	@ (8001d48 <HAL_UART_MspInit+0x1c8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d14b      	bne.n	8001c3a <HAL_UART_MspInit+0xba>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ba6:	4b69      	ldr	r3, [pc, #420]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	4a68      	ldr	r2, [pc, #416]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001bac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb2:	4b66      	ldr	r3, [pc, #408]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bc2:	4b62      	ldr	r3, [pc, #392]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	4a61      	ldr	r2, [pc, #388]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bce:	4b5f      	ldr	r3, [pc, #380]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	623b      	str	r3, [r7, #32]
 8001bde:	4b5b      	ldr	r3, [pc, #364]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	4a5a      	ldr	r2, [pc, #360]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001be4:	f043 0308 	orr.w	r3, r3, #8
 8001be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bea:	4b58      	ldr	r3, [pc, #352]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	623b      	str	r3, [r7, #32]
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c04:	2303      	movs	r3, #3
 8001c06:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c10:	4619      	mov	r1, r3
 8001c12:	484f      	ldr	r0, [pc, #316]	@ (8001d50 <HAL_UART_MspInit+0x1d0>)
 8001c14:	f000 fe92 	bl	800293c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c18:	2304      	movs	r3, #4
 8001c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c28:	2308      	movs	r3, #8
 8001c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c30:	4619      	mov	r1, r3
 8001c32:	4848      	ldr	r0, [pc, #288]	@ (8001d54 <HAL_UART_MspInit+0x1d4>)
 8001c34:	f000 fe82 	bl	800293c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c38:	e081      	b.n	8001d3e <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART2)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a46      	ldr	r2, [pc, #280]	@ (8001d58 <HAL_UART_MspInit+0x1d8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d12c      	bne.n	8001c9e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	4b40      	ldr	r3, [pc, #256]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4c:	4a3f      	ldr	r2, [pc, #252]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001c4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c52:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c54:	4b3d      	ldr	r3, [pc, #244]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c60:	2300      	movs	r3, #0
 8001c62:	61bb      	str	r3, [r7, #24]
 8001c64:	4b39      	ldr	r3, [pc, #228]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c68:	4a38      	ldr	r2, [pc, #224]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c70:	4b36      	ldr	r3, [pc, #216]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c7c:	230c      	movs	r3, #12
 8001c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c8c:	2307      	movs	r3, #7
 8001c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c94:	4619      	mov	r1, r3
 8001c96:	4831      	ldr	r0, [pc, #196]	@ (8001d5c <HAL_UART_MspInit+0x1dc>)
 8001c98:	f000 fe50 	bl	800293c <HAL_GPIO_Init>
}
 8001c9c:	e04f      	b.n	8001d3e <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART3)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8001d60 <HAL_UART_MspInit+0x1e0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d14a      	bne.n	8001d3e <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	4b27      	ldr	r3, [pc, #156]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb0:	4a26      	ldr	r2, [pc, #152]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001cb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb8:	4b24      	ldr	r3, [pc, #144]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	4b20      	ldr	r3, [pc, #128]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001cce:	f043 0304 	orr.w	r3, r3, #4
 8001cd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce8:	4a18      	ldr	r2, [pc, #96]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001cea:	f043 0302 	orr.w	r3, r3, #2
 8001cee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf0:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d0c:	2307      	movs	r3, #7
 8001d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d14:	4619      	mov	r1, r3
 8001d16:	480e      	ldr	r0, [pc, #56]	@ (8001d50 <HAL_UART_MspInit+0x1d0>)
 8001d18:	f000 fe10 	bl	800293c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d2e:	2307      	movs	r3, #7
 8001d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d36:	4619      	mov	r1, r3
 8001d38:	480a      	ldr	r0, [pc, #40]	@ (8001d64 <HAL_UART_MspInit+0x1e4>)
 8001d3a:	f000 fdff 	bl	800293c <HAL_GPIO_Init>
}
 8001d3e:	bf00      	nop
 8001d40:	3740      	adds	r7, #64	@ 0x40
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40005000 	.word	0x40005000
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40004400 	.word	0x40004400
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40004800 	.word	0x40004800
 8001d64:	40020400 	.word	0x40020400

08001d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <NMI_Handler+0x4>

08001d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <HardFault_Handler+0x4>

08001d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <MemManage_Handler+0x4>

08001d80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <BusFault_Handler+0x4>

08001d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <UsageFault_Handler+0x4>

08001d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dbe:	f000 f969 	bl	8002094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e00a      	b.n	8001dee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dd8:	f3af 8000 	nop.w
 8001ddc:	4601      	mov	r1, r0
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	60ba      	str	r2, [r7, #8]
 8001de4:	b2ca      	uxtb	r2, r1
 8001de6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3301      	adds	r3, #1
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	dbf0      	blt.n	8001dd8 <_read+0x12>
  }

  return len;
 8001df6:	687b      	ldr	r3, [r7, #4]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e009      	b.n	8001e26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	60ba      	str	r2, [r7, #8]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fc2c 	bl	8001678 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	3301      	adds	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	dbf1      	blt.n	8001e12 <_write+0x12>
  }
  return len;
 8001e2e:	687b      	ldr	r3, [r7, #4]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_close>:

int _close(int file)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e60:	605a      	str	r2, [r3, #4]
  return 0;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <_isatty>:

int _isatty(int file)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e78:	2301      	movs	r3, #1
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b085      	sub	sp, #20
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea8:	4a14      	ldr	r2, [pc, #80]	@ (8001efc <_sbrk+0x5c>)
 8001eaa:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <_sbrk+0x60>)
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb4:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <_sbrk+0x64>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	@ (8001f08 <_sbrk+0x68>)
 8001ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec2:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d207      	bcs.n	8001ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed0:	f002 ffb2 	bl	8004e38 <__errno>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
 8001ede:	e009      	b.n	8001ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee0:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <_sbrk+0x64>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee6:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	4a05      	ldr	r2, [pc, #20]	@ (8001f04 <_sbrk+0x64>)
 8001ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20020000 	.word	0x20020000
 8001f00:	00000400 	.word	0x00000400
 8001f04:	20000358 	.word	0x20000358
 8001f08:	200004d0 	.word	0x200004d0

08001f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <SystemInit+0x20>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f16:	4a05      	ldr	r2, [pc, #20]	@ (8001f2c <SystemInit+0x20>)
 8001f18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f34:	f7ff ffea 	bl	8001f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f38:	480c      	ldr	r0, [pc, #48]	@ (8001f6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f3a:	490d      	ldr	r1, [pc, #52]	@ (8001f70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f40:	e002      	b.n	8001f48 <LoopCopyDataInit>

08001f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f46:	3304      	adds	r3, #4

08001f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f4c:	d3f9      	bcc.n	8001f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f50:	4c0a      	ldr	r4, [pc, #40]	@ (8001f7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f54:	e001      	b.n	8001f5a <LoopFillZerobss>

08001f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f58:	3204      	adds	r2, #4

08001f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f5c:	d3fb      	bcc.n	8001f56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f5e:	f002 ff71 	bl	8004e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f62:	f7ff fb9b 	bl	800169c <main>
  bx  lr    
 8001f66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f74:	08006778 	.word	0x08006778
  ldr r2, =_sbss
 8001f78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f7c:	200004cc 	.word	0x200004cc

08001f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <ADC_IRQHandler>
	...

08001f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f88:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <HAL_Init+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc4 <HAL_Init+0x40>)
 8001f8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f94:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <HAL_Init+0x40>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc4 <HAL_Init+0x40>)
 8001f9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa0:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <HAL_Init+0x40>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a07      	ldr	r2, [pc, #28]	@ (8001fc4 <HAL_Init+0x40>)
 8001fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fac:	2003      	movs	r0, #3
 8001fae:	f000 f967 	bl	8002280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fb2:	200f      	movs	r0, #15
 8001fb4:	f000 f83e 	bl	8002034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb8:	f7ff fd50 	bl	8001a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023c00 	.word	0x40023c00

08001fc8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001fcc:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <HAL_DeInit+0x4c>)
 8001fce:	4a12      	ldr	r2, [pc, #72]	@ (8002018 <HAL_DeInit+0x50>)
 8001fd0:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001fd2:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <HAL_DeInit+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002014 <HAL_DeInit+0x4c>)
 8001fda:	4a10      	ldr	r2, [pc, #64]	@ (800201c <HAL_DeInit+0x54>)
 8001fdc:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001fde:	4b0d      	ldr	r3, [pc, #52]	@ (8002014 <HAL_DeInit+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <HAL_DeInit+0x4c>)
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8002020 <HAL_DeInit+0x58>)
 8001fe8:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001fea:	4b0a      	ldr	r3, [pc, #40]	@ (8002014 <HAL_DeInit+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <HAL_DeInit+0x4c>)
 8001ff2:	2281      	movs	r2, #129	@ 0x81
 8001ff4:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001ff6:	4b07      	ldr	r3, [pc, #28]	@ (8002014 <HAL_DeInit+0x4c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001ffc:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <HAL_DeInit+0x4c>)
 8001ffe:	2203      	movs	r2, #3
 8002000:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8002002:	4b04      	ldr	r3, [pc, #16]	@ (8002014 <HAL_DeInit+0x4c>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002008:	f000 f80c 	bl	8002024 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800
 8002018:	3fffc9ff 	.word	0x3fffc9ff
 800201c:	00c77933 	.word	0x00c77933
 8002020:	206010ff 	.word	0x206010ff

08002024 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800203c:	4b12      	ldr	r3, [pc, #72]	@ (8002088 <HAL_InitTick+0x54>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b12      	ldr	r3, [pc, #72]	@ (800208c <HAL_InitTick+0x58>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800204a:	fbb3 f3f1 	udiv	r3, r3, r1
 800204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f93b 	bl	80022ce <HAL_SYSTICK_Config>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e00e      	b.n	8002080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b0f      	cmp	r3, #15
 8002066:	d80a      	bhi.n	800207e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002068:	2200      	movs	r2, #0
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f000 f911 	bl	8002296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002074:	4a06      	ldr	r2, [pc, #24]	@ (8002090 <HAL_InitTick+0x5c>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	e000      	b.n	8002080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000008 	.word	0x20000008
 800208c:	20000010 	.word	0x20000010
 8002090:	2000000c 	.word	0x2000000c

08002094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002098:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <HAL_IncTick+0x20>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_IncTick+0x24>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	4a04      	ldr	r2, [pc, #16]	@ (80020b8 <HAL_IncTick+0x24>)
 80020a6:	6013      	str	r3, [r2, #0]
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000010 	.word	0x20000010
 80020b8:	2000035c 	.word	0x2000035c

080020bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return uwTick;
 80020c0:	4b03      	ldr	r3, [pc, #12]	@ (80020d0 <HAL_GetTick+0x14>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	2000035c 	.word	0x2000035c

080020d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7ff ffee 	bl	80020bc <HAL_GetTick>
 80020e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d005      	beq.n	80020fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002118 <HAL_Delay+0x44>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4413      	add	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020fa:	bf00      	nop
 80020fc:	f7ff ffde 	bl	80020bc <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	429a      	cmp	r2, r3
 800210a:	d8f7      	bhi.n	80020fc <HAL_Delay+0x28>
  {
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000010 	.word	0x20000010

0800211c <__NVIC_SetPriorityGrouping>:
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800212c:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002138:	4013      	ands	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800214c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214e:	4a04      	ldr	r2, [pc, #16]	@ (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	60d3      	str	r3, [r2, #12]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_GetPriorityGrouping>:
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002168:	4b04      	ldr	r3, [pc, #16]	@ (800217c <__NVIC_GetPriorityGrouping+0x18>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	f003 0307 	and.w	r3, r3, #7
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <__NVIC_SetPriority>:
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	6039      	str	r1, [r7, #0]
 800218a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	2b00      	cmp	r3, #0
 8002192:	db0a      	blt.n	80021aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	b2da      	uxtb	r2, r3
 8002198:	490c      	ldr	r1, [pc, #48]	@ (80021cc <__NVIC_SetPriority+0x4c>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	0112      	lsls	r2, r2, #4
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	440b      	add	r3, r1
 80021a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80021a8:	e00a      	b.n	80021c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4908      	ldr	r1, [pc, #32]	@ (80021d0 <__NVIC_SetPriority+0x50>)
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	3b04      	subs	r3, #4
 80021b8:	0112      	lsls	r2, r2, #4
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	440b      	add	r3, r1
 80021be:	761a      	strb	r2, [r3, #24]
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000e100 	.word	0xe000e100
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <NVIC_EncodePriority>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	@ 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f1c3 0307 	rsb	r3, r3, #7
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	bf28      	it	cs
 80021f2:	2304      	movcs	r3, #4
 80021f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3304      	adds	r3, #4
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d902      	bls.n	8002204 <NVIC_EncodePriority+0x30>
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3b03      	subs	r3, #3
 8002202:	e000      	b.n	8002206 <NVIC_EncodePriority+0x32>
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	f04f 32ff 	mov.w	r2, #4294967295
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43da      	mvns	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	401a      	ands	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800221c:	f04f 31ff 	mov.w	r1, #4294967295
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	43d9      	mvns	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	4313      	orrs	r3, r2
}
 800222e:	4618      	mov	r0, r3
 8002230:	3724      	adds	r7, #36	@ 0x24
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800224c:	d301      	bcc.n	8002252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800224e:	2301      	movs	r3, #1
 8002250:	e00f      	b.n	8002272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002252:	4a0a      	ldr	r2, [pc, #40]	@ (800227c <SysTick_Config+0x40>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800225a:	210f      	movs	r1, #15
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	f7ff ff8e 	bl	8002180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002264:	4b05      	ldr	r3, [pc, #20]	@ (800227c <SysTick_Config+0x40>)
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226a:	4b04      	ldr	r3, [pc, #16]	@ (800227c <SysTick_Config+0x40>)
 800226c:	2207      	movs	r2, #7
 800226e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	e000e010 	.word	0xe000e010

08002280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ff47 	bl	800211c <__NVIC_SetPriorityGrouping>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002296:	b580      	push	{r7, lr}
 8002298:	b086      	sub	sp, #24
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a8:	f7ff ff5c 	bl	8002164 <__NVIC_GetPriorityGrouping>
 80022ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	6978      	ldr	r0, [r7, #20]
 80022b4:	f7ff ff8e 	bl	80021d4 <NVIC_EncodePriority>
 80022b8:	4602      	mov	r2, r0
 80022ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff5d 	bl	8002180 <__NVIC_SetPriority>
}
 80022c6:	bf00      	nop
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ffb0 	bl	800223c <SysTick_Config>
 80022dc:	4603      	mov	r3, r0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e00e      	b.n	8002316 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	795b      	ldrb	r3, [r3, #5]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d105      	bne.n	800230e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff fbcf 	bl	8001aac <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800231e:	b480      	push	{r7}
 8002320:	b087      	sub	sp, #28
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2202      	movs	r2, #2
 8002332:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	e00a      	b.n	8002350 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	441a      	add	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	d3f0      	bcc.n	800233a <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2201      	movs	r2, #1
 8002364:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002366:	693b      	ldr	r3, [r7, #16]
}
 8002368:	4618      	mov	r0, r3
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002382:	4b23      	ldr	r3, [pc, #140]	@ (8002410 <HAL_FLASH_Program+0x9c>)
 8002384:	7e1b      	ldrb	r3, [r3, #24]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_FLASH_Program+0x1a>
 800238a:	2302      	movs	r3, #2
 800238c:	e03b      	b.n	8002406 <HAL_FLASH_Program+0x92>
 800238e:	4b20      	ldr	r3, [pc, #128]	@ (8002410 <HAL_FLASH_Program+0x9c>)
 8002390:	2201      	movs	r2, #1
 8002392:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002394:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002398:	f000 f870 	bl	800247c <FLASH_WaitForLastOperation>
 800239c:	4603      	mov	r3, r0
 800239e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80023a0:	7dfb      	ldrb	r3, [r7, #23]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d12b      	bne.n	80023fe <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80023ac:	783b      	ldrb	r3, [r7, #0]
 80023ae:	4619      	mov	r1, r3
 80023b0:	68b8      	ldr	r0, [r7, #8]
 80023b2:	f000 f91b 	bl	80025ec <FLASH_Program_Byte>
 80023b6:	e016      	b.n	80023e6 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d105      	bne.n	80023ca <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80023be:	883b      	ldrh	r3, [r7, #0]
 80023c0:	4619      	mov	r1, r3
 80023c2:	68b8      	ldr	r0, [r7, #8]
 80023c4:	f000 f8ee 	bl	80025a4 <FLASH_Program_HalfWord>
 80023c8:	e00d      	b.n	80023e6 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d105      	bne.n	80023dc <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	4619      	mov	r1, r3
 80023d4:	68b8      	ldr	r0, [r7, #8]
 80023d6:	f000 f8c3 	bl	8002560 <FLASH_Program_Word>
 80023da:	e004      	b.n	80023e6 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80023dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023e0:	68b8      	ldr	r0, [r7, #8]
 80023e2:	f000 f88b 	bl	80024fc <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023e6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80023ea:	f000 f847 	bl	800247c <FLASH_WaitForLastOperation>
 80023ee:	4603      	mov	r3, r0
 80023f0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80023f2:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <HAL_FLASH_Program+0xa0>)
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	4a07      	ldr	r2, [pc, #28]	@ (8002414 <HAL_FLASH_Program+0xa0>)
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80023fe:	4b04      	ldr	r3, [pc, #16]	@ (8002410 <HAL_FLASH_Program+0x9c>)
 8002400:	2200      	movs	r2, #0
 8002402:	761a      	strb	r2, [r3, #24]

  return status;
 8002404:	7dfb      	ldrb	r3, [r7, #23]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000360 	.word	0x20000360
 8002414:	40023c00 	.word	0x40023c00

08002418 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002422:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <HAL_FLASH_Unlock+0x38>)
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	da0b      	bge.n	8002442 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800242a:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <HAL_FLASH_Unlock+0x38>)
 800242c:	4a09      	ldr	r2, [pc, #36]	@ (8002454 <HAL_FLASH_Unlock+0x3c>)
 800242e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002430:	4b07      	ldr	r3, [pc, #28]	@ (8002450 <HAL_FLASH_Unlock+0x38>)
 8002432:	4a09      	ldr	r2, [pc, #36]	@ (8002458 <HAL_FLASH_Unlock+0x40>)
 8002434:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002436:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <HAL_FLASH_Unlock+0x38>)
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	2b00      	cmp	r3, #0
 800243c:	da01      	bge.n	8002442 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002442:	79fb      	ldrb	r3, [r7, #7]
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40023c00 	.word	0x40023c00
 8002454:	45670123 	.word	0x45670123
 8002458:	cdef89ab 	.word	0xcdef89ab

0800245c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002460:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <HAL_FLASH_Lock+0x1c>)
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	4a04      	ldr	r2, [pc, #16]	@ (8002478 <HAL_FLASH_Lock+0x1c>)
 8002466:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800246a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40023c00 	.word	0x40023c00

0800247c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002488:	4b1a      	ldr	r3, [pc, #104]	@ (80024f4 <FLASH_WaitForLastOperation+0x78>)
 800248a:	2200      	movs	r2, #0
 800248c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800248e:	f7ff fe15 	bl	80020bc <HAL_GetTick>
 8002492:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002494:	e010      	b.n	80024b8 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d00c      	beq.n	80024b8 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d007      	beq.n	80024b4 <FLASH_WaitForLastOperation+0x38>
 80024a4:	f7ff fe0a 	bl	80020bc <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d201      	bcs.n	80024b8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e019      	b.n	80024ec <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80024b8:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <FLASH_WaitForLastOperation+0x7c>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1e8      	bne.n	8002496 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80024c4:	4b0c      	ldr	r3, [pc, #48]	@ (80024f8 <FLASH_WaitForLastOperation+0x7c>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80024d0:	4b09      	ldr	r3, [pc, #36]	@ (80024f8 <FLASH_WaitForLastOperation+0x7c>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80024d6:	4b08      	ldr	r3, [pc, #32]	@ (80024f8 <FLASH_WaitForLastOperation+0x7c>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80024e2:	f000 f8a5 	bl	8002630 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0

}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000360 	.word	0x20000360
 80024f8:	40023c00 	.word	0x40023c00

080024fc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002508:	4b14      	ldr	r3, [pc, #80]	@ (800255c <FLASH_Program_DoubleWord+0x60>)
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	4a13      	ldr	r2, [pc, #76]	@ (800255c <FLASH_Program_DoubleWord+0x60>)
 800250e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002512:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002514:	4b11      	ldr	r3, [pc, #68]	@ (800255c <FLASH_Program_DoubleWord+0x60>)
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	4a10      	ldr	r2, [pc, #64]	@ (800255c <FLASH_Program_DoubleWord+0x60>)
 800251a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800251e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002520:	4b0e      	ldr	r3, [pc, #56]	@ (800255c <FLASH_Program_DoubleWord+0x60>)
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	4a0d      	ldr	r2, [pc, #52]	@ (800255c <FLASH_Program_DoubleWord+0x60>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002532:	f3bf 8f6f 	isb	sy
}
 8002536:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	000a      	movs	r2, r1
 8002546:	2300      	movs	r3, #0
 8002548:	68f9      	ldr	r1, [r7, #12]
 800254a:	3104      	adds	r1, #4
 800254c:	4613      	mov	r3, r2
 800254e:	600b      	str	r3, [r1, #0]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	40023c00 	.word	0x40023c00

08002560 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800256a:	4b0d      	ldr	r3, [pc, #52]	@ (80025a0 <FLASH_Program_Word+0x40>)
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	4a0c      	ldr	r2, [pc, #48]	@ (80025a0 <FLASH_Program_Word+0x40>)
 8002570:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002574:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002576:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <FLASH_Program_Word+0x40>)
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	4a09      	ldr	r2, [pc, #36]	@ (80025a0 <FLASH_Program_Word+0x40>)
 800257c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002580:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002582:	4b07      	ldr	r3, [pc, #28]	@ (80025a0 <FLASH_Program_Word+0x40>)
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	4a06      	ldr	r2, [pc, #24]	@ (80025a0 <FLASH_Program_Word+0x40>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	601a      	str	r2, [r3, #0]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	40023c00 	.word	0x40023c00

080025a4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025b0:	4b0d      	ldr	r3, [pc, #52]	@ (80025e8 <FLASH_Program_HalfWord+0x44>)
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	4a0c      	ldr	r2, [pc, #48]	@ (80025e8 <FLASH_Program_HalfWord+0x44>)
 80025b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80025bc:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <FLASH_Program_HalfWord+0x44>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	4a09      	ldr	r2, [pc, #36]	@ (80025e8 <FLASH_Program_HalfWord+0x44>)
 80025c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025c8:	4b07      	ldr	r3, [pc, #28]	@ (80025e8 <FLASH_Program_HalfWord+0x44>)
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	4a06      	ldr	r2, [pc, #24]	@ (80025e8 <FLASH_Program_HalfWord+0x44>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	801a      	strh	r2, [r3, #0]
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40023c00 	.word	0x40023c00

080025ec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025f8:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <FLASH_Program_Byte+0x40>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	4a0b      	ldr	r2, [pc, #44]	@ (800262c <FLASH_Program_Byte+0x40>)
 80025fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002602:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002604:	4b09      	ldr	r3, [pc, #36]	@ (800262c <FLASH_Program_Byte+0x40>)
 8002606:	4a09      	ldr	r2, [pc, #36]	@ (800262c <FLASH_Program_Byte+0x40>)
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800260c:	4b07      	ldr	r3, [pc, #28]	@ (800262c <FLASH_Program_Byte+0x40>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	4a06      	ldr	r2, [pc, #24]	@ (800262c <FLASH_Program_Byte+0x40>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	701a      	strb	r2, [r3, #0]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40023c00 	.word	0x40023c00

08002630 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002634:	4b2f      	ldr	r3, [pc, #188]	@ (80026f4 <FLASH_SetErrorCode+0xc4>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002640:	4b2d      	ldr	r3, [pc, #180]	@ (80026f8 <FLASH_SetErrorCode+0xc8>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f043 0310 	orr.w	r3, r3, #16
 8002648:	4a2b      	ldr	r2, [pc, #172]	@ (80026f8 <FLASH_SetErrorCode+0xc8>)
 800264a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800264c:	4b29      	ldr	r3, [pc, #164]	@ (80026f4 <FLASH_SetErrorCode+0xc4>)
 800264e:	2210      	movs	r2, #16
 8002650:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002652:	4b28      	ldr	r3, [pc, #160]	@ (80026f4 <FLASH_SetErrorCode+0xc4>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800265e:	4b26      	ldr	r3, [pc, #152]	@ (80026f8 <FLASH_SetErrorCode+0xc8>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f043 0308 	orr.w	r3, r3, #8
 8002666:	4a24      	ldr	r2, [pc, #144]	@ (80026f8 <FLASH_SetErrorCode+0xc8>)
 8002668:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800266a:	4b22      	ldr	r3, [pc, #136]	@ (80026f4 <FLASH_SetErrorCode+0xc4>)
 800266c:	2220      	movs	r2, #32
 800266e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002670:	4b20      	ldr	r3, [pc, #128]	@ (80026f4 <FLASH_SetErrorCode+0xc4>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800267c:	4b1e      	ldr	r3, [pc, #120]	@ (80026f8 <FLASH_SetErrorCode+0xc8>)
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	4a1c      	ldr	r2, [pc, #112]	@ (80026f8 <FLASH_SetErrorCode+0xc8>)
 8002686:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002688:	4b1a      	ldr	r3, [pc, #104]	@ (80026f4 <FLASH_SetErrorCode+0xc4>)
 800268a:	2240      	movs	r2, #64	@ 0x40
 800268c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800268e:	4b19      	ldr	r3, [pc, #100]	@ (80026f4 <FLASH_SetErrorCode+0xc4>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800269a:	4b17      	ldr	r3, [pc, #92]	@ (80026f8 <FLASH_SetErrorCode+0xc8>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f043 0302 	orr.w	r3, r3, #2
 80026a2:	4a15      	ldr	r2, [pc, #84]	@ (80026f8 <FLASH_SetErrorCode+0xc8>)
 80026a4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80026a6:	4b13      	ldr	r3, [pc, #76]	@ (80026f4 <FLASH_SetErrorCode+0xc4>)
 80026a8:	2280      	movs	r2, #128	@ 0x80
 80026aa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80026ac:	4b11      	ldr	r3, [pc, #68]	@ (80026f4 <FLASH_SetErrorCode+0xc4>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d009      	beq.n	80026cc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	@ (80026f8 <FLASH_SetErrorCode+0xc8>)
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	4a0d      	ldr	r2, [pc, #52]	@ (80026f8 <FLASH_SetErrorCode+0xc8>)
 80026c2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80026c4:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <FLASH_SetErrorCode+0xc4>)
 80026c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026ca:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80026cc:	4b09      	ldr	r3, [pc, #36]	@ (80026f4 <FLASH_SetErrorCode+0xc4>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80026d8:	4b07      	ldr	r3, [pc, #28]	@ (80026f8 <FLASH_SetErrorCode+0xc8>)
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	f043 0320 	orr.w	r3, r3, #32
 80026e0:	4a05      	ldr	r2, [pc, #20]	@ (80026f8 <FLASH_SetErrorCode+0xc8>)
 80026e2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80026e4:	4b03      	ldr	r3, [pc, #12]	@ (80026f4 <FLASH_SetErrorCode+0xc4>)
 80026e6:	2202      	movs	r2, #2
 80026e8:	60da      	str	r2, [r3, #12]
  }
}
 80026ea:	bf00      	nop
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	40023c00 	.word	0x40023c00
 80026f8:	20000360 	.word	0x20000360

080026fc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800270a:	4b31      	ldr	r3, [pc, #196]	@ (80027d0 <HAL_FLASHEx_Erase+0xd4>)
 800270c:	7e1b      	ldrb	r3, [r3, #24]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_FLASHEx_Erase+0x1a>
 8002712:	2302      	movs	r3, #2
 8002714:	e058      	b.n	80027c8 <HAL_FLASHEx_Erase+0xcc>
 8002716:	4b2e      	ldr	r3, [pc, #184]	@ (80027d0 <HAL_FLASHEx_Erase+0xd4>)
 8002718:	2201      	movs	r2, #1
 800271a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800271c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002720:	f7ff feac 	bl	800247c <FLASH_WaitForLastOperation>
 8002724:	4603      	mov	r3, r0
 8002726:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d148      	bne.n	80027c0 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	f04f 32ff 	mov.w	r2, #4294967295
 8002734:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d115      	bne.n	800276a <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	b2da      	uxtb	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4619      	mov	r1, r3
 800274a:	4610      	mov	r0, r2
 800274c:	f000 f844 	bl	80027d8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002750:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002754:	f7ff fe92 	bl	800247c <FLASH_WaitForLastOperation>
 8002758:	4603      	mov	r3, r0
 800275a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800275c:	4b1d      	ldr	r3, [pc, #116]	@ (80027d4 <HAL_FLASHEx_Erase+0xd8>)
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	4a1c      	ldr	r2, [pc, #112]	@ (80027d4 <HAL_FLASHEx_Erase+0xd8>)
 8002762:	f023 0304 	bic.w	r3, r3, #4
 8002766:	6113      	str	r3, [r2, #16]
 8002768:	e028      	b.n	80027bc <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	e01c      	b.n	80027ac <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	4619      	mov	r1, r3
 800277a:	68b8      	ldr	r0, [r7, #8]
 800277c:	f000 f850 	bl	8002820 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002780:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002784:	f7ff fe7a 	bl	800247c <FLASH_WaitForLastOperation>
 8002788:	4603      	mov	r3, r0
 800278a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800278c:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <HAL_FLASHEx_Erase+0xd8>)
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	4a10      	ldr	r2, [pc, #64]	@ (80027d4 <HAL_FLASHEx_Erase+0xd8>)
 8002792:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002796:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	601a      	str	r2, [r3, #0]
          break;
 80027a4:	e00a      	b.n	80027bc <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	3301      	adds	r3, #1
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4413      	add	r3, r2
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d3da      	bcc.n	8002772 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80027bc:	f000 f878 	bl	80028b0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80027c0:	4b03      	ldr	r3, [pc, #12]	@ (80027d0 <HAL_FLASHEx_Erase+0xd4>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	761a      	strb	r2, [r3, #24]

  return status;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000360 	.word	0x20000360
 80027d4:	40023c00 	.word	0x40023c00

080027d8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80027e4:	4b0d      	ldr	r3, [pc, #52]	@ (800281c <FLASH_MassErase+0x44>)
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	4a0c      	ldr	r2, [pc, #48]	@ (800281c <FLASH_MassErase+0x44>)
 80027ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80027f0:	4b0a      	ldr	r3, [pc, #40]	@ (800281c <FLASH_MassErase+0x44>)
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	4a09      	ldr	r2, [pc, #36]	@ (800281c <FLASH_MassErase+0x44>)
 80027f6:	f043 0304 	orr.w	r3, r3, #4
 80027fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80027fc:	4b07      	ldr	r3, [pc, #28]	@ (800281c <FLASH_MassErase+0x44>)
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	4313      	orrs	r3, r2
 8002806:	4a05      	ldr	r2, [pc, #20]	@ (800281c <FLASH_MassErase+0x44>)
 8002808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800280c:	6113      	str	r3, [r2, #16]
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40023c00 	.word	0x40023c00

08002820 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d102      	bne.n	800283c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	e010      	b.n	800285e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d103      	bne.n	800284a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002842:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	e009      	b.n	800285e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d103      	bne.n	8002858 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002850:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	e002      	b.n	800285e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002858:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800285c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800285e:	4b13      	ldr	r3, [pc, #76]	@ (80028ac <FLASH_Erase_Sector+0x8c>)
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	4a12      	ldr	r2, [pc, #72]	@ (80028ac <FLASH_Erase_Sector+0x8c>)
 8002864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002868:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800286a:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <FLASH_Erase_Sector+0x8c>)
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	490f      	ldr	r1, [pc, #60]	@ (80028ac <FLASH_Erase_Sector+0x8c>)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002876:	4b0d      	ldr	r3, [pc, #52]	@ (80028ac <FLASH_Erase_Sector+0x8c>)
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	4a0c      	ldr	r2, [pc, #48]	@ (80028ac <FLASH_Erase_Sector+0x8c>)
 800287c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002880:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002882:	4b0a      	ldr	r3, [pc, #40]	@ (80028ac <FLASH_Erase_Sector+0x8c>)
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4313      	orrs	r3, r2
 800288c:	4a07      	ldr	r2, [pc, #28]	@ (80028ac <FLASH_Erase_Sector+0x8c>)
 800288e:	f043 0302 	orr.w	r3, r3, #2
 8002892:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002894:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <FLASH_Erase_Sector+0x8c>)
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	4a04      	ldr	r2, [pc, #16]	@ (80028ac <FLASH_Erase_Sector+0x8c>)
 800289a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800289e:	6113      	str	r3, [r2, #16]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40023c00 	.word	0x40023c00

080028b0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80028b4:	4b20      	ldr	r3, [pc, #128]	@ (8002938 <FLASH_FlushCaches+0x88>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d017      	beq.n	80028f0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80028c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002938 <FLASH_FlushCaches+0x88>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002938 <FLASH_FlushCaches+0x88>)
 80028c6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028ca:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80028cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002938 <FLASH_FlushCaches+0x88>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a19      	ldr	r2, [pc, #100]	@ (8002938 <FLASH_FlushCaches+0x88>)
 80028d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	4b17      	ldr	r3, [pc, #92]	@ (8002938 <FLASH_FlushCaches+0x88>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a16      	ldr	r2, [pc, #88]	@ (8002938 <FLASH_FlushCaches+0x88>)
 80028de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028e2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028e4:	4b14      	ldr	r3, [pc, #80]	@ (8002938 <FLASH_FlushCaches+0x88>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a13      	ldr	r2, [pc, #76]	@ (8002938 <FLASH_FlushCaches+0x88>)
 80028ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028ee:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80028f0:	4b11      	ldr	r3, [pc, #68]	@ (8002938 <FLASH_FlushCaches+0x88>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d017      	beq.n	800292c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80028fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002938 <FLASH_FlushCaches+0x88>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0d      	ldr	r2, [pc, #52]	@ (8002938 <FLASH_FlushCaches+0x88>)
 8002902:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002906:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002908:	4b0b      	ldr	r3, [pc, #44]	@ (8002938 <FLASH_FlushCaches+0x88>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0a      	ldr	r2, [pc, #40]	@ (8002938 <FLASH_FlushCaches+0x88>)
 800290e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	4b08      	ldr	r3, [pc, #32]	@ (8002938 <FLASH_FlushCaches+0x88>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a07      	ldr	r2, [pc, #28]	@ (8002938 <FLASH_FlushCaches+0x88>)
 800291a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800291e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002920:	4b05      	ldr	r3, [pc, #20]	@ (8002938 <FLASH_FlushCaches+0x88>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a04      	ldr	r2, [pc, #16]	@ (8002938 <FLASH_FlushCaches+0x88>)
 8002926:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800292a:	6013      	str	r3, [r2, #0]
  }
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40023c00 	.word	0x40023c00

0800293c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	@ 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
 8002956:	e165      	b.n	8002c24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002958:	2201      	movs	r2, #1
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4013      	ands	r3, r2
 800296a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	429a      	cmp	r2, r3
 8002972:	f040 8154 	bne.w	8002c1e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d005      	beq.n	800298e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800298a:	2b02      	cmp	r3, #2
 800298c:	d130      	bne.n	80029f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	2203      	movs	r2, #3
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c4:	2201      	movs	r2, #1
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 0201 	and.w	r2, r3, #1
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d017      	beq.n	8002a2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	2203      	movs	r2, #3
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d123      	bne.n	8002a80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	08da      	lsrs	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3208      	adds	r2, #8
 8002a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	220f      	movs	r2, #15
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	08da      	lsrs	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3208      	adds	r2, #8
 8002a7a:	69b9      	ldr	r1, [r7, #24]
 8002a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 0203 	and.w	r2, r3, #3
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80ae 	beq.w	8002c1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8002c3c <HAL_GPIO_Init+0x300>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	4a5c      	ldr	r2, [pc, #368]	@ (8002c3c <HAL_GPIO_Init+0x300>)
 8002acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ad2:	4b5a      	ldr	r3, [pc, #360]	@ (8002c3c <HAL_GPIO_Init+0x300>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ade:	4a58      	ldr	r2, [pc, #352]	@ (8002c40 <HAL_GPIO_Init+0x304>)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	220f      	movs	r2, #15
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a4f      	ldr	r2, [pc, #316]	@ (8002c44 <HAL_GPIO_Init+0x308>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d025      	beq.n	8002b56 <HAL_GPIO_Init+0x21a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a4e      	ldr	r2, [pc, #312]	@ (8002c48 <HAL_GPIO_Init+0x30c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01f      	beq.n	8002b52 <HAL_GPIO_Init+0x216>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a4d      	ldr	r2, [pc, #308]	@ (8002c4c <HAL_GPIO_Init+0x310>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d019      	beq.n	8002b4e <HAL_GPIO_Init+0x212>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a4c      	ldr	r2, [pc, #304]	@ (8002c50 <HAL_GPIO_Init+0x314>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d013      	beq.n	8002b4a <HAL_GPIO_Init+0x20e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a4b      	ldr	r2, [pc, #300]	@ (8002c54 <HAL_GPIO_Init+0x318>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00d      	beq.n	8002b46 <HAL_GPIO_Init+0x20a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4a      	ldr	r2, [pc, #296]	@ (8002c58 <HAL_GPIO_Init+0x31c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d007      	beq.n	8002b42 <HAL_GPIO_Init+0x206>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a49      	ldr	r2, [pc, #292]	@ (8002c5c <HAL_GPIO_Init+0x320>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d101      	bne.n	8002b3e <HAL_GPIO_Init+0x202>
 8002b3a:	2306      	movs	r3, #6
 8002b3c:	e00c      	b.n	8002b58 <HAL_GPIO_Init+0x21c>
 8002b3e:	2307      	movs	r3, #7
 8002b40:	e00a      	b.n	8002b58 <HAL_GPIO_Init+0x21c>
 8002b42:	2305      	movs	r3, #5
 8002b44:	e008      	b.n	8002b58 <HAL_GPIO_Init+0x21c>
 8002b46:	2304      	movs	r3, #4
 8002b48:	e006      	b.n	8002b58 <HAL_GPIO_Init+0x21c>
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e004      	b.n	8002b58 <HAL_GPIO_Init+0x21c>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e002      	b.n	8002b58 <HAL_GPIO_Init+0x21c>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_GPIO_Init+0x21c>
 8002b56:	2300      	movs	r3, #0
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	f002 0203 	and.w	r2, r2, #3
 8002b5e:	0092      	lsls	r2, r2, #2
 8002b60:	4093      	lsls	r3, r2
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b68:	4935      	ldr	r1, [pc, #212]	@ (8002c40 <HAL_GPIO_Init+0x304>)
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	089b      	lsrs	r3, r3, #2
 8002b6e:	3302      	adds	r3, #2
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b76:	4b3a      	ldr	r3, [pc, #232]	@ (8002c60 <HAL_GPIO_Init+0x324>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b9a:	4a31      	ldr	r2, [pc, #196]	@ (8002c60 <HAL_GPIO_Init+0x324>)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8002c60 <HAL_GPIO_Init+0x324>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bc4:	4a26      	ldr	r2, [pc, #152]	@ (8002c60 <HAL_GPIO_Init+0x324>)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bca:	4b25      	ldr	r3, [pc, #148]	@ (8002c60 <HAL_GPIO_Init+0x324>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bee:	4a1c      	ldr	r2, [pc, #112]	@ (8002c60 <HAL_GPIO_Init+0x324>)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c60 <HAL_GPIO_Init+0x324>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c18:	4a11      	ldr	r2, [pc, #68]	@ (8002c60 <HAL_GPIO_Init+0x324>)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3301      	adds	r3, #1
 8002c22:	61fb      	str	r3, [r7, #28]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	2b0f      	cmp	r3, #15
 8002c28:	f67f ae96 	bls.w	8002958 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	3724      	adds	r7, #36	@ 0x24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	40013800 	.word	0x40013800
 8002c44:	40020000 	.word	0x40020000
 8002c48:	40020400 	.word	0x40020400
 8002c4c:	40020800 	.word	0x40020800
 8002c50:	40020c00 	.word	0x40020c00
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40021400 	.word	0x40021400
 8002c5c:	40021800 	.word	0x40021800
 8002c60:	40013c00 	.word	0x40013c00

08002c64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	887b      	ldrh	r3, [r7, #2]
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
 8002c80:	e001      	b.n	8002c86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c82:	2300      	movs	r3, #0
 8002c84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	807b      	strh	r3, [r7, #2]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ca4:	787b      	ldrb	r3, [r7, #1]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002caa:	887a      	ldrh	r2, [r7, #2]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cb0:	e003      	b.n	8002cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cb2:	887b      	ldrh	r3, [r7, #2]
 8002cb4:	041a      	lsls	r2, r3, #16
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	619a      	str	r2, [r3, #24]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	4b20      	ldr	r3, [pc, #128]	@ (8002d58 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	4a1f      	ldr	r2, [pc, #124]	@ (8002d58 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d58 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cee:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <HAL_PWREx_EnableOverDrive+0x94>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cf4:	f7ff f9e2 	bl	80020bc <HAL_GetTick>
 8002cf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cfa:	e009      	b.n	8002d10 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cfc:	f7ff f9de 	bl	80020bc <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d0a:	d901      	bls.n	8002d10 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e01f      	b.n	8002d50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d10:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d1c:	d1ee      	bne.n	8002cfc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d1e:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d24:	f7ff f9ca 	bl	80020bc <HAL_GetTick>
 8002d28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d2a:	e009      	b.n	8002d40 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d2c:	f7ff f9c6 	bl	80020bc <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d3a:	d901      	bls.n	8002d40 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e007      	b.n	8002d50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d40:	4b07      	ldr	r3, [pc, #28]	@ (8002d60 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d4c:	d1ee      	bne.n	8002d2c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	420e0040 	.word	0x420e0040
 8002d60:	40007000 	.word	0x40007000
 8002d64:	420e0044 	.word	0x420e0044

08002d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0cc      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b68      	ldr	r3, [pc, #416]	@ (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d90c      	bls.n	8002da4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b65      	ldr	r3, [pc, #404]	@ (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b63      	ldr	r3, [pc, #396]	@ (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0b8      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d020      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dbc:	4b59      	ldr	r3, [pc, #356]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4a58      	ldr	r2, [pc, #352]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002dc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd4:	4b53      	ldr	r3, [pc, #332]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	4a52      	ldr	r2, [pc, #328]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de0:	4b50      	ldr	r3, [pc, #320]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	494d      	ldr	r1, [pc, #308]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d044      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e06:	4b47      	ldr	r3, [pc, #284]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d119      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e07f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d003      	beq.n	8002e26 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e26:	4b3f      	ldr	r3, [pc, #252]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e06f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e36:	4b3b      	ldr	r3, [pc, #236]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e067      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e46:	4b37      	ldr	r3, [pc, #220]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f023 0203 	bic.w	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4934      	ldr	r1, [pc, #208]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e58:	f7ff f930 	bl	80020bc <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e60:	f7ff f92c 	bl	80020bc <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e04f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	4b2b      	ldr	r3, [pc, #172]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 020c 	and.w	r2, r3, #12
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d1eb      	bne.n	8002e60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e88:	4b25      	ldr	r3, [pc, #148]	@ (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d20c      	bcs.n	8002eb0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b22      	ldr	r3, [pc, #136]	@ (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b20      	ldr	r3, [pc, #128]	@ (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e032      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ebc:	4b19      	ldr	r3, [pc, #100]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4916      	ldr	r1, [pc, #88]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eda:	4b12      	ldr	r3, [pc, #72]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	490e      	ldr	r1, [pc, #56]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eee:	f000 f855 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	490a      	ldr	r1, [pc, #40]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	5ccb      	ldrb	r3, [r1, r3]
 8002f02:	fa22 f303 	lsr.w	r3, r2, r3
 8002f06:	4a09      	ldr	r2, [pc, #36]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f0a:	4b09      	ldr	r3, [pc, #36]	@ (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff f890 	bl	8002034 <HAL_InitTick>

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023c00 	.word	0x40023c00
 8002f24:	40023800 	.word	0x40023800
 8002f28:	0800671c 	.word	0x0800671c
 8002f2c:	20000008 	.word	0x20000008
 8002f30:	2000000c 	.word	0x2000000c

08002f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f38:	4b03      	ldr	r3, [pc, #12]	@ (8002f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000008 	.word	0x20000008

08002f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f50:	f7ff fff0 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	0a9b      	lsrs	r3, r3, #10
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	4903      	ldr	r1, [pc, #12]	@ (8002f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	0800672c 	.word	0x0800672c

08002f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f78:	f7ff ffdc 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	4b05      	ldr	r3, [pc, #20]	@ (8002f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	0b5b      	lsrs	r3, r3, #13
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	4903      	ldr	r1, [pc, #12]	@ (8002f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f8a:	5ccb      	ldrb	r3, [r1, r3]
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40023800 	.word	0x40023800
 8002f98:	0800672c 	.word	0x0800672c

08002f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa0:	b0a6      	sub	sp, #152	@ 0x98
 8002fa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc2:	4bc8      	ldr	r3, [pc, #800]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b0c      	cmp	r3, #12
 8002fcc:	f200 817e 	bhi.w	80032cc <HAL_RCC_GetSysClockFreq+0x330>
 8002fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd6:	bf00      	nop
 8002fd8:	0800300d 	.word	0x0800300d
 8002fdc:	080032cd 	.word	0x080032cd
 8002fe0:	080032cd 	.word	0x080032cd
 8002fe4:	080032cd 	.word	0x080032cd
 8002fe8:	08003015 	.word	0x08003015
 8002fec:	080032cd 	.word	0x080032cd
 8002ff0:	080032cd 	.word	0x080032cd
 8002ff4:	080032cd 	.word	0x080032cd
 8002ff8:	0800301d 	.word	0x0800301d
 8002ffc:	080032cd 	.word	0x080032cd
 8003000:	080032cd 	.word	0x080032cd
 8003004:	080032cd 	.word	0x080032cd
 8003008:	08003187 	.word	0x08003187
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800300c:	4bb6      	ldr	r3, [pc, #728]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800300e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003012:	e15f      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003014:	4bb5      	ldr	r3, [pc, #724]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x350>)
 8003016:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800301a:	e15b      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800301c:	4bb1      	ldr	r3, [pc, #708]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x348>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003024:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003028:	4bae      	ldr	r3, [pc, #696]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x348>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d031      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003034:	4bab      	ldr	r3, [pc, #684]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	099b      	lsrs	r3, r3, #6
 800303a:	2200      	movs	r2, #0
 800303c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800303e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003040:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003046:	663b      	str	r3, [r7, #96]	@ 0x60
 8003048:	2300      	movs	r3, #0
 800304a:	667b      	str	r3, [r7, #100]	@ 0x64
 800304c:	4ba7      	ldr	r3, [pc, #668]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x350>)
 800304e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003052:	462a      	mov	r2, r5
 8003054:	fb03 f202 	mul.w	r2, r3, r2
 8003058:	2300      	movs	r3, #0
 800305a:	4621      	mov	r1, r4
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	4aa2      	ldr	r2, [pc, #648]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x350>)
 8003064:	4621      	mov	r1, r4
 8003066:	fba1 1202 	umull	r1, r2, r1, r2
 800306a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800306c:	460a      	mov	r2, r1
 800306e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003070:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003072:	4413      	add	r3, r2
 8003074:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003076:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800307a:	2200      	movs	r2, #0
 800307c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800307e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003080:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003084:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003088:	f7fd f912 	bl	80002b0 <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4613      	mov	r3, r2
 8003092:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003096:	e064      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003098:	4b92      	ldr	r3, [pc, #584]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x348>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	099b      	lsrs	r3, r3, #6
 800309e:	2200      	movs	r2, #0
 80030a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80030a2:	657a      	str	r2, [r7, #84]	@ 0x54
 80030a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030ac:	2300      	movs	r3, #0
 80030ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030b0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80030b4:	4622      	mov	r2, r4
 80030b6:	462b      	mov	r3, r5
 80030b8:	f04f 0000 	mov.w	r0, #0
 80030bc:	f04f 0100 	mov.w	r1, #0
 80030c0:	0159      	lsls	r1, r3, #5
 80030c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c6:	0150      	lsls	r0, r2, #5
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4621      	mov	r1, r4
 80030ce:	1a51      	subs	r1, r2, r1
 80030d0:	6139      	str	r1, [r7, #16]
 80030d2:	4629      	mov	r1, r5
 80030d4:	eb63 0301 	sbc.w	r3, r3, r1
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030e6:	4659      	mov	r1, fp
 80030e8:	018b      	lsls	r3, r1, #6
 80030ea:	4651      	mov	r1, sl
 80030ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030f0:	4651      	mov	r1, sl
 80030f2:	018a      	lsls	r2, r1, #6
 80030f4:	4651      	mov	r1, sl
 80030f6:	ebb2 0801 	subs.w	r8, r2, r1
 80030fa:	4659      	mov	r1, fp
 80030fc:	eb63 0901 	sbc.w	r9, r3, r1
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800310c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003110:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003114:	4690      	mov	r8, r2
 8003116:	4699      	mov	r9, r3
 8003118:	4623      	mov	r3, r4
 800311a:	eb18 0303 	adds.w	r3, r8, r3
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	462b      	mov	r3, r5
 8003122:	eb49 0303 	adc.w	r3, r9, r3
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003134:	4629      	mov	r1, r5
 8003136:	028b      	lsls	r3, r1, #10
 8003138:	4621      	mov	r1, r4
 800313a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800313e:	4621      	mov	r1, r4
 8003140:	028a      	lsls	r2, r1, #10
 8003142:	4610      	mov	r0, r2
 8003144:	4619      	mov	r1, r3
 8003146:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800314a:	2200      	movs	r2, #0
 800314c:	643b      	str	r3, [r7, #64]	@ 0x40
 800314e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003150:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003154:	f7fd f8ac 	bl	80002b0 <__aeabi_uldivmod>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4613      	mov	r3, r2
 800315e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003162:	4b60      	ldr	r3, [pc, #384]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	0c1b      	lsrs	r3, r3, #16
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	3301      	adds	r3, #1
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003174:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003178:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800317c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003180:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003184:	e0a6      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003186:	4b57      	ldr	r3, [pc, #348]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800318e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003192:	4b54      	ldr	r3, [pc, #336]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d02a      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319e:	4b51      	ldr	r3, [pc, #324]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	099b      	lsrs	r3, r3, #6
 80031a4:	2200      	movs	r2, #0
 80031a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80031aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031b0:	2100      	movs	r1, #0
 80031b2:	4b4e      	ldr	r3, [pc, #312]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x350>)
 80031b4:	fb03 f201 	mul.w	r2, r3, r1
 80031b8:	2300      	movs	r3, #0
 80031ba:	fb00 f303 	mul.w	r3, r0, r3
 80031be:	4413      	add	r3, r2
 80031c0:	4a4a      	ldr	r2, [pc, #296]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x350>)
 80031c2:	fba0 1202 	umull	r1, r2, r0, r2
 80031c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80031c8:	460a      	mov	r2, r1
 80031ca:	673a      	str	r2, [r7, #112]	@ 0x70
 80031cc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80031ce:	4413      	add	r3, r2
 80031d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80031d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031d6:	2200      	movs	r2, #0
 80031d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80031da:	637a      	str	r2, [r7, #52]	@ 0x34
 80031dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80031e0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80031e4:	f7fd f864 	bl	80002b0 <__aeabi_uldivmod>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4613      	mov	r3, r2
 80031ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031f2:	e05b      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f4:	4b3b      	ldr	r3, [pc, #236]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	099b      	lsrs	r3, r3, #6
 80031fa:	2200      	movs	r2, #0
 80031fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003206:	623b      	str	r3, [r7, #32]
 8003208:	2300      	movs	r3, #0
 800320a:	627b      	str	r3, [r7, #36]	@ 0x24
 800320c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003210:	4642      	mov	r2, r8
 8003212:	464b      	mov	r3, r9
 8003214:	f04f 0000 	mov.w	r0, #0
 8003218:	f04f 0100 	mov.w	r1, #0
 800321c:	0159      	lsls	r1, r3, #5
 800321e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003222:	0150      	lsls	r0, r2, #5
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4641      	mov	r1, r8
 800322a:	ebb2 0a01 	subs.w	sl, r2, r1
 800322e:	4649      	mov	r1, r9
 8003230:	eb63 0b01 	sbc.w	fp, r3, r1
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003240:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003244:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003248:	ebb2 040a 	subs.w	r4, r2, sl
 800324c:	eb63 050b 	sbc.w	r5, r3, fp
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	00eb      	lsls	r3, r5, #3
 800325a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800325e:	00e2      	lsls	r2, r4, #3
 8003260:	4614      	mov	r4, r2
 8003262:	461d      	mov	r5, r3
 8003264:	4643      	mov	r3, r8
 8003266:	18e3      	adds	r3, r4, r3
 8003268:	603b      	str	r3, [r7, #0]
 800326a:	464b      	mov	r3, r9
 800326c:	eb45 0303 	adc.w	r3, r5, r3
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800327e:	4629      	mov	r1, r5
 8003280:	028b      	lsls	r3, r1, #10
 8003282:	4621      	mov	r1, r4
 8003284:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003288:	4621      	mov	r1, r4
 800328a:	028a      	lsls	r2, r1, #10
 800328c:	4610      	mov	r0, r2
 800328e:	4619      	mov	r1, r3
 8003290:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003294:	2200      	movs	r2, #0
 8003296:	61bb      	str	r3, [r7, #24]
 8003298:	61fa      	str	r2, [r7, #28]
 800329a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800329e:	f7fd f807 	bl	80002b0 <__aeabi_uldivmod>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4613      	mov	r3, r2
 80032a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80032ac:	4b0d      	ldr	r3, [pc, #52]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	0f1b      	lsrs	r3, r3, #28
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80032ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80032be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80032ca:	e003      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032cc:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80032ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80032d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3798      	adds	r7, #152	@ 0x98
 80032dc:	46bd      	mov	sp, r7
 80032de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	00f42400 	.word	0x00f42400
 80032ec:	017d7840 	.word	0x017d7840

080032f0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80032f6:	f7fe fee1 	bl	80020bc <HAL_GetTick>
 80032fa:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80032fc:	4b72      	ldr	r3, [pc, #456]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a71      	ldr	r2, [pc, #452]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330a:	f7fe fed7 	bl	80020bc <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e0d0      	b.n	80034be <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800331c:	4b6a      	ldr	r3, [pc, #424]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003328:	4b67      	ldr	r3, [pc, #412]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a66      	ldr	r2, [pc, #408]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 800332e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003332:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003334:	f7fe fec2 	bl	80020bc <HAL_GetTick>
 8003338:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800333a:	4b63      	ldr	r3, [pc, #396]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003342:	f7fe febb 	bl	80020bc <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e0b2      	b.n	80034be <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003358:	4b5b      	ldr	r3, [pc, #364]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ee      	bne.n	8003342 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003364:	f7fe feaa 	bl	80020bc <HAL_GetTick>
 8003368:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800336a:	4b57      	ldr	r3, [pc, #348]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a56      	ldr	r2, [pc, #344]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 8003370:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8003374:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003378:	f7fe fea0 	bl	80020bc <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	@ 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e099      	b.n	80034be <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800338a:	4b4f      	ldr	r3, [pc, #316]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003396:	f7fe fe91 	bl	80020bc <HAL_GetTick>
 800339a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800339c:	4b4a      	ldr	r3, [pc, #296]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a49      	ldr	r2, [pc, #292]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 80033a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033a6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033aa:	f7fe fe87 	bl	80020bc <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e080      	b.n	80034be <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80033bc:	4b42      	ldr	r3, [pc, #264]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f0      	bne.n	80033aa <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80033c8:	f7fe fe78 	bl	80020bc <HAL_GetTick>
 80033cc:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80033ce:	4b3e      	ldr	r3, [pc, #248]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a3d      	ldr	r2, [pc, #244]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 80033d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80033d8:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033dc:	f7fe fe6e 	bl	80020bc <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e067      	b.n	80034be <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80033ee:	4b36      	ldr	r3, [pc, #216]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80033fa:	f7fe fe5f 	bl	80020bc <HAL_GetTick>
 80033fe:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8003400:	4b31      	ldr	r3, [pc, #196]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a30      	ldr	r2, [pc, #192]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 8003406:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800340a:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800340e:	f7fe fe55 	bl	80020bc <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e04e      	b.n	80034be <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003420:	4b29      	ldr	r3, [pc, #164]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f0      	bne.n	800340e <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 800342c:	4b26      	ldr	r3, [pc, #152]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 800342e:	4a27      	ldr	r2, [pc, #156]	@ (80034cc <HAL_RCC_DeInit+0x1dc>)
 8003430:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003432:	4b25      	ldr	r3, [pc, #148]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 8003434:	4a25      	ldr	r2, [pc, #148]	@ (80034cc <HAL_RCC_DeInit+0x1dc>)
 8003436:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 800343a:	4b23      	ldr	r3, [pc, #140]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 800343c:	4a24      	ldr	r2, [pc, #144]	@ (80034d0 <HAL_RCC_DeInit+0x1e0>)
 800343e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003442:	4b21      	ldr	r3, [pc, #132]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	4a20      	ldr	r2, [pc, #128]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 8003448:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800344c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800344e:	4b1e      	ldr	r3, [pc, #120]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	4a1d      	ldr	r2, [pc, #116]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 8003454:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003458:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 800345a:	4b1b      	ldr	r3, [pc, #108]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	4a1a      	ldr	r2, [pc, #104]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 8003460:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003464:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 8003466:	4b18      	ldr	r3, [pc, #96]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	4a17      	ldr	r2, [pc, #92]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 800346c:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8003470:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003472:	4b15      	ldr	r3, [pc, #84]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	4a14      	ldr	r2, [pc, #80]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 8003478:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800347c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 800347e:	4b12      	ldr	r3, [pc, #72]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	4a11      	ldr	r2, [pc, #68]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 8003484:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003488:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800348a:	4b0f      	ldr	r3, [pc, #60]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 800348c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800348e:	4a0e      	ldr	r2, [pc, #56]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003496:	4b0c      	ldr	r3, [pc, #48]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 8003498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800349a:	4a0b      	ldr	r2, [pc, #44]	@ (80034c8 <HAL_RCC_DeInit+0x1d8>)
 800349c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034a0:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80034a2:	4b0c      	ldr	r3, [pc, #48]	@ (80034d4 <HAL_RCC_DeInit+0x1e4>)
 80034a4:	4a0c      	ldr	r2, [pc, #48]	@ (80034d8 <HAL_RCC_DeInit+0x1e8>)
 80034a6:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034a8:	4b0c      	ldr	r3, [pc, #48]	@ (80034dc <HAL_RCC_DeInit+0x1ec>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fe fdc1 	bl	8002034 <HAL_InitTick>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e000      	b.n	80034be <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 80034bc:	2300      	movs	r3, #0
  }
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40023800 	.word	0x40023800
 80034cc:	24003010 	.word	0x24003010
 80034d0:	04003010 	.word	0x04003010
 80034d4:	20000008 	.word	0x20000008
 80034d8:	00f42400 	.word	0x00f42400
 80034dc:	2000000c 	.word	0x2000000c

080034e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e28d      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 8083 	beq.w	8003606 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003500:	4b94      	ldr	r3, [pc, #592]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 030c 	and.w	r3, r3, #12
 8003508:	2b04      	cmp	r3, #4
 800350a:	d019      	beq.n	8003540 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800350c:	4b91      	ldr	r3, [pc, #580]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 030c 	and.w	r3, r3, #12
        || \
 8003514:	2b08      	cmp	r3, #8
 8003516:	d106      	bne.n	8003526 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003518:	4b8e      	ldr	r3, [pc, #568]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003520:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003524:	d00c      	beq.n	8003540 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003526:	4b8b      	ldr	r3, [pc, #556]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800352e:	2b0c      	cmp	r3, #12
 8003530:	d112      	bne.n	8003558 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003532:	4b88      	ldr	r3, [pc, #544]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800353a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800353e:	d10b      	bne.n	8003558 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003540:	4b84      	ldr	r3, [pc, #528]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d05b      	beq.n	8003604 <HAL_RCC_OscConfig+0x124>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d157      	bne.n	8003604 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e25a      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003560:	d106      	bne.n	8003570 <HAL_RCC_OscConfig+0x90>
 8003562:	4b7c      	ldr	r3, [pc, #496]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a7b      	ldr	r2, [pc, #492]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e01d      	b.n	80035ac <HAL_RCC_OscConfig+0xcc>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003578:	d10c      	bne.n	8003594 <HAL_RCC_OscConfig+0xb4>
 800357a:	4b76      	ldr	r3, [pc, #472]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a75      	ldr	r2, [pc, #468]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 8003580:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	4b73      	ldr	r3, [pc, #460]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a72      	ldr	r2, [pc, #456]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 800358c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e00b      	b.n	80035ac <HAL_RCC_OscConfig+0xcc>
 8003594:	4b6f      	ldr	r3, [pc, #444]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a6e      	ldr	r2, [pc, #440]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 800359a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a6b      	ldr	r2, [pc, #428]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 80035a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d013      	beq.n	80035dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fe fd82 	bl	80020bc <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035bc:	f7fe fd7e 	bl	80020bc <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	@ 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e21f      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	4b61      	ldr	r3, [pc, #388]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0xdc>
 80035da:	e014      	b.n	8003606 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fe fd6e 	bl	80020bc <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e4:	f7fe fd6a 	bl	80020bc <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	@ 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e20b      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f6:	4b57      	ldr	r3, [pc, #348]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x104>
 8003602:	e000      	b.n	8003606 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d06f      	beq.n	80036f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003612:	4b50      	ldr	r3, [pc, #320]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b00      	cmp	r3, #0
 800361c:	d017      	beq.n	800364e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800361e:	4b4d      	ldr	r3, [pc, #308]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
        || \
 8003626:	2b08      	cmp	r3, #8
 8003628:	d105      	bne.n	8003636 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800362a:	4b4a      	ldr	r3, [pc, #296]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00b      	beq.n	800364e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003636:	4b47      	ldr	r3, [pc, #284]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d11c      	bne.n	800367c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003642:	4b44      	ldr	r3, [pc, #272]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d116      	bne.n	800367c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364e:	4b41      	ldr	r3, [pc, #260]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_RCC_OscConfig+0x186>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d001      	beq.n	8003666 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e1d3      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003666:	4b3b      	ldr	r3, [pc, #236]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4937      	ldr	r1, [pc, #220]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 8003676:	4313      	orrs	r3, r2
 8003678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367a:	e03a      	b.n	80036f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d020      	beq.n	80036c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003684:	4b34      	ldr	r3, [pc, #208]	@ (8003758 <HAL_RCC_OscConfig+0x278>)
 8003686:	2201      	movs	r2, #1
 8003688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368a:	f7fe fd17 	bl	80020bc <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003692:	f7fe fd13 	bl	80020bc <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e1b4      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b0:	4b28      	ldr	r3, [pc, #160]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4925      	ldr	r1, [pc, #148]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	600b      	str	r3, [r1, #0]
 80036c4:	e015      	b.n	80036f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c6:	4b24      	ldr	r3, [pc, #144]	@ (8003758 <HAL_RCC_OscConfig+0x278>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe fcf6 	bl	80020bc <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d4:	f7fe fcf2 	bl	80020bc <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e193      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d036      	beq.n	800376c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d016      	beq.n	8003734 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003706:	4b15      	ldr	r3, [pc, #84]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 8003708:	2201      	movs	r2, #1
 800370a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370c:	f7fe fcd6 	bl	80020bc <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003714:	f7fe fcd2 	bl	80020bc <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e173      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003726:	4b0b      	ldr	r3, [pc, #44]	@ (8003754 <HAL_RCC_OscConfig+0x274>)
 8003728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x234>
 8003732:	e01b      	b.n	800376c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003734:	4b09      	ldr	r3, [pc, #36]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373a:	f7fe fcbf 	bl	80020bc <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003740:	e00e      	b.n	8003760 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003742:	f7fe fcbb 	bl	80020bc <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d907      	bls.n	8003760 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e15c      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
 8003754:	40023800 	.word	0x40023800
 8003758:	42470000 	.word	0x42470000
 800375c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003760:	4b8a      	ldr	r3, [pc, #552]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1ea      	bne.n	8003742 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8097 	beq.w	80038a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377a:	2300      	movs	r3, #0
 800377c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377e:	4b83      	ldr	r3, [pc, #524]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10f      	bne.n	80037aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	4b7f      	ldr	r3, [pc, #508]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	4a7e      	ldr	r2, [pc, #504]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003798:	6413      	str	r3, [r2, #64]	@ 0x40
 800379a:	4b7c      	ldr	r3, [pc, #496]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a6:	2301      	movs	r3, #1
 80037a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037aa:	4b79      	ldr	r3, [pc, #484]	@ (8003990 <HAL_RCC_OscConfig+0x4b0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d118      	bne.n	80037e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037b6:	4b76      	ldr	r3, [pc, #472]	@ (8003990 <HAL_RCC_OscConfig+0x4b0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a75      	ldr	r2, [pc, #468]	@ (8003990 <HAL_RCC_OscConfig+0x4b0>)
 80037bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c2:	f7fe fc7b 	bl	80020bc <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ca:	f7fe fc77 	bl	80020bc <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e118      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003990 <HAL_RCC_OscConfig+0x4b0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d106      	bne.n	80037fe <HAL_RCC_OscConfig+0x31e>
 80037f0:	4b66      	ldr	r3, [pc, #408]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f4:	4a65      	ldr	r2, [pc, #404]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80037fc:	e01c      	b.n	8003838 <HAL_RCC_OscConfig+0x358>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b05      	cmp	r3, #5
 8003804:	d10c      	bne.n	8003820 <HAL_RCC_OscConfig+0x340>
 8003806:	4b61      	ldr	r3, [pc, #388]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380a:	4a60      	ldr	r2, [pc, #384]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 800380c:	f043 0304 	orr.w	r3, r3, #4
 8003810:	6713      	str	r3, [r2, #112]	@ 0x70
 8003812:	4b5e      	ldr	r3, [pc, #376]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003816:	4a5d      	ldr	r2, [pc, #372]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	6713      	str	r3, [r2, #112]	@ 0x70
 800381e:	e00b      	b.n	8003838 <HAL_RCC_OscConfig+0x358>
 8003820:	4b5a      	ldr	r3, [pc, #360]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003824:	4a59      	ldr	r2, [pc, #356]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003826:	f023 0301 	bic.w	r3, r3, #1
 800382a:	6713      	str	r3, [r2, #112]	@ 0x70
 800382c:	4b57      	ldr	r3, [pc, #348]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003830:	4a56      	ldr	r2, [pc, #344]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003832:	f023 0304 	bic.w	r3, r3, #4
 8003836:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d015      	beq.n	800386c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003840:	f7fe fc3c 	bl	80020bc <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003846:	e00a      	b.n	800385e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003848:	f7fe fc38 	bl	80020bc <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003856:	4293      	cmp	r3, r2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e0d7      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385e:	4b4b      	ldr	r3, [pc, #300]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0ee      	beq.n	8003848 <HAL_RCC_OscConfig+0x368>
 800386a:	e014      	b.n	8003896 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386c:	f7fe fc26 	bl	80020bc <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003872:	e00a      	b.n	800388a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003874:	f7fe fc22 	bl	80020bc <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e0c1      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388a:	4b40      	ldr	r3, [pc, #256]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1ee      	bne.n	8003874 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003896:	7dfb      	ldrb	r3, [r7, #23]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d105      	bne.n	80038a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389c:	4b3b      	ldr	r3, [pc, #236]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 800389e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a0:	4a3a      	ldr	r2, [pc, #232]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 80038a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80ad 	beq.w	8003a0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038b2:	4b36      	ldr	r3, [pc, #216]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d060      	beq.n	8003980 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d145      	bne.n	8003952 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c6:	4b33      	ldr	r3, [pc, #204]	@ (8003994 <HAL_RCC_OscConfig+0x4b4>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fe fbf6 	bl	80020bc <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d4:	f7fe fbf2 	bl	80020bc <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e093      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e6:	4b29      	ldr	r3, [pc, #164]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69da      	ldr	r2, [r3, #28]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003900:	019b      	lsls	r3, r3, #6
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	3b01      	subs	r3, #1
 800390c:	041b      	lsls	r3, r3, #16
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391c:	071b      	lsls	r3, r3, #28
 800391e:	491b      	ldr	r1, [pc, #108]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003924:	4b1b      	ldr	r3, [pc, #108]	@ (8003994 <HAL_RCC_OscConfig+0x4b4>)
 8003926:	2201      	movs	r2, #1
 8003928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392a:	f7fe fbc7 	bl	80020bc <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003932:	f7fe fbc3 	bl	80020bc <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e064      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003944:	4b11      	ldr	r3, [pc, #68]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x452>
 8003950:	e05c      	b.n	8003a0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003952:	4b10      	ldr	r3, [pc, #64]	@ (8003994 <HAL_RCC_OscConfig+0x4b4>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fe fbb0 	bl	80020bc <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003960:	f7fe fbac 	bl	80020bc <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e04d      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	4b06      	ldr	r3, [pc, #24]	@ (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x480>
 800397e:	e045      	b.n	8003a0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d107      	bne.n	8003998 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e040      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
 800398c:	40023800 	.word	0x40023800
 8003990:	40007000 	.word	0x40007000
 8003994:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003998:	4b1f      	ldr	r3, [pc, #124]	@ (8003a18 <HAL_RCC_OscConfig+0x538>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d030      	beq.n	8003a08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d129      	bne.n	8003a08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d122      	bne.n	8003a08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039c8:	4013      	ands	r3, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d119      	bne.n	8003a08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039de:	085b      	lsrs	r3, r3, #1
 80039e0:	3b01      	subs	r3, #1
 80039e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d10f      	bne.n	8003a08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d107      	bne.n	8003a08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800

08003a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e07b      	b.n	8003b26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d108      	bne.n	8003a48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a3e:	d009      	beq.n	8003a54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	61da      	str	r2, [r3, #28]
 8003a46:	e005      	b.n	8003a54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fe f83e 	bl	8001af0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad8:	ea42 0103 	orr.w	r1, r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	0c1b      	lsrs	r3, r3, #16
 8003af2:	f003 0104 	and.w	r1, r3, #4
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	f003 0210 	and.w	r2, r3, #16
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b088      	sub	sp, #32
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b3e:	f7fe fabd 	bl	80020bc <HAL_GetTick>
 8003b42:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003b44:	88fb      	ldrh	r3, [r7, #6]
 8003b46:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d001      	beq.n	8003b58 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003b54:	2302      	movs	r3, #2
 8003b56:	e12a      	b.n	8003dae <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_SPI_Transmit+0x36>
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e122      	b.n	8003dae <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_SPI_Transmit+0x48>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e11b      	b.n	8003dae <HAL_SPI_Transmit+0x280>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2203      	movs	r2, #3
 8003b82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	88fa      	ldrh	r2, [r7, #6]
 8003b96:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	88fa      	ldrh	r2, [r7, #6]
 8003b9c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bc4:	d10f      	bne.n	8003be6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003be4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf0:	2b40      	cmp	r3, #64	@ 0x40
 8003bf2:	d007      	beq.n	8003c04 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c0c:	d152      	bne.n	8003cb4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_SPI_Transmit+0xee>
 8003c16:	8b7b      	ldrh	r3, [r7, #26]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d145      	bne.n	8003ca8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2c:	1c9a      	adds	r2, r3, #2
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c40:	e032      	b.n	8003ca8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d112      	bne.n	8003c76 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	881a      	ldrh	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	1c9a      	adds	r2, r3, #2
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c74:	e018      	b.n	8003ca8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c76:	f7fe fa21 	bl	80020bc <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d803      	bhi.n	8003c8e <HAL_SPI_Transmit+0x160>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8c:	d102      	bne.n	8003c94 <HAL_SPI_Transmit+0x166>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d109      	bne.n	8003ca8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e082      	b.n	8003dae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1c7      	bne.n	8003c42 <HAL_SPI_Transmit+0x114>
 8003cb2:	e053      	b.n	8003d5c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <HAL_SPI_Transmit+0x194>
 8003cbc:	8b7b      	ldrh	r3, [r7, #26]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d147      	bne.n	8003d52 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	7812      	ldrb	r2, [r2, #0]
 8003cce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ce8:	e033      	b.n	8003d52 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d113      	bne.n	8003d20 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	330c      	adds	r3, #12
 8003d02:	7812      	ldrb	r2, [r2, #0]
 8003d04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d1e:	e018      	b.n	8003d52 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d20:	f7fe f9cc 	bl	80020bc <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d803      	bhi.n	8003d38 <HAL_SPI_Transmit+0x20a>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d36:	d102      	bne.n	8003d3e <HAL_SPI_Transmit+0x210>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e02d      	b.n	8003dae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1c6      	bne.n	8003cea <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	6839      	ldr	r1, [r7, #0]
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 f8b1 	bl	8003ec8 <SPI_EndRxTxTransaction>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003dac:	2300      	movs	r3, #0
  }
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3720      	adds	r7, #32
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dc8:	f7fe f978 	bl	80020bc <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dd8:	f7fe f970 	bl	80020bc <HAL_GetTick>
 8003ddc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dde:	4b39      	ldr	r3, [pc, #228]	@ (8003ec4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	015b      	lsls	r3, r3, #5
 8003de4:	0d1b      	lsrs	r3, r3, #20
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	fb02 f303 	mul.w	r3, r2, r3
 8003dec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dee:	e055      	b.n	8003e9c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df6:	d051      	beq.n	8003e9c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003df8:	f7fe f960 	bl	80020bc <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	69fa      	ldr	r2, [r7, #28]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d902      	bls.n	8003e0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d13d      	bne.n	8003e8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e26:	d111      	bne.n	8003e4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e30:	d004      	beq.n	8003e3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e3a:	d107      	bne.n	8003e4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e54:	d10f      	bne.n	8003e76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e018      	b.n	8003ebc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d102      	bne.n	8003e96 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61fb      	str	r3, [r7, #28]
 8003e94:	e002      	b.n	8003e9c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	bf0c      	ite	eq
 8003eac:	2301      	moveq	r3, #1
 8003eae:	2300      	movne	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d19a      	bne.n	8003df0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3720      	adds	r7, #32
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	20000008 	.word	0x20000008

08003ec8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2201      	movs	r2, #1
 8003edc:	2102      	movs	r1, #2
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f7ff ff6a 	bl	8003db8 <SPI_WaitFlagStateUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d007      	beq.n	8003efa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eee:	f043 0220 	orr.w	r2, r3, #32
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e032      	b.n	8003f60 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003efa:	4b1b      	ldr	r3, [pc, #108]	@ (8003f68 <SPI_EndRxTxTransaction+0xa0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1b      	ldr	r2, [pc, #108]	@ (8003f6c <SPI_EndRxTxTransaction+0xa4>)
 8003f00:	fba2 2303 	umull	r2, r3, r2, r3
 8003f04:	0d5b      	lsrs	r3, r3, #21
 8003f06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f18:	d112      	bne.n	8003f40 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2200      	movs	r2, #0
 8003f22:	2180      	movs	r1, #128	@ 0x80
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7ff ff47 	bl	8003db8 <SPI_WaitFlagStateUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d016      	beq.n	8003f5e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f34:	f043 0220 	orr.w	r2, r3, #32
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e00f      	b.n	8003f60 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f56:	2b80      	cmp	r3, #128	@ 0x80
 8003f58:	d0f2      	beq.n	8003f40 <SPI_EndRxTxTransaction+0x78>
 8003f5a:	e000      	b.n	8003f5e <SPI_EndRxTxTransaction+0x96>
        break;
 8003f5c:	bf00      	nop
  }

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000008 	.word	0x20000008
 8003f6c:	165e9f81 	.word	0x165e9f81

08003f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e042      	b.n	8004008 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fd fdf2 	bl	8001b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2224      	movs	r2, #36	@ 0x24
 8003fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 fa09 	bl	80043cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08a      	sub	sp, #40	@ 0x28
 8004014:	af02      	add	r7, sp, #8
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b20      	cmp	r3, #32
 800402e:	d175      	bne.n	800411c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <HAL_UART_Transmit+0x2c>
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e06e      	b.n	800411e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2221      	movs	r2, #33	@ 0x21
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800404e:	f7fe f835 	bl	80020bc <HAL_GetTick>
 8004052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	88fa      	ldrh	r2, [r7, #6]
 8004058:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	88fa      	ldrh	r2, [r7, #6]
 800405e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004068:	d108      	bne.n	800407c <HAL_UART_Transmit+0x6c>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d104      	bne.n	800407c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004072:	2300      	movs	r3, #0
 8004074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	e003      	b.n	8004084 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004080:	2300      	movs	r3, #0
 8004082:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004084:	e02e      	b.n	80040e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2200      	movs	r2, #0
 800408e:	2180      	movs	r1, #128	@ 0x80
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f8df 	bl	8004254 <UART_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e03a      	b.n	800411e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10b      	bne.n	80040c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	3302      	adds	r3, #2
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	e007      	b.n	80040d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	781a      	ldrb	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	3301      	adds	r3, #1
 80040d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1cb      	bne.n	8004086 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2200      	movs	r2, #0
 80040f6:	2140      	movs	r1, #64	@ 0x40
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f8ab 	bl	8004254 <UART_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e006      	b.n	800411e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	e000      	b.n	800411e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800411c:	2302      	movs	r3, #2
  }
}
 800411e:	4618      	mov	r0, r3
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b08a      	sub	sp, #40	@ 0x28
 800412a:	af02      	add	r7, sp, #8
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	603b      	str	r3, [r7, #0]
 8004132:	4613      	mov	r3, r2
 8004134:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b20      	cmp	r3, #32
 8004144:	f040 8081 	bne.w	800424a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_UART_Receive+0x2e>
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e079      	b.n	800424c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2222      	movs	r2, #34	@ 0x22
 8004162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800416c:	f7fd ffa6 	bl	80020bc <HAL_GetTick>
 8004170:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	88fa      	ldrh	r2, [r7, #6]
 8004176:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	88fa      	ldrh	r2, [r7, #6]
 800417c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004186:	d108      	bne.n	800419a <HAL_UART_Receive+0x74>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d104      	bne.n	800419a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	61bb      	str	r3, [r7, #24]
 8004198:	e003      	b.n	80041a2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80041a2:	e047      	b.n	8004234 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2200      	movs	r2, #0
 80041ac:	2120      	movs	r1, #32
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f850 	bl	8004254 <UART_WaitOnFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d005      	beq.n	80041c6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e042      	b.n	800424c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10c      	bne.n	80041e6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d8:	b29a      	uxth	r2, r3
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	3302      	adds	r3, #2
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	e01f      	b.n	8004226 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ee:	d007      	beq.n	8004200 <HAL_UART_Receive+0xda>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <HAL_UART_Receive+0xe8>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d106      	bne.n	800420e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	b2da      	uxtb	r2, r3
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	e008      	b.n	8004220 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800421a:	b2da      	uxtb	r2, r3
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	3301      	adds	r3, #1
 8004224:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1b2      	bne.n	80041a4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	e000      	b.n	800424c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800424a:	2302      	movs	r3, #2
  }
}
 800424c:	4618      	mov	r0, r3
 800424e:	3720      	adds	r7, #32
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	4613      	mov	r3, r2
 8004262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004264:	e03b      	b.n	80042de <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d037      	beq.n	80042de <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426e:	f7fd ff25 	bl	80020bc <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	6a3a      	ldr	r2, [r7, #32]
 800427a:	429a      	cmp	r2, r3
 800427c:	d302      	bcc.n	8004284 <UART_WaitOnFlagUntilTimeout+0x30>
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e03a      	b.n	80042fe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b00      	cmp	r3, #0
 8004294:	d023      	beq.n	80042de <UART_WaitOnFlagUntilTimeout+0x8a>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b80      	cmp	r3, #128	@ 0x80
 800429a:	d020      	beq.n	80042de <UART_WaitOnFlagUntilTimeout+0x8a>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b40      	cmp	r3, #64	@ 0x40
 80042a0:	d01d      	beq.n	80042de <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d116      	bne.n	80042de <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f81d 	bl	8004306 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2208      	movs	r2, #8
 80042d0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e00f      	b.n	80042fe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4013      	ands	r3, r2
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	bf0c      	ite	eq
 80042ee:	2301      	moveq	r3, #1
 80042f0:	2300      	movne	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d0b4      	beq.n	8004266 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004306:	b480      	push	{r7}
 8004308:	b095      	sub	sp, #84	@ 0x54
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	330c      	adds	r3, #12
 8004314:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800431e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004320:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004324:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800432e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004330:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004334:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800433c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e5      	bne.n	800430e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3314      	adds	r3, #20
 8004348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	e853 3f00 	ldrex	r3, [r3]
 8004350:	61fb      	str	r3, [r7, #28]
   return(result);
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	64bb      	str	r3, [r7, #72]	@ 0x48
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3314      	adds	r3, #20
 8004360:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004362:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004364:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004368:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e5      	bne.n	8004342 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437a:	2b01      	cmp	r3, #1
 800437c:	d119      	bne.n	80043b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	330c      	adds	r3, #12
 8004384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	60bb      	str	r3, [r7, #8]
   return(result);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f023 0310 	bic.w	r3, r3, #16
 8004394:	647b      	str	r3, [r7, #68]	@ 0x44
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800439e:	61ba      	str	r2, [r7, #24]
 80043a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	6979      	ldr	r1, [r7, #20]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	613b      	str	r3, [r7, #16]
   return(result);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e5      	bne.n	800437e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80043c0:	bf00      	nop
 80043c2:	3754      	adds	r7, #84	@ 0x54
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d0:	b0c0      	sub	sp, #256	@ 0x100
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e8:	68d9      	ldr	r1, [r3, #12]
 80043ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	ea40 0301 	orr.w	r3, r0, r1
 80043f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	431a      	orrs	r2, r3
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	431a      	orrs	r2, r3
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004424:	f021 010c 	bic.w	r1, r1, #12
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004432:	430b      	orrs	r3, r1
 8004434:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004446:	6999      	ldr	r1, [r3, #24]
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	ea40 0301 	orr.w	r3, r0, r1
 8004452:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4b8f      	ldr	r3, [pc, #572]	@ (8004698 <UART_SetConfig+0x2cc>)
 800445c:	429a      	cmp	r2, r3
 800445e:	d005      	beq.n	800446c <UART_SetConfig+0xa0>
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4b8d      	ldr	r3, [pc, #564]	@ (800469c <UART_SetConfig+0x2d0>)
 8004468:	429a      	cmp	r2, r3
 800446a:	d104      	bne.n	8004476 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800446c:	f7fe fd82 	bl	8002f74 <HAL_RCC_GetPCLK2Freq>
 8004470:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004474:	e003      	b.n	800447e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004476:	f7fe fd69 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 800447a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004488:	f040 810c 	bne.w	80046a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800448c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004490:	2200      	movs	r2, #0
 8004492:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004496:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800449a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800449e:	4622      	mov	r2, r4
 80044a0:	462b      	mov	r3, r5
 80044a2:	1891      	adds	r1, r2, r2
 80044a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044a6:	415b      	adcs	r3, r3
 80044a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044ae:	4621      	mov	r1, r4
 80044b0:	eb12 0801 	adds.w	r8, r2, r1
 80044b4:	4629      	mov	r1, r5
 80044b6:	eb43 0901 	adc.w	r9, r3, r1
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ce:	4690      	mov	r8, r2
 80044d0:	4699      	mov	r9, r3
 80044d2:	4623      	mov	r3, r4
 80044d4:	eb18 0303 	adds.w	r3, r8, r3
 80044d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044dc:	462b      	mov	r3, r5
 80044de:	eb49 0303 	adc.w	r3, r9, r3
 80044e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044fa:	460b      	mov	r3, r1
 80044fc:	18db      	adds	r3, r3, r3
 80044fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004500:	4613      	mov	r3, r2
 8004502:	eb42 0303 	adc.w	r3, r2, r3
 8004506:	657b      	str	r3, [r7, #84]	@ 0x54
 8004508:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800450c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004510:	f7fb fece 	bl	80002b0 <__aeabi_uldivmod>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4b61      	ldr	r3, [pc, #388]	@ (80046a0 <UART_SetConfig+0x2d4>)
 800451a:	fba3 2302 	umull	r2, r3, r3, r2
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	011c      	lsls	r4, r3, #4
 8004522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004526:	2200      	movs	r2, #0
 8004528:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800452c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004530:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004534:	4642      	mov	r2, r8
 8004536:	464b      	mov	r3, r9
 8004538:	1891      	adds	r1, r2, r2
 800453a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800453c:	415b      	adcs	r3, r3
 800453e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004540:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004544:	4641      	mov	r1, r8
 8004546:	eb12 0a01 	adds.w	sl, r2, r1
 800454a:	4649      	mov	r1, r9
 800454c:	eb43 0b01 	adc.w	fp, r3, r1
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800455c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004564:	4692      	mov	sl, r2
 8004566:	469b      	mov	fp, r3
 8004568:	4643      	mov	r3, r8
 800456a:	eb1a 0303 	adds.w	r3, sl, r3
 800456e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004572:	464b      	mov	r3, r9
 8004574:	eb4b 0303 	adc.w	r3, fp, r3
 8004578:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004588:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800458c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004590:	460b      	mov	r3, r1
 8004592:	18db      	adds	r3, r3, r3
 8004594:	643b      	str	r3, [r7, #64]	@ 0x40
 8004596:	4613      	mov	r3, r2
 8004598:	eb42 0303 	adc.w	r3, r2, r3
 800459c:	647b      	str	r3, [r7, #68]	@ 0x44
 800459e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80045a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80045a6:	f7fb fe83 	bl	80002b0 <__aeabi_uldivmod>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4611      	mov	r1, r2
 80045b0:	4b3b      	ldr	r3, [pc, #236]	@ (80046a0 <UART_SetConfig+0x2d4>)
 80045b2:	fba3 2301 	umull	r2, r3, r3, r1
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	2264      	movs	r2, #100	@ 0x64
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
 80045be:	1acb      	subs	r3, r1, r3
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045c6:	4b36      	ldr	r3, [pc, #216]	@ (80046a0 <UART_SetConfig+0x2d4>)
 80045c8:	fba3 2302 	umull	r2, r3, r3, r2
 80045cc:	095b      	lsrs	r3, r3, #5
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045d4:	441c      	add	r4, r3
 80045d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045e8:	4642      	mov	r2, r8
 80045ea:	464b      	mov	r3, r9
 80045ec:	1891      	adds	r1, r2, r2
 80045ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045f0:	415b      	adcs	r3, r3
 80045f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80045f8:	4641      	mov	r1, r8
 80045fa:	1851      	adds	r1, r2, r1
 80045fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80045fe:	4649      	mov	r1, r9
 8004600:	414b      	adcs	r3, r1
 8004602:	637b      	str	r3, [r7, #52]	@ 0x34
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004610:	4659      	mov	r1, fp
 8004612:	00cb      	lsls	r3, r1, #3
 8004614:	4651      	mov	r1, sl
 8004616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800461a:	4651      	mov	r1, sl
 800461c:	00ca      	lsls	r2, r1, #3
 800461e:	4610      	mov	r0, r2
 8004620:	4619      	mov	r1, r3
 8004622:	4603      	mov	r3, r0
 8004624:	4642      	mov	r2, r8
 8004626:	189b      	adds	r3, r3, r2
 8004628:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800462c:	464b      	mov	r3, r9
 800462e:	460a      	mov	r2, r1
 8004630:	eb42 0303 	adc.w	r3, r2, r3
 8004634:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004644:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004648:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800464c:	460b      	mov	r3, r1
 800464e:	18db      	adds	r3, r3, r3
 8004650:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004652:	4613      	mov	r3, r2
 8004654:	eb42 0303 	adc.w	r3, r2, r3
 8004658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800465a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800465e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004662:	f7fb fe25 	bl	80002b0 <__aeabi_uldivmod>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4b0d      	ldr	r3, [pc, #52]	@ (80046a0 <UART_SetConfig+0x2d4>)
 800466c:	fba3 1302 	umull	r1, r3, r3, r2
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	2164      	movs	r1, #100	@ 0x64
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	3332      	adds	r3, #50	@ 0x32
 800467e:	4a08      	ldr	r2, [pc, #32]	@ (80046a0 <UART_SetConfig+0x2d4>)
 8004680:	fba2 2303 	umull	r2, r3, r2, r3
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	f003 0207 	and.w	r2, r3, #7
 800468a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4422      	add	r2, r4
 8004692:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004694:	e106      	b.n	80048a4 <UART_SetConfig+0x4d8>
 8004696:	bf00      	nop
 8004698:	40011000 	.word	0x40011000
 800469c:	40011400 	.word	0x40011400
 80046a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046a8:	2200      	movs	r2, #0
 80046aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046b6:	4642      	mov	r2, r8
 80046b8:	464b      	mov	r3, r9
 80046ba:	1891      	adds	r1, r2, r2
 80046bc:	6239      	str	r1, [r7, #32]
 80046be:	415b      	adcs	r3, r3
 80046c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80046c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046c6:	4641      	mov	r1, r8
 80046c8:	1854      	adds	r4, r2, r1
 80046ca:	4649      	mov	r1, r9
 80046cc:	eb43 0501 	adc.w	r5, r3, r1
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	00eb      	lsls	r3, r5, #3
 80046da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046de:	00e2      	lsls	r2, r4, #3
 80046e0:	4614      	mov	r4, r2
 80046e2:	461d      	mov	r5, r3
 80046e4:	4643      	mov	r3, r8
 80046e6:	18e3      	adds	r3, r4, r3
 80046e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046ec:	464b      	mov	r3, r9
 80046ee:	eb45 0303 	adc.w	r3, r5, r3
 80046f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004702:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004712:	4629      	mov	r1, r5
 8004714:	008b      	lsls	r3, r1, #2
 8004716:	4621      	mov	r1, r4
 8004718:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800471c:	4621      	mov	r1, r4
 800471e:	008a      	lsls	r2, r1, #2
 8004720:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004724:	f7fb fdc4 	bl	80002b0 <__aeabi_uldivmod>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4b60      	ldr	r3, [pc, #384]	@ (80048b0 <UART_SetConfig+0x4e4>)
 800472e:	fba3 2302 	umull	r2, r3, r3, r2
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	011c      	lsls	r4, r3, #4
 8004736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800473a:	2200      	movs	r2, #0
 800473c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004740:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004744:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004748:	4642      	mov	r2, r8
 800474a:	464b      	mov	r3, r9
 800474c:	1891      	adds	r1, r2, r2
 800474e:	61b9      	str	r1, [r7, #24]
 8004750:	415b      	adcs	r3, r3
 8004752:	61fb      	str	r3, [r7, #28]
 8004754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004758:	4641      	mov	r1, r8
 800475a:	1851      	adds	r1, r2, r1
 800475c:	6139      	str	r1, [r7, #16]
 800475e:	4649      	mov	r1, r9
 8004760:	414b      	adcs	r3, r1
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004770:	4659      	mov	r1, fp
 8004772:	00cb      	lsls	r3, r1, #3
 8004774:	4651      	mov	r1, sl
 8004776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800477a:	4651      	mov	r1, sl
 800477c:	00ca      	lsls	r2, r1, #3
 800477e:	4610      	mov	r0, r2
 8004780:	4619      	mov	r1, r3
 8004782:	4603      	mov	r3, r0
 8004784:	4642      	mov	r2, r8
 8004786:	189b      	adds	r3, r3, r2
 8004788:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800478c:	464b      	mov	r3, r9
 800478e:	460a      	mov	r2, r1
 8004790:	eb42 0303 	adc.w	r3, r2, r3
 8004794:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047b0:	4649      	mov	r1, r9
 80047b2:	008b      	lsls	r3, r1, #2
 80047b4:	4641      	mov	r1, r8
 80047b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ba:	4641      	mov	r1, r8
 80047bc:	008a      	lsls	r2, r1, #2
 80047be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047c2:	f7fb fd75 	bl	80002b0 <__aeabi_uldivmod>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4611      	mov	r1, r2
 80047cc:	4b38      	ldr	r3, [pc, #224]	@ (80048b0 <UART_SetConfig+0x4e4>)
 80047ce:	fba3 2301 	umull	r2, r3, r3, r1
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	2264      	movs	r2, #100	@ 0x64
 80047d6:	fb02 f303 	mul.w	r3, r2, r3
 80047da:	1acb      	subs	r3, r1, r3
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	3332      	adds	r3, #50	@ 0x32
 80047e0:	4a33      	ldr	r2, [pc, #204]	@ (80048b0 <UART_SetConfig+0x4e4>)
 80047e2:	fba2 2303 	umull	r2, r3, r2, r3
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047ec:	441c      	add	r4, r3
 80047ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047f2:	2200      	movs	r2, #0
 80047f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80047f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80047f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80047fc:	4642      	mov	r2, r8
 80047fe:	464b      	mov	r3, r9
 8004800:	1891      	adds	r1, r2, r2
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	415b      	adcs	r3, r3
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800480c:	4641      	mov	r1, r8
 800480e:	1851      	adds	r1, r2, r1
 8004810:	6039      	str	r1, [r7, #0]
 8004812:	4649      	mov	r1, r9
 8004814:	414b      	adcs	r3, r1
 8004816:	607b      	str	r3, [r7, #4]
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004824:	4659      	mov	r1, fp
 8004826:	00cb      	lsls	r3, r1, #3
 8004828:	4651      	mov	r1, sl
 800482a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800482e:	4651      	mov	r1, sl
 8004830:	00ca      	lsls	r2, r1, #3
 8004832:	4610      	mov	r0, r2
 8004834:	4619      	mov	r1, r3
 8004836:	4603      	mov	r3, r0
 8004838:	4642      	mov	r2, r8
 800483a:	189b      	adds	r3, r3, r2
 800483c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800483e:	464b      	mov	r3, r9
 8004840:	460a      	mov	r2, r1
 8004842:	eb42 0303 	adc.w	r3, r2, r3
 8004846:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	663b      	str	r3, [r7, #96]	@ 0x60
 8004852:	667a      	str	r2, [r7, #100]	@ 0x64
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004860:	4649      	mov	r1, r9
 8004862:	008b      	lsls	r3, r1, #2
 8004864:	4641      	mov	r1, r8
 8004866:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800486a:	4641      	mov	r1, r8
 800486c:	008a      	lsls	r2, r1, #2
 800486e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004872:	f7fb fd1d 	bl	80002b0 <__aeabi_uldivmod>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4b0d      	ldr	r3, [pc, #52]	@ (80048b0 <UART_SetConfig+0x4e4>)
 800487c:	fba3 1302 	umull	r1, r3, r3, r2
 8004880:	095b      	lsrs	r3, r3, #5
 8004882:	2164      	movs	r1, #100	@ 0x64
 8004884:	fb01 f303 	mul.w	r3, r1, r3
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	3332      	adds	r3, #50	@ 0x32
 800488e:	4a08      	ldr	r2, [pc, #32]	@ (80048b0 <UART_SetConfig+0x4e4>)
 8004890:	fba2 2303 	umull	r2, r3, r2, r3
 8004894:	095b      	lsrs	r3, r3, #5
 8004896:	f003 020f 	and.w	r2, r3, #15
 800489a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4422      	add	r2, r4
 80048a2:	609a      	str	r2, [r3, #8]
}
 80048a4:	bf00      	nop
 80048a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048aa:	46bd      	mov	sp, r7
 80048ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048b0:	51eb851f 	.word	0x51eb851f

080048b4 <std>:
 80048b4:	2300      	movs	r3, #0
 80048b6:	b510      	push	{r4, lr}
 80048b8:	4604      	mov	r4, r0
 80048ba:	e9c0 3300 	strd	r3, r3, [r0]
 80048be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048c2:	6083      	str	r3, [r0, #8]
 80048c4:	8181      	strh	r1, [r0, #12]
 80048c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80048c8:	81c2      	strh	r2, [r0, #14]
 80048ca:	6183      	str	r3, [r0, #24]
 80048cc:	4619      	mov	r1, r3
 80048ce:	2208      	movs	r2, #8
 80048d0:	305c      	adds	r0, #92	@ 0x5c
 80048d2:	f000 fa4f 	bl	8004d74 <memset>
 80048d6:	4b0d      	ldr	r3, [pc, #52]	@ (800490c <std+0x58>)
 80048d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80048da:	4b0d      	ldr	r3, [pc, #52]	@ (8004910 <std+0x5c>)
 80048dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048de:	4b0d      	ldr	r3, [pc, #52]	@ (8004914 <std+0x60>)
 80048e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004918 <std+0x64>)
 80048e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80048e6:	4b0d      	ldr	r3, [pc, #52]	@ (800491c <std+0x68>)
 80048e8:	6224      	str	r4, [r4, #32]
 80048ea:	429c      	cmp	r4, r3
 80048ec:	d006      	beq.n	80048fc <std+0x48>
 80048ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048f2:	4294      	cmp	r4, r2
 80048f4:	d002      	beq.n	80048fc <std+0x48>
 80048f6:	33d0      	adds	r3, #208	@ 0xd0
 80048f8:	429c      	cmp	r4, r3
 80048fa:	d105      	bne.n	8004908 <std+0x54>
 80048fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004904:	f000 bac2 	b.w	8004e8c <__retarget_lock_init_recursive>
 8004908:	bd10      	pop	{r4, pc}
 800490a:	bf00      	nop
 800490c:	08004b85 	.word	0x08004b85
 8004910:	08004ba7 	.word	0x08004ba7
 8004914:	08004bdf 	.word	0x08004bdf
 8004918:	08004c03 	.word	0x08004c03
 800491c:	20000380 	.word	0x20000380

08004920 <stdio_exit_handler>:
 8004920:	4a02      	ldr	r2, [pc, #8]	@ (800492c <stdio_exit_handler+0xc>)
 8004922:	4903      	ldr	r1, [pc, #12]	@ (8004930 <stdio_exit_handler+0x10>)
 8004924:	4803      	ldr	r0, [pc, #12]	@ (8004934 <stdio_exit_handler+0x14>)
 8004926:	f000 b869 	b.w	80049fc <_fwalk_sglue>
 800492a:	bf00      	nop
 800492c:	20000014 	.word	0x20000014
 8004930:	080059e9 	.word	0x080059e9
 8004934:	20000024 	.word	0x20000024

08004938 <cleanup_stdio>:
 8004938:	6841      	ldr	r1, [r0, #4]
 800493a:	4b0c      	ldr	r3, [pc, #48]	@ (800496c <cleanup_stdio+0x34>)
 800493c:	4299      	cmp	r1, r3
 800493e:	b510      	push	{r4, lr}
 8004940:	4604      	mov	r4, r0
 8004942:	d001      	beq.n	8004948 <cleanup_stdio+0x10>
 8004944:	f001 f850 	bl	80059e8 <_fflush_r>
 8004948:	68a1      	ldr	r1, [r4, #8]
 800494a:	4b09      	ldr	r3, [pc, #36]	@ (8004970 <cleanup_stdio+0x38>)
 800494c:	4299      	cmp	r1, r3
 800494e:	d002      	beq.n	8004956 <cleanup_stdio+0x1e>
 8004950:	4620      	mov	r0, r4
 8004952:	f001 f849 	bl	80059e8 <_fflush_r>
 8004956:	68e1      	ldr	r1, [r4, #12]
 8004958:	4b06      	ldr	r3, [pc, #24]	@ (8004974 <cleanup_stdio+0x3c>)
 800495a:	4299      	cmp	r1, r3
 800495c:	d004      	beq.n	8004968 <cleanup_stdio+0x30>
 800495e:	4620      	mov	r0, r4
 8004960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004964:	f001 b840 	b.w	80059e8 <_fflush_r>
 8004968:	bd10      	pop	{r4, pc}
 800496a:	bf00      	nop
 800496c:	20000380 	.word	0x20000380
 8004970:	200003e8 	.word	0x200003e8
 8004974:	20000450 	.word	0x20000450

08004978 <global_stdio_init.part.0>:
 8004978:	b510      	push	{r4, lr}
 800497a:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <global_stdio_init.part.0+0x30>)
 800497c:	4c0b      	ldr	r4, [pc, #44]	@ (80049ac <global_stdio_init.part.0+0x34>)
 800497e:	4a0c      	ldr	r2, [pc, #48]	@ (80049b0 <global_stdio_init.part.0+0x38>)
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	4620      	mov	r0, r4
 8004984:	2200      	movs	r2, #0
 8004986:	2104      	movs	r1, #4
 8004988:	f7ff ff94 	bl	80048b4 <std>
 800498c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004990:	2201      	movs	r2, #1
 8004992:	2109      	movs	r1, #9
 8004994:	f7ff ff8e 	bl	80048b4 <std>
 8004998:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800499c:	2202      	movs	r2, #2
 800499e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049a2:	2112      	movs	r1, #18
 80049a4:	f7ff bf86 	b.w	80048b4 <std>
 80049a8:	200004b8 	.word	0x200004b8
 80049ac:	20000380 	.word	0x20000380
 80049b0:	08004921 	.word	0x08004921

080049b4 <__sfp_lock_acquire>:
 80049b4:	4801      	ldr	r0, [pc, #4]	@ (80049bc <__sfp_lock_acquire+0x8>)
 80049b6:	f000 ba6a 	b.w	8004e8e <__retarget_lock_acquire_recursive>
 80049ba:	bf00      	nop
 80049bc:	200004c1 	.word	0x200004c1

080049c0 <__sfp_lock_release>:
 80049c0:	4801      	ldr	r0, [pc, #4]	@ (80049c8 <__sfp_lock_release+0x8>)
 80049c2:	f000 ba65 	b.w	8004e90 <__retarget_lock_release_recursive>
 80049c6:	bf00      	nop
 80049c8:	200004c1 	.word	0x200004c1

080049cc <__sinit>:
 80049cc:	b510      	push	{r4, lr}
 80049ce:	4604      	mov	r4, r0
 80049d0:	f7ff fff0 	bl	80049b4 <__sfp_lock_acquire>
 80049d4:	6a23      	ldr	r3, [r4, #32]
 80049d6:	b11b      	cbz	r3, 80049e0 <__sinit+0x14>
 80049d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049dc:	f7ff bff0 	b.w	80049c0 <__sfp_lock_release>
 80049e0:	4b04      	ldr	r3, [pc, #16]	@ (80049f4 <__sinit+0x28>)
 80049e2:	6223      	str	r3, [r4, #32]
 80049e4:	4b04      	ldr	r3, [pc, #16]	@ (80049f8 <__sinit+0x2c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1f5      	bne.n	80049d8 <__sinit+0xc>
 80049ec:	f7ff ffc4 	bl	8004978 <global_stdio_init.part.0>
 80049f0:	e7f2      	b.n	80049d8 <__sinit+0xc>
 80049f2:	bf00      	nop
 80049f4:	08004939 	.word	0x08004939
 80049f8:	200004b8 	.word	0x200004b8

080049fc <_fwalk_sglue>:
 80049fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a00:	4607      	mov	r7, r0
 8004a02:	4688      	mov	r8, r1
 8004a04:	4614      	mov	r4, r2
 8004a06:	2600      	movs	r6, #0
 8004a08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a0c:	f1b9 0901 	subs.w	r9, r9, #1
 8004a10:	d505      	bpl.n	8004a1e <_fwalk_sglue+0x22>
 8004a12:	6824      	ldr	r4, [r4, #0]
 8004a14:	2c00      	cmp	r4, #0
 8004a16:	d1f7      	bne.n	8004a08 <_fwalk_sglue+0xc>
 8004a18:	4630      	mov	r0, r6
 8004a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a1e:	89ab      	ldrh	r3, [r5, #12]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d907      	bls.n	8004a34 <_fwalk_sglue+0x38>
 8004a24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	d003      	beq.n	8004a34 <_fwalk_sglue+0x38>
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	4638      	mov	r0, r7
 8004a30:	47c0      	blx	r8
 8004a32:	4306      	orrs	r6, r0
 8004a34:	3568      	adds	r5, #104	@ 0x68
 8004a36:	e7e9      	b.n	8004a0c <_fwalk_sglue+0x10>

08004a38 <iprintf>:
 8004a38:	b40f      	push	{r0, r1, r2, r3}
 8004a3a:	b507      	push	{r0, r1, r2, lr}
 8004a3c:	4906      	ldr	r1, [pc, #24]	@ (8004a58 <iprintf+0x20>)
 8004a3e:	ab04      	add	r3, sp, #16
 8004a40:	6808      	ldr	r0, [r1, #0]
 8004a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a46:	6881      	ldr	r1, [r0, #8]
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	f000 fca5 	bl	8005398 <_vfiprintf_r>
 8004a4e:	b003      	add	sp, #12
 8004a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a54:	b004      	add	sp, #16
 8004a56:	4770      	bx	lr
 8004a58:	20000020 	.word	0x20000020

08004a5c <_puts_r>:
 8004a5c:	6a03      	ldr	r3, [r0, #32]
 8004a5e:	b570      	push	{r4, r5, r6, lr}
 8004a60:	6884      	ldr	r4, [r0, #8]
 8004a62:	4605      	mov	r5, r0
 8004a64:	460e      	mov	r6, r1
 8004a66:	b90b      	cbnz	r3, 8004a6c <_puts_r+0x10>
 8004a68:	f7ff ffb0 	bl	80049cc <__sinit>
 8004a6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a6e:	07db      	lsls	r3, r3, #31
 8004a70:	d405      	bmi.n	8004a7e <_puts_r+0x22>
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	0598      	lsls	r0, r3, #22
 8004a76:	d402      	bmi.n	8004a7e <_puts_r+0x22>
 8004a78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a7a:	f000 fa08 	bl	8004e8e <__retarget_lock_acquire_recursive>
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	0719      	lsls	r1, r3, #28
 8004a82:	d502      	bpl.n	8004a8a <_puts_r+0x2e>
 8004a84:	6923      	ldr	r3, [r4, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d135      	bne.n	8004af6 <_puts_r+0x9a>
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f000 f91b 	bl	8004cc8 <__swsetup_r>
 8004a92:	b380      	cbz	r0, 8004af6 <_puts_r+0x9a>
 8004a94:	f04f 35ff 	mov.w	r5, #4294967295
 8004a98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a9a:	07da      	lsls	r2, r3, #31
 8004a9c:	d405      	bmi.n	8004aaa <_puts_r+0x4e>
 8004a9e:	89a3      	ldrh	r3, [r4, #12]
 8004aa0:	059b      	lsls	r3, r3, #22
 8004aa2:	d402      	bmi.n	8004aaa <_puts_r+0x4e>
 8004aa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004aa6:	f000 f9f3 	bl	8004e90 <__retarget_lock_release_recursive>
 8004aaa:	4628      	mov	r0, r5
 8004aac:	bd70      	pop	{r4, r5, r6, pc}
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	da04      	bge.n	8004abc <_puts_r+0x60>
 8004ab2:	69a2      	ldr	r2, [r4, #24]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	dc17      	bgt.n	8004ae8 <_puts_r+0x8c>
 8004ab8:	290a      	cmp	r1, #10
 8004aba:	d015      	beq.n	8004ae8 <_puts_r+0x8c>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	6022      	str	r2, [r4, #0]
 8004ac2:	7019      	strb	r1, [r3, #0]
 8004ac4:	68a3      	ldr	r3, [r4, #8]
 8004ac6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004aca:	3b01      	subs	r3, #1
 8004acc:	60a3      	str	r3, [r4, #8]
 8004ace:	2900      	cmp	r1, #0
 8004ad0:	d1ed      	bne.n	8004aae <_puts_r+0x52>
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	da11      	bge.n	8004afa <_puts_r+0x9e>
 8004ad6:	4622      	mov	r2, r4
 8004ad8:	210a      	movs	r1, #10
 8004ada:	4628      	mov	r0, r5
 8004adc:	f000 f8b6 	bl	8004c4c <__swbuf_r>
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d0d7      	beq.n	8004a94 <_puts_r+0x38>
 8004ae4:	250a      	movs	r5, #10
 8004ae6:	e7d7      	b.n	8004a98 <_puts_r+0x3c>
 8004ae8:	4622      	mov	r2, r4
 8004aea:	4628      	mov	r0, r5
 8004aec:	f000 f8ae 	bl	8004c4c <__swbuf_r>
 8004af0:	3001      	adds	r0, #1
 8004af2:	d1e7      	bne.n	8004ac4 <_puts_r+0x68>
 8004af4:	e7ce      	b.n	8004a94 <_puts_r+0x38>
 8004af6:	3e01      	subs	r6, #1
 8004af8:	e7e4      	b.n	8004ac4 <_puts_r+0x68>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	6022      	str	r2, [r4, #0]
 8004b00:	220a      	movs	r2, #10
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	e7ee      	b.n	8004ae4 <_puts_r+0x88>
	...

08004b08 <puts>:
 8004b08:	4b02      	ldr	r3, [pc, #8]	@ (8004b14 <puts+0xc>)
 8004b0a:	4601      	mov	r1, r0
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	f7ff bfa5 	b.w	8004a5c <_puts_r>
 8004b12:	bf00      	nop
 8004b14:	20000020 	.word	0x20000020

08004b18 <sniprintf>:
 8004b18:	b40c      	push	{r2, r3}
 8004b1a:	b530      	push	{r4, r5, lr}
 8004b1c:	4b18      	ldr	r3, [pc, #96]	@ (8004b80 <sniprintf+0x68>)
 8004b1e:	1e0c      	subs	r4, r1, #0
 8004b20:	681d      	ldr	r5, [r3, #0]
 8004b22:	b09d      	sub	sp, #116	@ 0x74
 8004b24:	da08      	bge.n	8004b38 <sniprintf+0x20>
 8004b26:	238b      	movs	r3, #139	@ 0x8b
 8004b28:	602b      	str	r3, [r5, #0]
 8004b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2e:	b01d      	add	sp, #116	@ 0x74
 8004b30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b34:	b002      	add	sp, #8
 8004b36:	4770      	bx	lr
 8004b38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004b3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004b46:	bf14      	ite	ne
 8004b48:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004b4c:	4623      	moveq	r3, r4
 8004b4e:	9304      	str	r3, [sp, #16]
 8004b50:	9307      	str	r3, [sp, #28]
 8004b52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b56:	9002      	str	r0, [sp, #8]
 8004b58:	9006      	str	r0, [sp, #24]
 8004b5a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b5e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004b60:	ab21      	add	r3, sp, #132	@ 0x84
 8004b62:	a902      	add	r1, sp, #8
 8004b64:	4628      	mov	r0, r5
 8004b66:	9301      	str	r3, [sp, #4]
 8004b68:	f000 faf0 	bl	800514c <_svfiprintf_r>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	bfbc      	itt	lt
 8004b70:	238b      	movlt	r3, #139	@ 0x8b
 8004b72:	602b      	strlt	r3, [r5, #0]
 8004b74:	2c00      	cmp	r4, #0
 8004b76:	d0da      	beq.n	8004b2e <sniprintf+0x16>
 8004b78:	9b02      	ldr	r3, [sp, #8]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	e7d6      	b.n	8004b2e <sniprintf+0x16>
 8004b80:	20000020 	.word	0x20000020

08004b84 <__sread>:
 8004b84:	b510      	push	{r4, lr}
 8004b86:	460c      	mov	r4, r1
 8004b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b8c:	f000 f930 	bl	8004df0 <_read_r>
 8004b90:	2800      	cmp	r0, #0
 8004b92:	bfab      	itete	ge
 8004b94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b96:	89a3      	ldrhlt	r3, [r4, #12]
 8004b98:	181b      	addge	r3, r3, r0
 8004b9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b9e:	bfac      	ite	ge
 8004ba0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ba2:	81a3      	strhlt	r3, [r4, #12]
 8004ba4:	bd10      	pop	{r4, pc}

08004ba6 <__swrite>:
 8004ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004baa:	461f      	mov	r7, r3
 8004bac:	898b      	ldrh	r3, [r1, #12]
 8004bae:	05db      	lsls	r3, r3, #23
 8004bb0:	4605      	mov	r5, r0
 8004bb2:	460c      	mov	r4, r1
 8004bb4:	4616      	mov	r6, r2
 8004bb6:	d505      	bpl.n	8004bc4 <__swrite+0x1e>
 8004bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f000 f904 	bl	8004dcc <_lseek_r>
 8004bc4:	89a3      	ldrh	r3, [r4, #12]
 8004bc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bce:	81a3      	strh	r3, [r4, #12]
 8004bd0:	4632      	mov	r2, r6
 8004bd2:	463b      	mov	r3, r7
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bda:	f000 b91b 	b.w	8004e14 <_write_r>

08004bde <__sseek>:
 8004bde:	b510      	push	{r4, lr}
 8004be0:	460c      	mov	r4, r1
 8004be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be6:	f000 f8f1 	bl	8004dcc <_lseek_r>
 8004bea:	1c43      	adds	r3, r0, #1
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	bf15      	itete	ne
 8004bf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004bf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004bf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004bfa:	81a3      	strheq	r3, [r4, #12]
 8004bfc:	bf18      	it	ne
 8004bfe:	81a3      	strhne	r3, [r4, #12]
 8004c00:	bd10      	pop	{r4, pc}

08004c02 <__sclose>:
 8004c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c06:	f000 b8d1 	b.w	8004dac <_close_r>
	...

08004c0c <_vsiprintf_r>:
 8004c0c:	b510      	push	{r4, lr}
 8004c0e:	b09a      	sub	sp, #104	@ 0x68
 8004c10:	2400      	movs	r4, #0
 8004c12:	9100      	str	r1, [sp, #0]
 8004c14:	9104      	str	r1, [sp, #16]
 8004c16:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c1a:	9105      	str	r1, [sp, #20]
 8004c1c:	9102      	str	r1, [sp, #8]
 8004c1e:	4905      	ldr	r1, [pc, #20]	@ (8004c34 <_vsiprintf_r+0x28>)
 8004c20:	9103      	str	r1, [sp, #12]
 8004c22:	4669      	mov	r1, sp
 8004c24:	9419      	str	r4, [sp, #100]	@ 0x64
 8004c26:	f000 fa91 	bl	800514c <_svfiprintf_r>
 8004c2a:	9b00      	ldr	r3, [sp, #0]
 8004c2c:	701c      	strb	r4, [r3, #0]
 8004c2e:	b01a      	add	sp, #104	@ 0x68
 8004c30:	bd10      	pop	{r4, pc}
 8004c32:	bf00      	nop
 8004c34:	ffff0208 	.word	0xffff0208

08004c38 <vsiprintf>:
 8004c38:	4613      	mov	r3, r2
 8004c3a:	460a      	mov	r2, r1
 8004c3c:	4601      	mov	r1, r0
 8004c3e:	4802      	ldr	r0, [pc, #8]	@ (8004c48 <vsiprintf+0x10>)
 8004c40:	6800      	ldr	r0, [r0, #0]
 8004c42:	f7ff bfe3 	b.w	8004c0c <_vsiprintf_r>
 8004c46:	bf00      	nop
 8004c48:	20000020 	.word	0x20000020

08004c4c <__swbuf_r>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	460e      	mov	r6, r1
 8004c50:	4614      	mov	r4, r2
 8004c52:	4605      	mov	r5, r0
 8004c54:	b118      	cbz	r0, 8004c5e <__swbuf_r+0x12>
 8004c56:	6a03      	ldr	r3, [r0, #32]
 8004c58:	b90b      	cbnz	r3, 8004c5e <__swbuf_r+0x12>
 8004c5a:	f7ff feb7 	bl	80049cc <__sinit>
 8004c5e:	69a3      	ldr	r3, [r4, #24]
 8004c60:	60a3      	str	r3, [r4, #8]
 8004c62:	89a3      	ldrh	r3, [r4, #12]
 8004c64:	071a      	lsls	r2, r3, #28
 8004c66:	d501      	bpl.n	8004c6c <__swbuf_r+0x20>
 8004c68:	6923      	ldr	r3, [r4, #16]
 8004c6a:	b943      	cbnz	r3, 8004c7e <__swbuf_r+0x32>
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	4628      	mov	r0, r5
 8004c70:	f000 f82a 	bl	8004cc8 <__swsetup_r>
 8004c74:	b118      	cbz	r0, 8004c7e <__swbuf_r+0x32>
 8004c76:	f04f 37ff 	mov.w	r7, #4294967295
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	6922      	ldr	r2, [r4, #16]
 8004c82:	1a98      	subs	r0, r3, r2
 8004c84:	6963      	ldr	r3, [r4, #20]
 8004c86:	b2f6      	uxtb	r6, r6
 8004c88:	4283      	cmp	r3, r0
 8004c8a:	4637      	mov	r7, r6
 8004c8c:	dc05      	bgt.n	8004c9a <__swbuf_r+0x4e>
 8004c8e:	4621      	mov	r1, r4
 8004c90:	4628      	mov	r0, r5
 8004c92:	f000 fea9 	bl	80059e8 <_fflush_r>
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d1ed      	bne.n	8004c76 <__swbuf_r+0x2a>
 8004c9a:	68a3      	ldr	r3, [r4, #8]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	60a3      	str	r3, [r4, #8]
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	6022      	str	r2, [r4, #0]
 8004ca6:	701e      	strb	r6, [r3, #0]
 8004ca8:	6962      	ldr	r2, [r4, #20]
 8004caa:	1c43      	adds	r3, r0, #1
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d004      	beq.n	8004cba <__swbuf_r+0x6e>
 8004cb0:	89a3      	ldrh	r3, [r4, #12]
 8004cb2:	07db      	lsls	r3, r3, #31
 8004cb4:	d5e1      	bpl.n	8004c7a <__swbuf_r+0x2e>
 8004cb6:	2e0a      	cmp	r6, #10
 8004cb8:	d1df      	bne.n	8004c7a <__swbuf_r+0x2e>
 8004cba:	4621      	mov	r1, r4
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	f000 fe93 	bl	80059e8 <_fflush_r>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d0d9      	beq.n	8004c7a <__swbuf_r+0x2e>
 8004cc6:	e7d6      	b.n	8004c76 <__swbuf_r+0x2a>

08004cc8 <__swsetup_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	4b29      	ldr	r3, [pc, #164]	@ (8004d70 <__swsetup_r+0xa8>)
 8004ccc:	4605      	mov	r5, r0
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	b118      	cbz	r0, 8004cdc <__swsetup_r+0x14>
 8004cd4:	6a03      	ldr	r3, [r0, #32]
 8004cd6:	b90b      	cbnz	r3, 8004cdc <__swsetup_r+0x14>
 8004cd8:	f7ff fe78 	bl	80049cc <__sinit>
 8004cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ce0:	0719      	lsls	r1, r3, #28
 8004ce2:	d422      	bmi.n	8004d2a <__swsetup_r+0x62>
 8004ce4:	06da      	lsls	r2, r3, #27
 8004ce6:	d407      	bmi.n	8004cf8 <__swsetup_r+0x30>
 8004ce8:	2209      	movs	r2, #9
 8004cea:	602a      	str	r2, [r5, #0]
 8004cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf6:	e033      	b.n	8004d60 <__swsetup_r+0x98>
 8004cf8:	0758      	lsls	r0, r3, #29
 8004cfa:	d512      	bpl.n	8004d22 <__swsetup_r+0x5a>
 8004cfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cfe:	b141      	cbz	r1, 8004d12 <__swsetup_r+0x4a>
 8004d00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d04:	4299      	cmp	r1, r3
 8004d06:	d002      	beq.n	8004d0e <__swsetup_r+0x46>
 8004d08:	4628      	mov	r0, r5
 8004d0a:	f000 f8cb 	bl	8004ea4 <_free_r>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d12:	89a3      	ldrh	r3, [r4, #12]
 8004d14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004d18:	81a3      	strh	r3, [r4, #12]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	6063      	str	r3, [r4, #4]
 8004d1e:	6923      	ldr	r3, [r4, #16]
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	89a3      	ldrh	r3, [r4, #12]
 8004d24:	f043 0308 	orr.w	r3, r3, #8
 8004d28:	81a3      	strh	r3, [r4, #12]
 8004d2a:	6923      	ldr	r3, [r4, #16]
 8004d2c:	b94b      	cbnz	r3, 8004d42 <__swsetup_r+0x7a>
 8004d2e:	89a3      	ldrh	r3, [r4, #12]
 8004d30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d38:	d003      	beq.n	8004d42 <__swsetup_r+0x7a>
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	f000 fea1 	bl	8005a84 <__smakebuf_r>
 8004d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d46:	f013 0201 	ands.w	r2, r3, #1
 8004d4a:	d00a      	beq.n	8004d62 <__swsetup_r+0x9a>
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	60a2      	str	r2, [r4, #8]
 8004d50:	6962      	ldr	r2, [r4, #20]
 8004d52:	4252      	negs	r2, r2
 8004d54:	61a2      	str	r2, [r4, #24]
 8004d56:	6922      	ldr	r2, [r4, #16]
 8004d58:	b942      	cbnz	r2, 8004d6c <__swsetup_r+0xa4>
 8004d5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004d5e:	d1c5      	bne.n	8004cec <__swsetup_r+0x24>
 8004d60:	bd38      	pop	{r3, r4, r5, pc}
 8004d62:	0799      	lsls	r1, r3, #30
 8004d64:	bf58      	it	pl
 8004d66:	6962      	ldrpl	r2, [r4, #20]
 8004d68:	60a2      	str	r2, [r4, #8]
 8004d6a:	e7f4      	b.n	8004d56 <__swsetup_r+0x8e>
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	e7f7      	b.n	8004d60 <__swsetup_r+0x98>
 8004d70:	20000020 	.word	0x20000020

08004d74 <memset>:
 8004d74:	4402      	add	r2, r0
 8004d76:	4603      	mov	r3, r0
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d100      	bne.n	8004d7e <memset+0xa>
 8004d7c:	4770      	bx	lr
 8004d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d82:	e7f9      	b.n	8004d78 <memset+0x4>

08004d84 <strncpy>:
 8004d84:	b510      	push	{r4, lr}
 8004d86:	3901      	subs	r1, #1
 8004d88:	4603      	mov	r3, r0
 8004d8a:	b132      	cbz	r2, 8004d9a <strncpy+0x16>
 8004d8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004d90:	f803 4b01 	strb.w	r4, [r3], #1
 8004d94:	3a01      	subs	r2, #1
 8004d96:	2c00      	cmp	r4, #0
 8004d98:	d1f7      	bne.n	8004d8a <strncpy+0x6>
 8004d9a:	441a      	add	r2, r3
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d100      	bne.n	8004da4 <strncpy+0x20>
 8004da2:	bd10      	pop	{r4, pc}
 8004da4:	f803 1b01 	strb.w	r1, [r3], #1
 8004da8:	e7f9      	b.n	8004d9e <strncpy+0x1a>
	...

08004dac <_close_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	4d06      	ldr	r5, [pc, #24]	@ (8004dc8 <_close_r+0x1c>)
 8004db0:	2300      	movs	r3, #0
 8004db2:	4604      	mov	r4, r0
 8004db4:	4608      	mov	r0, r1
 8004db6:	602b      	str	r3, [r5, #0]
 8004db8:	f7fd f83e 	bl	8001e38 <_close>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d102      	bne.n	8004dc6 <_close_r+0x1a>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	b103      	cbz	r3, 8004dc6 <_close_r+0x1a>
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
 8004dc8:	200004bc 	.word	0x200004bc

08004dcc <_lseek_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	4d07      	ldr	r5, [pc, #28]	@ (8004dec <_lseek_r+0x20>)
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	4608      	mov	r0, r1
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	602a      	str	r2, [r5, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f7fd f853 	bl	8001e86 <_lseek>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d102      	bne.n	8004dea <_lseek_r+0x1e>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	b103      	cbz	r3, 8004dea <_lseek_r+0x1e>
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	200004bc 	.word	0x200004bc

08004df0 <_read_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4d07      	ldr	r5, [pc, #28]	@ (8004e10 <_read_r+0x20>)
 8004df4:	4604      	mov	r4, r0
 8004df6:	4608      	mov	r0, r1
 8004df8:	4611      	mov	r1, r2
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	602a      	str	r2, [r5, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f7fc ffe1 	bl	8001dc6 <_read>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	d102      	bne.n	8004e0e <_read_r+0x1e>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	b103      	cbz	r3, 8004e0e <_read_r+0x1e>
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
 8004e10:	200004bc 	.word	0x200004bc

08004e14 <_write_r>:
 8004e14:	b538      	push	{r3, r4, r5, lr}
 8004e16:	4d07      	ldr	r5, [pc, #28]	@ (8004e34 <_write_r+0x20>)
 8004e18:	4604      	mov	r4, r0
 8004e1a:	4608      	mov	r0, r1
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	2200      	movs	r2, #0
 8004e20:	602a      	str	r2, [r5, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	f7fc ffec 	bl	8001e00 <_write>
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	d102      	bne.n	8004e32 <_write_r+0x1e>
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	b103      	cbz	r3, 8004e32 <_write_r+0x1e>
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	bd38      	pop	{r3, r4, r5, pc}
 8004e34:	200004bc 	.word	0x200004bc

08004e38 <__errno>:
 8004e38:	4b01      	ldr	r3, [pc, #4]	@ (8004e40 <__errno+0x8>)
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20000020 	.word	0x20000020

08004e44 <__libc_init_array>:
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	4d0d      	ldr	r5, [pc, #52]	@ (8004e7c <__libc_init_array+0x38>)
 8004e48:	4c0d      	ldr	r4, [pc, #52]	@ (8004e80 <__libc_init_array+0x3c>)
 8004e4a:	1b64      	subs	r4, r4, r5
 8004e4c:	10a4      	asrs	r4, r4, #2
 8004e4e:	2600      	movs	r6, #0
 8004e50:	42a6      	cmp	r6, r4
 8004e52:	d109      	bne.n	8004e68 <__libc_init_array+0x24>
 8004e54:	4d0b      	ldr	r5, [pc, #44]	@ (8004e84 <__libc_init_array+0x40>)
 8004e56:	4c0c      	ldr	r4, [pc, #48]	@ (8004e88 <__libc_init_array+0x44>)
 8004e58:	f000 fee0 	bl	8005c1c <_init>
 8004e5c:	1b64      	subs	r4, r4, r5
 8004e5e:	10a4      	asrs	r4, r4, #2
 8004e60:	2600      	movs	r6, #0
 8004e62:	42a6      	cmp	r6, r4
 8004e64:	d105      	bne.n	8004e72 <__libc_init_array+0x2e>
 8004e66:	bd70      	pop	{r4, r5, r6, pc}
 8004e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6c:	4798      	blx	r3
 8004e6e:	3601      	adds	r6, #1
 8004e70:	e7ee      	b.n	8004e50 <__libc_init_array+0xc>
 8004e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e76:	4798      	blx	r3
 8004e78:	3601      	adds	r6, #1
 8004e7a:	e7f2      	b.n	8004e62 <__libc_init_array+0x1e>
 8004e7c:	08006770 	.word	0x08006770
 8004e80:	08006770 	.word	0x08006770
 8004e84:	08006770 	.word	0x08006770
 8004e88:	08006774 	.word	0x08006774

08004e8c <__retarget_lock_init_recursive>:
 8004e8c:	4770      	bx	lr

08004e8e <__retarget_lock_acquire_recursive>:
 8004e8e:	4770      	bx	lr

08004e90 <__retarget_lock_release_recursive>:
 8004e90:	4770      	bx	lr

08004e92 <strcpy>:
 8004e92:	4603      	mov	r3, r0
 8004e94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e98:	f803 2b01 	strb.w	r2, [r3], #1
 8004e9c:	2a00      	cmp	r2, #0
 8004e9e:	d1f9      	bne.n	8004e94 <strcpy+0x2>
 8004ea0:	4770      	bx	lr
	...

08004ea4 <_free_r>:
 8004ea4:	b538      	push	{r3, r4, r5, lr}
 8004ea6:	4605      	mov	r5, r0
 8004ea8:	2900      	cmp	r1, #0
 8004eaa:	d041      	beq.n	8004f30 <_free_r+0x8c>
 8004eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eb0:	1f0c      	subs	r4, r1, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	bfb8      	it	lt
 8004eb6:	18e4      	addlt	r4, r4, r3
 8004eb8:	f000 f8e0 	bl	800507c <__malloc_lock>
 8004ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8004f34 <_free_r+0x90>)
 8004ebe:	6813      	ldr	r3, [r2, #0]
 8004ec0:	b933      	cbnz	r3, 8004ed0 <_free_r+0x2c>
 8004ec2:	6063      	str	r3, [r4, #4]
 8004ec4:	6014      	str	r4, [r2, #0]
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ecc:	f000 b8dc 	b.w	8005088 <__malloc_unlock>
 8004ed0:	42a3      	cmp	r3, r4
 8004ed2:	d908      	bls.n	8004ee6 <_free_r+0x42>
 8004ed4:	6820      	ldr	r0, [r4, #0]
 8004ed6:	1821      	adds	r1, r4, r0
 8004ed8:	428b      	cmp	r3, r1
 8004eda:	bf01      	itttt	eq
 8004edc:	6819      	ldreq	r1, [r3, #0]
 8004ede:	685b      	ldreq	r3, [r3, #4]
 8004ee0:	1809      	addeq	r1, r1, r0
 8004ee2:	6021      	streq	r1, [r4, #0]
 8004ee4:	e7ed      	b.n	8004ec2 <_free_r+0x1e>
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	b10b      	cbz	r3, 8004ef0 <_free_r+0x4c>
 8004eec:	42a3      	cmp	r3, r4
 8004eee:	d9fa      	bls.n	8004ee6 <_free_r+0x42>
 8004ef0:	6811      	ldr	r1, [r2, #0]
 8004ef2:	1850      	adds	r0, r2, r1
 8004ef4:	42a0      	cmp	r0, r4
 8004ef6:	d10b      	bne.n	8004f10 <_free_r+0x6c>
 8004ef8:	6820      	ldr	r0, [r4, #0]
 8004efa:	4401      	add	r1, r0
 8004efc:	1850      	adds	r0, r2, r1
 8004efe:	4283      	cmp	r3, r0
 8004f00:	6011      	str	r1, [r2, #0]
 8004f02:	d1e0      	bne.n	8004ec6 <_free_r+0x22>
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	6053      	str	r3, [r2, #4]
 8004f0a:	4408      	add	r0, r1
 8004f0c:	6010      	str	r0, [r2, #0]
 8004f0e:	e7da      	b.n	8004ec6 <_free_r+0x22>
 8004f10:	d902      	bls.n	8004f18 <_free_r+0x74>
 8004f12:	230c      	movs	r3, #12
 8004f14:	602b      	str	r3, [r5, #0]
 8004f16:	e7d6      	b.n	8004ec6 <_free_r+0x22>
 8004f18:	6820      	ldr	r0, [r4, #0]
 8004f1a:	1821      	adds	r1, r4, r0
 8004f1c:	428b      	cmp	r3, r1
 8004f1e:	bf04      	itt	eq
 8004f20:	6819      	ldreq	r1, [r3, #0]
 8004f22:	685b      	ldreq	r3, [r3, #4]
 8004f24:	6063      	str	r3, [r4, #4]
 8004f26:	bf04      	itt	eq
 8004f28:	1809      	addeq	r1, r1, r0
 8004f2a:	6021      	streq	r1, [r4, #0]
 8004f2c:	6054      	str	r4, [r2, #4]
 8004f2e:	e7ca      	b.n	8004ec6 <_free_r+0x22>
 8004f30:	bd38      	pop	{r3, r4, r5, pc}
 8004f32:	bf00      	nop
 8004f34:	200004c8 	.word	0x200004c8

08004f38 <sbrk_aligned>:
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	4e0f      	ldr	r6, [pc, #60]	@ (8004f78 <sbrk_aligned+0x40>)
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	6831      	ldr	r1, [r6, #0]
 8004f40:	4605      	mov	r5, r0
 8004f42:	b911      	cbnz	r1, 8004f4a <sbrk_aligned+0x12>
 8004f44:	f000 fe16 	bl	8005b74 <_sbrk_r>
 8004f48:	6030      	str	r0, [r6, #0]
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	f000 fe11 	bl	8005b74 <_sbrk_r>
 8004f52:	1c43      	adds	r3, r0, #1
 8004f54:	d103      	bne.n	8004f5e <sbrk_aligned+0x26>
 8004f56:	f04f 34ff 	mov.w	r4, #4294967295
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	bd70      	pop	{r4, r5, r6, pc}
 8004f5e:	1cc4      	adds	r4, r0, #3
 8004f60:	f024 0403 	bic.w	r4, r4, #3
 8004f64:	42a0      	cmp	r0, r4
 8004f66:	d0f8      	beq.n	8004f5a <sbrk_aligned+0x22>
 8004f68:	1a21      	subs	r1, r4, r0
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f000 fe02 	bl	8005b74 <_sbrk_r>
 8004f70:	3001      	adds	r0, #1
 8004f72:	d1f2      	bne.n	8004f5a <sbrk_aligned+0x22>
 8004f74:	e7ef      	b.n	8004f56 <sbrk_aligned+0x1e>
 8004f76:	bf00      	nop
 8004f78:	200004c4 	.word	0x200004c4

08004f7c <_malloc_r>:
 8004f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f80:	1ccd      	adds	r5, r1, #3
 8004f82:	f025 0503 	bic.w	r5, r5, #3
 8004f86:	3508      	adds	r5, #8
 8004f88:	2d0c      	cmp	r5, #12
 8004f8a:	bf38      	it	cc
 8004f8c:	250c      	movcc	r5, #12
 8004f8e:	2d00      	cmp	r5, #0
 8004f90:	4606      	mov	r6, r0
 8004f92:	db01      	blt.n	8004f98 <_malloc_r+0x1c>
 8004f94:	42a9      	cmp	r1, r5
 8004f96:	d904      	bls.n	8004fa2 <_malloc_r+0x26>
 8004f98:	230c      	movs	r3, #12
 8004f9a:	6033      	str	r3, [r6, #0]
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005078 <_malloc_r+0xfc>
 8004fa6:	f000 f869 	bl	800507c <__malloc_lock>
 8004faa:	f8d8 3000 	ldr.w	r3, [r8]
 8004fae:	461c      	mov	r4, r3
 8004fb0:	bb44      	cbnz	r4, 8005004 <_malloc_r+0x88>
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	f7ff ffbf 	bl	8004f38 <sbrk_aligned>
 8004fba:	1c43      	adds	r3, r0, #1
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	d158      	bne.n	8005072 <_malloc_r+0xf6>
 8004fc0:	f8d8 4000 	ldr.w	r4, [r8]
 8004fc4:	4627      	mov	r7, r4
 8004fc6:	2f00      	cmp	r7, #0
 8004fc8:	d143      	bne.n	8005052 <_malloc_r+0xd6>
 8004fca:	2c00      	cmp	r4, #0
 8004fcc:	d04b      	beq.n	8005066 <_malloc_r+0xea>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	4639      	mov	r1, r7
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	eb04 0903 	add.w	r9, r4, r3
 8004fd8:	f000 fdcc 	bl	8005b74 <_sbrk_r>
 8004fdc:	4581      	cmp	r9, r0
 8004fde:	d142      	bne.n	8005066 <_malloc_r+0xea>
 8004fe0:	6821      	ldr	r1, [r4, #0]
 8004fe2:	1a6d      	subs	r5, r5, r1
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f7ff ffa6 	bl	8004f38 <sbrk_aligned>
 8004fec:	3001      	adds	r0, #1
 8004fee:	d03a      	beq.n	8005066 <_malloc_r+0xea>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	442b      	add	r3, r5
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	bb62      	cbnz	r2, 8005058 <_malloc_r+0xdc>
 8004ffe:	f8c8 7000 	str.w	r7, [r8]
 8005002:	e00f      	b.n	8005024 <_malloc_r+0xa8>
 8005004:	6822      	ldr	r2, [r4, #0]
 8005006:	1b52      	subs	r2, r2, r5
 8005008:	d420      	bmi.n	800504c <_malloc_r+0xd0>
 800500a:	2a0b      	cmp	r2, #11
 800500c:	d917      	bls.n	800503e <_malloc_r+0xc2>
 800500e:	1961      	adds	r1, r4, r5
 8005010:	42a3      	cmp	r3, r4
 8005012:	6025      	str	r5, [r4, #0]
 8005014:	bf18      	it	ne
 8005016:	6059      	strne	r1, [r3, #4]
 8005018:	6863      	ldr	r3, [r4, #4]
 800501a:	bf08      	it	eq
 800501c:	f8c8 1000 	streq.w	r1, [r8]
 8005020:	5162      	str	r2, [r4, r5]
 8005022:	604b      	str	r3, [r1, #4]
 8005024:	4630      	mov	r0, r6
 8005026:	f000 f82f 	bl	8005088 <__malloc_unlock>
 800502a:	f104 000b 	add.w	r0, r4, #11
 800502e:	1d23      	adds	r3, r4, #4
 8005030:	f020 0007 	bic.w	r0, r0, #7
 8005034:	1ac2      	subs	r2, r0, r3
 8005036:	bf1c      	itt	ne
 8005038:	1a1b      	subne	r3, r3, r0
 800503a:	50a3      	strne	r3, [r4, r2]
 800503c:	e7af      	b.n	8004f9e <_malloc_r+0x22>
 800503e:	6862      	ldr	r2, [r4, #4]
 8005040:	42a3      	cmp	r3, r4
 8005042:	bf0c      	ite	eq
 8005044:	f8c8 2000 	streq.w	r2, [r8]
 8005048:	605a      	strne	r2, [r3, #4]
 800504a:	e7eb      	b.n	8005024 <_malloc_r+0xa8>
 800504c:	4623      	mov	r3, r4
 800504e:	6864      	ldr	r4, [r4, #4]
 8005050:	e7ae      	b.n	8004fb0 <_malloc_r+0x34>
 8005052:	463c      	mov	r4, r7
 8005054:	687f      	ldr	r7, [r7, #4]
 8005056:	e7b6      	b.n	8004fc6 <_malloc_r+0x4a>
 8005058:	461a      	mov	r2, r3
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	42a3      	cmp	r3, r4
 800505e:	d1fb      	bne.n	8005058 <_malloc_r+0xdc>
 8005060:	2300      	movs	r3, #0
 8005062:	6053      	str	r3, [r2, #4]
 8005064:	e7de      	b.n	8005024 <_malloc_r+0xa8>
 8005066:	230c      	movs	r3, #12
 8005068:	6033      	str	r3, [r6, #0]
 800506a:	4630      	mov	r0, r6
 800506c:	f000 f80c 	bl	8005088 <__malloc_unlock>
 8005070:	e794      	b.n	8004f9c <_malloc_r+0x20>
 8005072:	6005      	str	r5, [r0, #0]
 8005074:	e7d6      	b.n	8005024 <_malloc_r+0xa8>
 8005076:	bf00      	nop
 8005078:	200004c8 	.word	0x200004c8

0800507c <__malloc_lock>:
 800507c:	4801      	ldr	r0, [pc, #4]	@ (8005084 <__malloc_lock+0x8>)
 800507e:	f7ff bf06 	b.w	8004e8e <__retarget_lock_acquire_recursive>
 8005082:	bf00      	nop
 8005084:	200004c0 	.word	0x200004c0

08005088 <__malloc_unlock>:
 8005088:	4801      	ldr	r0, [pc, #4]	@ (8005090 <__malloc_unlock+0x8>)
 800508a:	f7ff bf01 	b.w	8004e90 <__retarget_lock_release_recursive>
 800508e:	bf00      	nop
 8005090:	200004c0 	.word	0x200004c0

08005094 <__ssputs_r>:
 8005094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005098:	688e      	ldr	r6, [r1, #8]
 800509a:	461f      	mov	r7, r3
 800509c:	42be      	cmp	r6, r7
 800509e:	680b      	ldr	r3, [r1, #0]
 80050a0:	4682      	mov	sl, r0
 80050a2:	460c      	mov	r4, r1
 80050a4:	4690      	mov	r8, r2
 80050a6:	d82d      	bhi.n	8005104 <__ssputs_r+0x70>
 80050a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80050b0:	d026      	beq.n	8005100 <__ssputs_r+0x6c>
 80050b2:	6965      	ldr	r5, [r4, #20]
 80050b4:	6909      	ldr	r1, [r1, #16]
 80050b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050ba:	eba3 0901 	sub.w	r9, r3, r1
 80050be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050c2:	1c7b      	adds	r3, r7, #1
 80050c4:	444b      	add	r3, r9
 80050c6:	106d      	asrs	r5, r5, #1
 80050c8:	429d      	cmp	r5, r3
 80050ca:	bf38      	it	cc
 80050cc:	461d      	movcc	r5, r3
 80050ce:	0553      	lsls	r3, r2, #21
 80050d0:	d527      	bpl.n	8005122 <__ssputs_r+0x8e>
 80050d2:	4629      	mov	r1, r5
 80050d4:	f7ff ff52 	bl	8004f7c <_malloc_r>
 80050d8:	4606      	mov	r6, r0
 80050da:	b360      	cbz	r0, 8005136 <__ssputs_r+0xa2>
 80050dc:	6921      	ldr	r1, [r4, #16]
 80050de:	464a      	mov	r2, r9
 80050e0:	f000 fd58 	bl	8005b94 <memcpy>
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ee:	81a3      	strh	r3, [r4, #12]
 80050f0:	6126      	str	r6, [r4, #16]
 80050f2:	6165      	str	r5, [r4, #20]
 80050f4:	444e      	add	r6, r9
 80050f6:	eba5 0509 	sub.w	r5, r5, r9
 80050fa:	6026      	str	r6, [r4, #0]
 80050fc:	60a5      	str	r5, [r4, #8]
 80050fe:	463e      	mov	r6, r7
 8005100:	42be      	cmp	r6, r7
 8005102:	d900      	bls.n	8005106 <__ssputs_r+0x72>
 8005104:	463e      	mov	r6, r7
 8005106:	6820      	ldr	r0, [r4, #0]
 8005108:	4632      	mov	r2, r6
 800510a:	4641      	mov	r1, r8
 800510c:	f000 fcf6 	bl	8005afc <memmove>
 8005110:	68a3      	ldr	r3, [r4, #8]
 8005112:	1b9b      	subs	r3, r3, r6
 8005114:	60a3      	str	r3, [r4, #8]
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	4433      	add	r3, r6
 800511a:	6023      	str	r3, [r4, #0]
 800511c:	2000      	movs	r0, #0
 800511e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005122:	462a      	mov	r2, r5
 8005124:	f000 fd44 	bl	8005bb0 <_realloc_r>
 8005128:	4606      	mov	r6, r0
 800512a:	2800      	cmp	r0, #0
 800512c:	d1e0      	bne.n	80050f0 <__ssputs_r+0x5c>
 800512e:	6921      	ldr	r1, [r4, #16]
 8005130:	4650      	mov	r0, sl
 8005132:	f7ff feb7 	bl	8004ea4 <_free_r>
 8005136:	230c      	movs	r3, #12
 8005138:	f8ca 3000 	str.w	r3, [sl]
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005142:	81a3      	strh	r3, [r4, #12]
 8005144:	f04f 30ff 	mov.w	r0, #4294967295
 8005148:	e7e9      	b.n	800511e <__ssputs_r+0x8a>
	...

0800514c <_svfiprintf_r>:
 800514c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005150:	4698      	mov	r8, r3
 8005152:	898b      	ldrh	r3, [r1, #12]
 8005154:	061b      	lsls	r3, r3, #24
 8005156:	b09d      	sub	sp, #116	@ 0x74
 8005158:	4607      	mov	r7, r0
 800515a:	460d      	mov	r5, r1
 800515c:	4614      	mov	r4, r2
 800515e:	d510      	bpl.n	8005182 <_svfiprintf_r+0x36>
 8005160:	690b      	ldr	r3, [r1, #16]
 8005162:	b973      	cbnz	r3, 8005182 <_svfiprintf_r+0x36>
 8005164:	2140      	movs	r1, #64	@ 0x40
 8005166:	f7ff ff09 	bl	8004f7c <_malloc_r>
 800516a:	6028      	str	r0, [r5, #0]
 800516c:	6128      	str	r0, [r5, #16]
 800516e:	b930      	cbnz	r0, 800517e <_svfiprintf_r+0x32>
 8005170:	230c      	movs	r3, #12
 8005172:	603b      	str	r3, [r7, #0]
 8005174:	f04f 30ff 	mov.w	r0, #4294967295
 8005178:	b01d      	add	sp, #116	@ 0x74
 800517a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517e:	2340      	movs	r3, #64	@ 0x40
 8005180:	616b      	str	r3, [r5, #20]
 8005182:	2300      	movs	r3, #0
 8005184:	9309      	str	r3, [sp, #36]	@ 0x24
 8005186:	2320      	movs	r3, #32
 8005188:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800518c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005190:	2330      	movs	r3, #48	@ 0x30
 8005192:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005330 <_svfiprintf_r+0x1e4>
 8005196:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800519a:	f04f 0901 	mov.w	r9, #1
 800519e:	4623      	mov	r3, r4
 80051a0:	469a      	mov	sl, r3
 80051a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051a6:	b10a      	cbz	r2, 80051ac <_svfiprintf_r+0x60>
 80051a8:	2a25      	cmp	r2, #37	@ 0x25
 80051aa:	d1f9      	bne.n	80051a0 <_svfiprintf_r+0x54>
 80051ac:	ebba 0b04 	subs.w	fp, sl, r4
 80051b0:	d00b      	beq.n	80051ca <_svfiprintf_r+0x7e>
 80051b2:	465b      	mov	r3, fp
 80051b4:	4622      	mov	r2, r4
 80051b6:	4629      	mov	r1, r5
 80051b8:	4638      	mov	r0, r7
 80051ba:	f7ff ff6b 	bl	8005094 <__ssputs_r>
 80051be:	3001      	adds	r0, #1
 80051c0:	f000 80a7 	beq.w	8005312 <_svfiprintf_r+0x1c6>
 80051c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051c6:	445a      	add	r2, fp
 80051c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80051ca:	f89a 3000 	ldrb.w	r3, [sl]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 809f 	beq.w	8005312 <_svfiprintf_r+0x1c6>
 80051d4:	2300      	movs	r3, #0
 80051d6:	f04f 32ff 	mov.w	r2, #4294967295
 80051da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051de:	f10a 0a01 	add.w	sl, sl, #1
 80051e2:	9304      	str	r3, [sp, #16]
 80051e4:	9307      	str	r3, [sp, #28]
 80051e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80051ec:	4654      	mov	r4, sl
 80051ee:	2205      	movs	r2, #5
 80051f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051f4:	484e      	ldr	r0, [pc, #312]	@ (8005330 <_svfiprintf_r+0x1e4>)
 80051f6:	f7fb f80b 	bl	8000210 <memchr>
 80051fa:	9a04      	ldr	r2, [sp, #16]
 80051fc:	b9d8      	cbnz	r0, 8005236 <_svfiprintf_r+0xea>
 80051fe:	06d0      	lsls	r0, r2, #27
 8005200:	bf44      	itt	mi
 8005202:	2320      	movmi	r3, #32
 8005204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005208:	0711      	lsls	r1, r2, #28
 800520a:	bf44      	itt	mi
 800520c:	232b      	movmi	r3, #43	@ 0x2b
 800520e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005212:	f89a 3000 	ldrb.w	r3, [sl]
 8005216:	2b2a      	cmp	r3, #42	@ 0x2a
 8005218:	d015      	beq.n	8005246 <_svfiprintf_r+0xfa>
 800521a:	9a07      	ldr	r2, [sp, #28]
 800521c:	4654      	mov	r4, sl
 800521e:	2000      	movs	r0, #0
 8005220:	f04f 0c0a 	mov.w	ip, #10
 8005224:	4621      	mov	r1, r4
 8005226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800522a:	3b30      	subs	r3, #48	@ 0x30
 800522c:	2b09      	cmp	r3, #9
 800522e:	d94b      	bls.n	80052c8 <_svfiprintf_r+0x17c>
 8005230:	b1b0      	cbz	r0, 8005260 <_svfiprintf_r+0x114>
 8005232:	9207      	str	r2, [sp, #28]
 8005234:	e014      	b.n	8005260 <_svfiprintf_r+0x114>
 8005236:	eba0 0308 	sub.w	r3, r0, r8
 800523a:	fa09 f303 	lsl.w	r3, r9, r3
 800523e:	4313      	orrs	r3, r2
 8005240:	9304      	str	r3, [sp, #16]
 8005242:	46a2      	mov	sl, r4
 8005244:	e7d2      	b.n	80051ec <_svfiprintf_r+0xa0>
 8005246:	9b03      	ldr	r3, [sp, #12]
 8005248:	1d19      	adds	r1, r3, #4
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	9103      	str	r1, [sp, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	bfbb      	ittet	lt
 8005252:	425b      	neglt	r3, r3
 8005254:	f042 0202 	orrlt.w	r2, r2, #2
 8005258:	9307      	strge	r3, [sp, #28]
 800525a:	9307      	strlt	r3, [sp, #28]
 800525c:	bfb8      	it	lt
 800525e:	9204      	strlt	r2, [sp, #16]
 8005260:	7823      	ldrb	r3, [r4, #0]
 8005262:	2b2e      	cmp	r3, #46	@ 0x2e
 8005264:	d10a      	bne.n	800527c <_svfiprintf_r+0x130>
 8005266:	7863      	ldrb	r3, [r4, #1]
 8005268:	2b2a      	cmp	r3, #42	@ 0x2a
 800526a:	d132      	bne.n	80052d2 <_svfiprintf_r+0x186>
 800526c:	9b03      	ldr	r3, [sp, #12]
 800526e:	1d1a      	adds	r2, r3, #4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	9203      	str	r2, [sp, #12]
 8005274:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005278:	3402      	adds	r4, #2
 800527a:	9305      	str	r3, [sp, #20]
 800527c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005340 <_svfiprintf_r+0x1f4>
 8005280:	7821      	ldrb	r1, [r4, #0]
 8005282:	2203      	movs	r2, #3
 8005284:	4650      	mov	r0, sl
 8005286:	f7fa ffc3 	bl	8000210 <memchr>
 800528a:	b138      	cbz	r0, 800529c <_svfiprintf_r+0x150>
 800528c:	9b04      	ldr	r3, [sp, #16]
 800528e:	eba0 000a 	sub.w	r0, r0, sl
 8005292:	2240      	movs	r2, #64	@ 0x40
 8005294:	4082      	lsls	r2, r0
 8005296:	4313      	orrs	r3, r2
 8005298:	3401      	adds	r4, #1
 800529a:	9304      	str	r3, [sp, #16]
 800529c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052a0:	4824      	ldr	r0, [pc, #144]	@ (8005334 <_svfiprintf_r+0x1e8>)
 80052a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052a6:	2206      	movs	r2, #6
 80052a8:	f7fa ffb2 	bl	8000210 <memchr>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	d036      	beq.n	800531e <_svfiprintf_r+0x1d2>
 80052b0:	4b21      	ldr	r3, [pc, #132]	@ (8005338 <_svfiprintf_r+0x1ec>)
 80052b2:	bb1b      	cbnz	r3, 80052fc <_svfiprintf_r+0x1b0>
 80052b4:	9b03      	ldr	r3, [sp, #12]
 80052b6:	3307      	adds	r3, #7
 80052b8:	f023 0307 	bic.w	r3, r3, #7
 80052bc:	3308      	adds	r3, #8
 80052be:	9303      	str	r3, [sp, #12]
 80052c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052c2:	4433      	add	r3, r6
 80052c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80052c6:	e76a      	b.n	800519e <_svfiprintf_r+0x52>
 80052c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80052cc:	460c      	mov	r4, r1
 80052ce:	2001      	movs	r0, #1
 80052d0:	e7a8      	b.n	8005224 <_svfiprintf_r+0xd8>
 80052d2:	2300      	movs	r3, #0
 80052d4:	3401      	adds	r4, #1
 80052d6:	9305      	str	r3, [sp, #20]
 80052d8:	4619      	mov	r1, r3
 80052da:	f04f 0c0a 	mov.w	ip, #10
 80052de:	4620      	mov	r0, r4
 80052e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052e4:	3a30      	subs	r2, #48	@ 0x30
 80052e6:	2a09      	cmp	r2, #9
 80052e8:	d903      	bls.n	80052f2 <_svfiprintf_r+0x1a6>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0c6      	beq.n	800527c <_svfiprintf_r+0x130>
 80052ee:	9105      	str	r1, [sp, #20]
 80052f0:	e7c4      	b.n	800527c <_svfiprintf_r+0x130>
 80052f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80052f6:	4604      	mov	r4, r0
 80052f8:	2301      	movs	r3, #1
 80052fa:	e7f0      	b.n	80052de <_svfiprintf_r+0x192>
 80052fc:	ab03      	add	r3, sp, #12
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	462a      	mov	r2, r5
 8005302:	4b0e      	ldr	r3, [pc, #56]	@ (800533c <_svfiprintf_r+0x1f0>)
 8005304:	a904      	add	r1, sp, #16
 8005306:	4638      	mov	r0, r7
 8005308:	f3af 8000 	nop.w
 800530c:	1c42      	adds	r2, r0, #1
 800530e:	4606      	mov	r6, r0
 8005310:	d1d6      	bne.n	80052c0 <_svfiprintf_r+0x174>
 8005312:	89ab      	ldrh	r3, [r5, #12]
 8005314:	065b      	lsls	r3, r3, #25
 8005316:	f53f af2d 	bmi.w	8005174 <_svfiprintf_r+0x28>
 800531a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800531c:	e72c      	b.n	8005178 <_svfiprintf_r+0x2c>
 800531e:	ab03      	add	r3, sp, #12
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	462a      	mov	r2, r5
 8005324:	4b05      	ldr	r3, [pc, #20]	@ (800533c <_svfiprintf_r+0x1f0>)
 8005326:	a904      	add	r1, sp, #16
 8005328:	4638      	mov	r0, r7
 800532a:	f000 f9bb 	bl	80056a4 <_printf_i>
 800532e:	e7ed      	b.n	800530c <_svfiprintf_r+0x1c0>
 8005330:	08006734 	.word	0x08006734
 8005334:	0800673e 	.word	0x0800673e
 8005338:	00000000 	.word	0x00000000
 800533c:	08005095 	.word	0x08005095
 8005340:	0800673a 	.word	0x0800673a

08005344 <__sfputc_r>:
 8005344:	6893      	ldr	r3, [r2, #8]
 8005346:	3b01      	subs	r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	b410      	push	{r4}
 800534c:	6093      	str	r3, [r2, #8]
 800534e:	da08      	bge.n	8005362 <__sfputc_r+0x1e>
 8005350:	6994      	ldr	r4, [r2, #24]
 8005352:	42a3      	cmp	r3, r4
 8005354:	db01      	blt.n	800535a <__sfputc_r+0x16>
 8005356:	290a      	cmp	r1, #10
 8005358:	d103      	bne.n	8005362 <__sfputc_r+0x1e>
 800535a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800535e:	f7ff bc75 	b.w	8004c4c <__swbuf_r>
 8005362:	6813      	ldr	r3, [r2, #0]
 8005364:	1c58      	adds	r0, r3, #1
 8005366:	6010      	str	r0, [r2, #0]
 8005368:	7019      	strb	r1, [r3, #0]
 800536a:	4608      	mov	r0, r1
 800536c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005370:	4770      	bx	lr

08005372 <__sfputs_r>:
 8005372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005374:	4606      	mov	r6, r0
 8005376:	460f      	mov	r7, r1
 8005378:	4614      	mov	r4, r2
 800537a:	18d5      	adds	r5, r2, r3
 800537c:	42ac      	cmp	r4, r5
 800537e:	d101      	bne.n	8005384 <__sfputs_r+0x12>
 8005380:	2000      	movs	r0, #0
 8005382:	e007      	b.n	8005394 <__sfputs_r+0x22>
 8005384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005388:	463a      	mov	r2, r7
 800538a:	4630      	mov	r0, r6
 800538c:	f7ff ffda 	bl	8005344 <__sfputc_r>
 8005390:	1c43      	adds	r3, r0, #1
 8005392:	d1f3      	bne.n	800537c <__sfputs_r+0xa>
 8005394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005398 <_vfiprintf_r>:
 8005398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539c:	460d      	mov	r5, r1
 800539e:	b09d      	sub	sp, #116	@ 0x74
 80053a0:	4614      	mov	r4, r2
 80053a2:	4698      	mov	r8, r3
 80053a4:	4606      	mov	r6, r0
 80053a6:	b118      	cbz	r0, 80053b0 <_vfiprintf_r+0x18>
 80053a8:	6a03      	ldr	r3, [r0, #32]
 80053aa:	b90b      	cbnz	r3, 80053b0 <_vfiprintf_r+0x18>
 80053ac:	f7ff fb0e 	bl	80049cc <__sinit>
 80053b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053b2:	07d9      	lsls	r1, r3, #31
 80053b4:	d405      	bmi.n	80053c2 <_vfiprintf_r+0x2a>
 80053b6:	89ab      	ldrh	r3, [r5, #12]
 80053b8:	059a      	lsls	r2, r3, #22
 80053ba:	d402      	bmi.n	80053c2 <_vfiprintf_r+0x2a>
 80053bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053be:	f7ff fd66 	bl	8004e8e <__retarget_lock_acquire_recursive>
 80053c2:	89ab      	ldrh	r3, [r5, #12]
 80053c4:	071b      	lsls	r3, r3, #28
 80053c6:	d501      	bpl.n	80053cc <_vfiprintf_r+0x34>
 80053c8:	692b      	ldr	r3, [r5, #16]
 80053ca:	b99b      	cbnz	r3, 80053f4 <_vfiprintf_r+0x5c>
 80053cc:	4629      	mov	r1, r5
 80053ce:	4630      	mov	r0, r6
 80053d0:	f7ff fc7a 	bl	8004cc8 <__swsetup_r>
 80053d4:	b170      	cbz	r0, 80053f4 <_vfiprintf_r+0x5c>
 80053d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053d8:	07dc      	lsls	r4, r3, #31
 80053da:	d504      	bpl.n	80053e6 <_vfiprintf_r+0x4e>
 80053dc:	f04f 30ff 	mov.w	r0, #4294967295
 80053e0:	b01d      	add	sp, #116	@ 0x74
 80053e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e6:	89ab      	ldrh	r3, [r5, #12]
 80053e8:	0598      	lsls	r0, r3, #22
 80053ea:	d4f7      	bmi.n	80053dc <_vfiprintf_r+0x44>
 80053ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053ee:	f7ff fd4f 	bl	8004e90 <__retarget_lock_release_recursive>
 80053f2:	e7f3      	b.n	80053dc <_vfiprintf_r+0x44>
 80053f4:	2300      	movs	r3, #0
 80053f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80053f8:	2320      	movs	r3, #32
 80053fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80053fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005402:	2330      	movs	r3, #48	@ 0x30
 8005404:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80055b4 <_vfiprintf_r+0x21c>
 8005408:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800540c:	f04f 0901 	mov.w	r9, #1
 8005410:	4623      	mov	r3, r4
 8005412:	469a      	mov	sl, r3
 8005414:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005418:	b10a      	cbz	r2, 800541e <_vfiprintf_r+0x86>
 800541a:	2a25      	cmp	r2, #37	@ 0x25
 800541c:	d1f9      	bne.n	8005412 <_vfiprintf_r+0x7a>
 800541e:	ebba 0b04 	subs.w	fp, sl, r4
 8005422:	d00b      	beq.n	800543c <_vfiprintf_r+0xa4>
 8005424:	465b      	mov	r3, fp
 8005426:	4622      	mov	r2, r4
 8005428:	4629      	mov	r1, r5
 800542a:	4630      	mov	r0, r6
 800542c:	f7ff ffa1 	bl	8005372 <__sfputs_r>
 8005430:	3001      	adds	r0, #1
 8005432:	f000 80a7 	beq.w	8005584 <_vfiprintf_r+0x1ec>
 8005436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005438:	445a      	add	r2, fp
 800543a:	9209      	str	r2, [sp, #36]	@ 0x24
 800543c:	f89a 3000 	ldrb.w	r3, [sl]
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 809f 	beq.w	8005584 <_vfiprintf_r+0x1ec>
 8005446:	2300      	movs	r3, #0
 8005448:	f04f 32ff 	mov.w	r2, #4294967295
 800544c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005450:	f10a 0a01 	add.w	sl, sl, #1
 8005454:	9304      	str	r3, [sp, #16]
 8005456:	9307      	str	r3, [sp, #28]
 8005458:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800545c:	931a      	str	r3, [sp, #104]	@ 0x68
 800545e:	4654      	mov	r4, sl
 8005460:	2205      	movs	r2, #5
 8005462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005466:	4853      	ldr	r0, [pc, #332]	@ (80055b4 <_vfiprintf_r+0x21c>)
 8005468:	f7fa fed2 	bl	8000210 <memchr>
 800546c:	9a04      	ldr	r2, [sp, #16]
 800546e:	b9d8      	cbnz	r0, 80054a8 <_vfiprintf_r+0x110>
 8005470:	06d1      	lsls	r1, r2, #27
 8005472:	bf44      	itt	mi
 8005474:	2320      	movmi	r3, #32
 8005476:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800547a:	0713      	lsls	r3, r2, #28
 800547c:	bf44      	itt	mi
 800547e:	232b      	movmi	r3, #43	@ 0x2b
 8005480:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005484:	f89a 3000 	ldrb.w	r3, [sl]
 8005488:	2b2a      	cmp	r3, #42	@ 0x2a
 800548a:	d015      	beq.n	80054b8 <_vfiprintf_r+0x120>
 800548c:	9a07      	ldr	r2, [sp, #28]
 800548e:	4654      	mov	r4, sl
 8005490:	2000      	movs	r0, #0
 8005492:	f04f 0c0a 	mov.w	ip, #10
 8005496:	4621      	mov	r1, r4
 8005498:	f811 3b01 	ldrb.w	r3, [r1], #1
 800549c:	3b30      	subs	r3, #48	@ 0x30
 800549e:	2b09      	cmp	r3, #9
 80054a0:	d94b      	bls.n	800553a <_vfiprintf_r+0x1a2>
 80054a2:	b1b0      	cbz	r0, 80054d2 <_vfiprintf_r+0x13a>
 80054a4:	9207      	str	r2, [sp, #28]
 80054a6:	e014      	b.n	80054d2 <_vfiprintf_r+0x13a>
 80054a8:	eba0 0308 	sub.w	r3, r0, r8
 80054ac:	fa09 f303 	lsl.w	r3, r9, r3
 80054b0:	4313      	orrs	r3, r2
 80054b2:	9304      	str	r3, [sp, #16]
 80054b4:	46a2      	mov	sl, r4
 80054b6:	e7d2      	b.n	800545e <_vfiprintf_r+0xc6>
 80054b8:	9b03      	ldr	r3, [sp, #12]
 80054ba:	1d19      	adds	r1, r3, #4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	9103      	str	r1, [sp, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bfbb      	ittet	lt
 80054c4:	425b      	neglt	r3, r3
 80054c6:	f042 0202 	orrlt.w	r2, r2, #2
 80054ca:	9307      	strge	r3, [sp, #28]
 80054cc:	9307      	strlt	r3, [sp, #28]
 80054ce:	bfb8      	it	lt
 80054d0:	9204      	strlt	r2, [sp, #16]
 80054d2:	7823      	ldrb	r3, [r4, #0]
 80054d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80054d6:	d10a      	bne.n	80054ee <_vfiprintf_r+0x156>
 80054d8:	7863      	ldrb	r3, [r4, #1]
 80054da:	2b2a      	cmp	r3, #42	@ 0x2a
 80054dc:	d132      	bne.n	8005544 <_vfiprintf_r+0x1ac>
 80054de:	9b03      	ldr	r3, [sp, #12]
 80054e0:	1d1a      	adds	r2, r3, #4
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	9203      	str	r2, [sp, #12]
 80054e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80054ea:	3402      	adds	r4, #2
 80054ec:	9305      	str	r3, [sp, #20]
 80054ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80055c4 <_vfiprintf_r+0x22c>
 80054f2:	7821      	ldrb	r1, [r4, #0]
 80054f4:	2203      	movs	r2, #3
 80054f6:	4650      	mov	r0, sl
 80054f8:	f7fa fe8a 	bl	8000210 <memchr>
 80054fc:	b138      	cbz	r0, 800550e <_vfiprintf_r+0x176>
 80054fe:	9b04      	ldr	r3, [sp, #16]
 8005500:	eba0 000a 	sub.w	r0, r0, sl
 8005504:	2240      	movs	r2, #64	@ 0x40
 8005506:	4082      	lsls	r2, r0
 8005508:	4313      	orrs	r3, r2
 800550a:	3401      	adds	r4, #1
 800550c:	9304      	str	r3, [sp, #16]
 800550e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005512:	4829      	ldr	r0, [pc, #164]	@ (80055b8 <_vfiprintf_r+0x220>)
 8005514:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005518:	2206      	movs	r2, #6
 800551a:	f7fa fe79 	bl	8000210 <memchr>
 800551e:	2800      	cmp	r0, #0
 8005520:	d03f      	beq.n	80055a2 <_vfiprintf_r+0x20a>
 8005522:	4b26      	ldr	r3, [pc, #152]	@ (80055bc <_vfiprintf_r+0x224>)
 8005524:	bb1b      	cbnz	r3, 800556e <_vfiprintf_r+0x1d6>
 8005526:	9b03      	ldr	r3, [sp, #12]
 8005528:	3307      	adds	r3, #7
 800552a:	f023 0307 	bic.w	r3, r3, #7
 800552e:	3308      	adds	r3, #8
 8005530:	9303      	str	r3, [sp, #12]
 8005532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005534:	443b      	add	r3, r7
 8005536:	9309      	str	r3, [sp, #36]	@ 0x24
 8005538:	e76a      	b.n	8005410 <_vfiprintf_r+0x78>
 800553a:	fb0c 3202 	mla	r2, ip, r2, r3
 800553e:	460c      	mov	r4, r1
 8005540:	2001      	movs	r0, #1
 8005542:	e7a8      	b.n	8005496 <_vfiprintf_r+0xfe>
 8005544:	2300      	movs	r3, #0
 8005546:	3401      	adds	r4, #1
 8005548:	9305      	str	r3, [sp, #20]
 800554a:	4619      	mov	r1, r3
 800554c:	f04f 0c0a 	mov.w	ip, #10
 8005550:	4620      	mov	r0, r4
 8005552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005556:	3a30      	subs	r2, #48	@ 0x30
 8005558:	2a09      	cmp	r2, #9
 800555a:	d903      	bls.n	8005564 <_vfiprintf_r+0x1cc>
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0c6      	beq.n	80054ee <_vfiprintf_r+0x156>
 8005560:	9105      	str	r1, [sp, #20]
 8005562:	e7c4      	b.n	80054ee <_vfiprintf_r+0x156>
 8005564:	fb0c 2101 	mla	r1, ip, r1, r2
 8005568:	4604      	mov	r4, r0
 800556a:	2301      	movs	r3, #1
 800556c:	e7f0      	b.n	8005550 <_vfiprintf_r+0x1b8>
 800556e:	ab03      	add	r3, sp, #12
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	462a      	mov	r2, r5
 8005574:	4b12      	ldr	r3, [pc, #72]	@ (80055c0 <_vfiprintf_r+0x228>)
 8005576:	a904      	add	r1, sp, #16
 8005578:	4630      	mov	r0, r6
 800557a:	f3af 8000 	nop.w
 800557e:	4607      	mov	r7, r0
 8005580:	1c78      	adds	r0, r7, #1
 8005582:	d1d6      	bne.n	8005532 <_vfiprintf_r+0x19a>
 8005584:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005586:	07d9      	lsls	r1, r3, #31
 8005588:	d405      	bmi.n	8005596 <_vfiprintf_r+0x1fe>
 800558a:	89ab      	ldrh	r3, [r5, #12]
 800558c:	059a      	lsls	r2, r3, #22
 800558e:	d402      	bmi.n	8005596 <_vfiprintf_r+0x1fe>
 8005590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005592:	f7ff fc7d 	bl	8004e90 <__retarget_lock_release_recursive>
 8005596:	89ab      	ldrh	r3, [r5, #12]
 8005598:	065b      	lsls	r3, r3, #25
 800559a:	f53f af1f 	bmi.w	80053dc <_vfiprintf_r+0x44>
 800559e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055a0:	e71e      	b.n	80053e0 <_vfiprintf_r+0x48>
 80055a2:	ab03      	add	r3, sp, #12
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	462a      	mov	r2, r5
 80055a8:	4b05      	ldr	r3, [pc, #20]	@ (80055c0 <_vfiprintf_r+0x228>)
 80055aa:	a904      	add	r1, sp, #16
 80055ac:	4630      	mov	r0, r6
 80055ae:	f000 f879 	bl	80056a4 <_printf_i>
 80055b2:	e7e4      	b.n	800557e <_vfiprintf_r+0x1e6>
 80055b4:	08006734 	.word	0x08006734
 80055b8:	0800673e 	.word	0x0800673e
 80055bc:	00000000 	.word	0x00000000
 80055c0:	08005373 	.word	0x08005373
 80055c4:	0800673a 	.word	0x0800673a

080055c8 <_printf_common>:
 80055c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055cc:	4616      	mov	r6, r2
 80055ce:	4698      	mov	r8, r3
 80055d0:	688a      	ldr	r2, [r1, #8]
 80055d2:	690b      	ldr	r3, [r1, #16]
 80055d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055d8:	4293      	cmp	r3, r2
 80055da:	bfb8      	it	lt
 80055dc:	4613      	movlt	r3, r2
 80055de:	6033      	str	r3, [r6, #0]
 80055e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055e4:	4607      	mov	r7, r0
 80055e6:	460c      	mov	r4, r1
 80055e8:	b10a      	cbz	r2, 80055ee <_printf_common+0x26>
 80055ea:	3301      	adds	r3, #1
 80055ec:	6033      	str	r3, [r6, #0]
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	0699      	lsls	r1, r3, #26
 80055f2:	bf42      	ittt	mi
 80055f4:	6833      	ldrmi	r3, [r6, #0]
 80055f6:	3302      	addmi	r3, #2
 80055f8:	6033      	strmi	r3, [r6, #0]
 80055fa:	6825      	ldr	r5, [r4, #0]
 80055fc:	f015 0506 	ands.w	r5, r5, #6
 8005600:	d106      	bne.n	8005610 <_printf_common+0x48>
 8005602:	f104 0a19 	add.w	sl, r4, #25
 8005606:	68e3      	ldr	r3, [r4, #12]
 8005608:	6832      	ldr	r2, [r6, #0]
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	42ab      	cmp	r3, r5
 800560e:	dc26      	bgt.n	800565e <_printf_common+0x96>
 8005610:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005614:	6822      	ldr	r2, [r4, #0]
 8005616:	3b00      	subs	r3, #0
 8005618:	bf18      	it	ne
 800561a:	2301      	movne	r3, #1
 800561c:	0692      	lsls	r2, r2, #26
 800561e:	d42b      	bmi.n	8005678 <_printf_common+0xb0>
 8005620:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005624:	4641      	mov	r1, r8
 8005626:	4638      	mov	r0, r7
 8005628:	47c8      	blx	r9
 800562a:	3001      	adds	r0, #1
 800562c:	d01e      	beq.n	800566c <_printf_common+0xa4>
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	6922      	ldr	r2, [r4, #16]
 8005632:	f003 0306 	and.w	r3, r3, #6
 8005636:	2b04      	cmp	r3, #4
 8005638:	bf02      	ittt	eq
 800563a:	68e5      	ldreq	r5, [r4, #12]
 800563c:	6833      	ldreq	r3, [r6, #0]
 800563e:	1aed      	subeq	r5, r5, r3
 8005640:	68a3      	ldr	r3, [r4, #8]
 8005642:	bf0c      	ite	eq
 8005644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005648:	2500      	movne	r5, #0
 800564a:	4293      	cmp	r3, r2
 800564c:	bfc4      	itt	gt
 800564e:	1a9b      	subgt	r3, r3, r2
 8005650:	18ed      	addgt	r5, r5, r3
 8005652:	2600      	movs	r6, #0
 8005654:	341a      	adds	r4, #26
 8005656:	42b5      	cmp	r5, r6
 8005658:	d11a      	bne.n	8005690 <_printf_common+0xc8>
 800565a:	2000      	movs	r0, #0
 800565c:	e008      	b.n	8005670 <_printf_common+0xa8>
 800565e:	2301      	movs	r3, #1
 8005660:	4652      	mov	r2, sl
 8005662:	4641      	mov	r1, r8
 8005664:	4638      	mov	r0, r7
 8005666:	47c8      	blx	r9
 8005668:	3001      	adds	r0, #1
 800566a:	d103      	bne.n	8005674 <_printf_common+0xac>
 800566c:	f04f 30ff 	mov.w	r0, #4294967295
 8005670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005674:	3501      	adds	r5, #1
 8005676:	e7c6      	b.n	8005606 <_printf_common+0x3e>
 8005678:	18e1      	adds	r1, r4, r3
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	2030      	movs	r0, #48	@ 0x30
 800567e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005682:	4422      	add	r2, r4
 8005684:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005688:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800568c:	3302      	adds	r3, #2
 800568e:	e7c7      	b.n	8005620 <_printf_common+0x58>
 8005690:	2301      	movs	r3, #1
 8005692:	4622      	mov	r2, r4
 8005694:	4641      	mov	r1, r8
 8005696:	4638      	mov	r0, r7
 8005698:	47c8      	blx	r9
 800569a:	3001      	adds	r0, #1
 800569c:	d0e6      	beq.n	800566c <_printf_common+0xa4>
 800569e:	3601      	adds	r6, #1
 80056a0:	e7d9      	b.n	8005656 <_printf_common+0x8e>
	...

080056a4 <_printf_i>:
 80056a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056a8:	7e0f      	ldrb	r7, [r1, #24]
 80056aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056ac:	2f78      	cmp	r7, #120	@ 0x78
 80056ae:	4691      	mov	r9, r2
 80056b0:	4680      	mov	r8, r0
 80056b2:	460c      	mov	r4, r1
 80056b4:	469a      	mov	sl, r3
 80056b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056ba:	d807      	bhi.n	80056cc <_printf_i+0x28>
 80056bc:	2f62      	cmp	r7, #98	@ 0x62
 80056be:	d80a      	bhi.n	80056d6 <_printf_i+0x32>
 80056c0:	2f00      	cmp	r7, #0
 80056c2:	f000 80d1 	beq.w	8005868 <_printf_i+0x1c4>
 80056c6:	2f58      	cmp	r7, #88	@ 0x58
 80056c8:	f000 80b8 	beq.w	800583c <_printf_i+0x198>
 80056cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056d4:	e03a      	b.n	800574c <_printf_i+0xa8>
 80056d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056da:	2b15      	cmp	r3, #21
 80056dc:	d8f6      	bhi.n	80056cc <_printf_i+0x28>
 80056de:	a101      	add	r1, pc, #4	@ (adr r1, 80056e4 <_printf_i+0x40>)
 80056e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056e4:	0800573d 	.word	0x0800573d
 80056e8:	08005751 	.word	0x08005751
 80056ec:	080056cd 	.word	0x080056cd
 80056f0:	080056cd 	.word	0x080056cd
 80056f4:	080056cd 	.word	0x080056cd
 80056f8:	080056cd 	.word	0x080056cd
 80056fc:	08005751 	.word	0x08005751
 8005700:	080056cd 	.word	0x080056cd
 8005704:	080056cd 	.word	0x080056cd
 8005708:	080056cd 	.word	0x080056cd
 800570c:	080056cd 	.word	0x080056cd
 8005710:	0800584f 	.word	0x0800584f
 8005714:	0800577b 	.word	0x0800577b
 8005718:	08005809 	.word	0x08005809
 800571c:	080056cd 	.word	0x080056cd
 8005720:	080056cd 	.word	0x080056cd
 8005724:	08005871 	.word	0x08005871
 8005728:	080056cd 	.word	0x080056cd
 800572c:	0800577b 	.word	0x0800577b
 8005730:	080056cd 	.word	0x080056cd
 8005734:	080056cd 	.word	0x080056cd
 8005738:	08005811 	.word	0x08005811
 800573c:	6833      	ldr	r3, [r6, #0]
 800573e:	1d1a      	adds	r2, r3, #4
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6032      	str	r2, [r6, #0]
 8005744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005748:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800574c:	2301      	movs	r3, #1
 800574e:	e09c      	b.n	800588a <_printf_i+0x1e6>
 8005750:	6833      	ldr	r3, [r6, #0]
 8005752:	6820      	ldr	r0, [r4, #0]
 8005754:	1d19      	adds	r1, r3, #4
 8005756:	6031      	str	r1, [r6, #0]
 8005758:	0606      	lsls	r6, r0, #24
 800575a:	d501      	bpl.n	8005760 <_printf_i+0xbc>
 800575c:	681d      	ldr	r5, [r3, #0]
 800575e:	e003      	b.n	8005768 <_printf_i+0xc4>
 8005760:	0645      	lsls	r5, r0, #25
 8005762:	d5fb      	bpl.n	800575c <_printf_i+0xb8>
 8005764:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005768:	2d00      	cmp	r5, #0
 800576a:	da03      	bge.n	8005774 <_printf_i+0xd0>
 800576c:	232d      	movs	r3, #45	@ 0x2d
 800576e:	426d      	negs	r5, r5
 8005770:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005774:	4858      	ldr	r0, [pc, #352]	@ (80058d8 <_printf_i+0x234>)
 8005776:	230a      	movs	r3, #10
 8005778:	e011      	b.n	800579e <_printf_i+0xfa>
 800577a:	6821      	ldr	r1, [r4, #0]
 800577c:	6833      	ldr	r3, [r6, #0]
 800577e:	0608      	lsls	r0, r1, #24
 8005780:	f853 5b04 	ldr.w	r5, [r3], #4
 8005784:	d402      	bmi.n	800578c <_printf_i+0xe8>
 8005786:	0649      	lsls	r1, r1, #25
 8005788:	bf48      	it	mi
 800578a:	b2ad      	uxthmi	r5, r5
 800578c:	2f6f      	cmp	r7, #111	@ 0x6f
 800578e:	4852      	ldr	r0, [pc, #328]	@ (80058d8 <_printf_i+0x234>)
 8005790:	6033      	str	r3, [r6, #0]
 8005792:	bf14      	ite	ne
 8005794:	230a      	movne	r3, #10
 8005796:	2308      	moveq	r3, #8
 8005798:	2100      	movs	r1, #0
 800579a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800579e:	6866      	ldr	r6, [r4, #4]
 80057a0:	60a6      	str	r6, [r4, #8]
 80057a2:	2e00      	cmp	r6, #0
 80057a4:	db05      	blt.n	80057b2 <_printf_i+0x10e>
 80057a6:	6821      	ldr	r1, [r4, #0]
 80057a8:	432e      	orrs	r6, r5
 80057aa:	f021 0104 	bic.w	r1, r1, #4
 80057ae:	6021      	str	r1, [r4, #0]
 80057b0:	d04b      	beq.n	800584a <_printf_i+0x1a6>
 80057b2:	4616      	mov	r6, r2
 80057b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80057b8:	fb03 5711 	mls	r7, r3, r1, r5
 80057bc:	5dc7      	ldrb	r7, [r0, r7]
 80057be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057c2:	462f      	mov	r7, r5
 80057c4:	42bb      	cmp	r3, r7
 80057c6:	460d      	mov	r5, r1
 80057c8:	d9f4      	bls.n	80057b4 <_printf_i+0x110>
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d10b      	bne.n	80057e6 <_printf_i+0x142>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	07df      	lsls	r7, r3, #31
 80057d2:	d508      	bpl.n	80057e6 <_printf_i+0x142>
 80057d4:	6923      	ldr	r3, [r4, #16]
 80057d6:	6861      	ldr	r1, [r4, #4]
 80057d8:	4299      	cmp	r1, r3
 80057da:	bfde      	ittt	le
 80057dc:	2330      	movle	r3, #48	@ 0x30
 80057de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057e6:	1b92      	subs	r2, r2, r6
 80057e8:	6122      	str	r2, [r4, #16]
 80057ea:	f8cd a000 	str.w	sl, [sp]
 80057ee:	464b      	mov	r3, r9
 80057f0:	aa03      	add	r2, sp, #12
 80057f2:	4621      	mov	r1, r4
 80057f4:	4640      	mov	r0, r8
 80057f6:	f7ff fee7 	bl	80055c8 <_printf_common>
 80057fa:	3001      	adds	r0, #1
 80057fc:	d14a      	bne.n	8005894 <_printf_i+0x1f0>
 80057fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005802:	b004      	add	sp, #16
 8005804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005808:	6823      	ldr	r3, [r4, #0]
 800580a:	f043 0320 	orr.w	r3, r3, #32
 800580e:	6023      	str	r3, [r4, #0]
 8005810:	4832      	ldr	r0, [pc, #200]	@ (80058dc <_printf_i+0x238>)
 8005812:	2778      	movs	r7, #120	@ 0x78
 8005814:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	6831      	ldr	r1, [r6, #0]
 800581c:	061f      	lsls	r7, r3, #24
 800581e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005822:	d402      	bmi.n	800582a <_printf_i+0x186>
 8005824:	065f      	lsls	r7, r3, #25
 8005826:	bf48      	it	mi
 8005828:	b2ad      	uxthmi	r5, r5
 800582a:	6031      	str	r1, [r6, #0]
 800582c:	07d9      	lsls	r1, r3, #31
 800582e:	bf44      	itt	mi
 8005830:	f043 0320 	orrmi.w	r3, r3, #32
 8005834:	6023      	strmi	r3, [r4, #0]
 8005836:	b11d      	cbz	r5, 8005840 <_printf_i+0x19c>
 8005838:	2310      	movs	r3, #16
 800583a:	e7ad      	b.n	8005798 <_printf_i+0xf4>
 800583c:	4826      	ldr	r0, [pc, #152]	@ (80058d8 <_printf_i+0x234>)
 800583e:	e7e9      	b.n	8005814 <_printf_i+0x170>
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	f023 0320 	bic.w	r3, r3, #32
 8005846:	6023      	str	r3, [r4, #0]
 8005848:	e7f6      	b.n	8005838 <_printf_i+0x194>
 800584a:	4616      	mov	r6, r2
 800584c:	e7bd      	b.n	80057ca <_printf_i+0x126>
 800584e:	6833      	ldr	r3, [r6, #0]
 8005850:	6825      	ldr	r5, [r4, #0]
 8005852:	6961      	ldr	r1, [r4, #20]
 8005854:	1d18      	adds	r0, r3, #4
 8005856:	6030      	str	r0, [r6, #0]
 8005858:	062e      	lsls	r6, r5, #24
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	d501      	bpl.n	8005862 <_printf_i+0x1be>
 800585e:	6019      	str	r1, [r3, #0]
 8005860:	e002      	b.n	8005868 <_printf_i+0x1c4>
 8005862:	0668      	lsls	r0, r5, #25
 8005864:	d5fb      	bpl.n	800585e <_printf_i+0x1ba>
 8005866:	8019      	strh	r1, [r3, #0]
 8005868:	2300      	movs	r3, #0
 800586a:	6123      	str	r3, [r4, #16]
 800586c:	4616      	mov	r6, r2
 800586e:	e7bc      	b.n	80057ea <_printf_i+0x146>
 8005870:	6833      	ldr	r3, [r6, #0]
 8005872:	1d1a      	adds	r2, r3, #4
 8005874:	6032      	str	r2, [r6, #0]
 8005876:	681e      	ldr	r6, [r3, #0]
 8005878:	6862      	ldr	r2, [r4, #4]
 800587a:	2100      	movs	r1, #0
 800587c:	4630      	mov	r0, r6
 800587e:	f7fa fcc7 	bl	8000210 <memchr>
 8005882:	b108      	cbz	r0, 8005888 <_printf_i+0x1e4>
 8005884:	1b80      	subs	r0, r0, r6
 8005886:	6060      	str	r0, [r4, #4]
 8005888:	6863      	ldr	r3, [r4, #4]
 800588a:	6123      	str	r3, [r4, #16]
 800588c:	2300      	movs	r3, #0
 800588e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005892:	e7aa      	b.n	80057ea <_printf_i+0x146>
 8005894:	6923      	ldr	r3, [r4, #16]
 8005896:	4632      	mov	r2, r6
 8005898:	4649      	mov	r1, r9
 800589a:	4640      	mov	r0, r8
 800589c:	47d0      	blx	sl
 800589e:	3001      	adds	r0, #1
 80058a0:	d0ad      	beq.n	80057fe <_printf_i+0x15a>
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	079b      	lsls	r3, r3, #30
 80058a6:	d413      	bmi.n	80058d0 <_printf_i+0x22c>
 80058a8:	68e0      	ldr	r0, [r4, #12]
 80058aa:	9b03      	ldr	r3, [sp, #12]
 80058ac:	4298      	cmp	r0, r3
 80058ae:	bfb8      	it	lt
 80058b0:	4618      	movlt	r0, r3
 80058b2:	e7a6      	b.n	8005802 <_printf_i+0x15e>
 80058b4:	2301      	movs	r3, #1
 80058b6:	4632      	mov	r2, r6
 80058b8:	4649      	mov	r1, r9
 80058ba:	4640      	mov	r0, r8
 80058bc:	47d0      	blx	sl
 80058be:	3001      	adds	r0, #1
 80058c0:	d09d      	beq.n	80057fe <_printf_i+0x15a>
 80058c2:	3501      	adds	r5, #1
 80058c4:	68e3      	ldr	r3, [r4, #12]
 80058c6:	9903      	ldr	r1, [sp, #12]
 80058c8:	1a5b      	subs	r3, r3, r1
 80058ca:	42ab      	cmp	r3, r5
 80058cc:	dcf2      	bgt.n	80058b4 <_printf_i+0x210>
 80058ce:	e7eb      	b.n	80058a8 <_printf_i+0x204>
 80058d0:	2500      	movs	r5, #0
 80058d2:	f104 0619 	add.w	r6, r4, #25
 80058d6:	e7f5      	b.n	80058c4 <_printf_i+0x220>
 80058d8:	08006745 	.word	0x08006745
 80058dc:	08006756 	.word	0x08006756

080058e0 <__sflush_r>:
 80058e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80058e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e8:	0716      	lsls	r6, r2, #28
 80058ea:	4605      	mov	r5, r0
 80058ec:	460c      	mov	r4, r1
 80058ee:	d454      	bmi.n	800599a <__sflush_r+0xba>
 80058f0:	684b      	ldr	r3, [r1, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	dc02      	bgt.n	80058fc <__sflush_r+0x1c>
 80058f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	dd48      	ble.n	800598e <__sflush_r+0xae>
 80058fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80058fe:	2e00      	cmp	r6, #0
 8005900:	d045      	beq.n	800598e <__sflush_r+0xae>
 8005902:	2300      	movs	r3, #0
 8005904:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005908:	682f      	ldr	r7, [r5, #0]
 800590a:	6a21      	ldr	r1, [r4, #32]
 800590c:	602b      	str	r3, [r5, #0]
 800590e:	d030      	beq.n	8005972 <__sflush_r+0x92>
 8005910:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005912:	89a3      	ldrh	r3, [r4, #12]
 8005914:	0759      	lsls	r1, r3, #29
 8005916:	d505      	bpl.n	8005924 <__sflush_r+0x44>
 8005918:	6863      	ldr	r3, [r4, #4]
 800591a:	1ad2      	subs	r2, r2, r3
 800591c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800591e:	b10b      	cbz	r3, 8005924 <__sflush_r+0x44>
 8005920:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005922:	1ad2      	subs	r2, r2, r3
 8005924:	2300      	movs	r3, #0
 8005926:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005928:	6a21      	ldr	r1, [r4, #32]
 800592a:	4628      	mov	r0, r5
 800592c:	47b0      	blx	r6
 800592e:	1c43      	adds	r3, r0, #1
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	d106      	bne.n	8005942 <__sflush_r+0x62>
 8005934:	6829      	ldr	r1, [r5, #0]
 8005936:	291d      	cmp	r1, #29
 8005938:	d82b      	bhi.n	8005992 <__sflush_r+0xb2>
 800593a:	4a2a      	ldr	r2, [pc, #168]	@ (80059e4 <__sflush_r+0x104>)
 800593c:	40ca      	lsrs	r2, r1
 800593e:	07d6      	lsls	r6, r2, #31
 8005940:	d527      	bpl.n	8005992 <__sflush_r+0xb2>
 8005942:	2200      	movs	r2, #0
 8005944:	6062      	str	r2, [r4, #4]
 8005946:	04d9      	lsls	r1, r3, #19
 8005948:	6922      	ldr	r2, [r4, #16]
 800594a:	6022      	str	r2, [r4, #0]
 800594c:	d504      	bpl.n	8005958 <__sflush_r+0x78>
 800594e:	1c42      	adds	r2, r0, #1
 8005950:	d101      	bne.n	8005956 <__sflush_r+0x76>
 8005952:	682b      	ldr	r3, [r5, #0]
 8005954:	b903      	cbnz	r3, 8005958 <__sflush_r+0x78>
 8005956:	6560      	str	r0, [r4, #84]	@ 0x54
 8005958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800595a:	602f      	str	r7, [r5, #0]
 800595c:	b1b9      	cbz	r1, 800598e <__sflush_r+0xae>
 800595e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005962:	4299      	cmp	r1, r3
 8005964:	d002      	beq.n	800596c <__sflush_r+0x8c>
 8005966:	4628      	mov	r0, r5
 8005968:	f7ff fa9c 	bl	8004ea4 <_free_r>
 800596c:	2300      	movs	r3, #0
 800596e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005970:	e00d      	b.n	800598e <__sflush_r+0xae>
 8005972:	2301      	movs	r3, #1
 8005974:	4628      	mov	r0, r5
 8005976:	47b0      	blx	r6
 8005978:	4602      	mov	r2, r0
 800597a:	1c50      	adds	r0, r2, #1
 800597c:	d1c9      	bne.n	8005912 <__sflush_r+0x32>
 800597e:	682b      	ldr	r3, [r5, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0c6      	beq.n	8005912 <__sflush_r+0x32>
 8005984:	2b1d      	cmp	r3, #29
 8005986:	d001      	beq.n	800598c <__sflush_r+0xac>
 8005988:	2b16      	cmp	r3, #22
 800598a:	d11e      	bne.n	80059ca <__sflush_r+0xea>
 800598c:	602f      	str	r7, [r5, #0]
 800598e:	2000      	movs	r0, #0
 8005990:	e022      	b.n	80059d8 <__sflush_r+0xf8>
 8005992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005996:	b21b      	sxth	r3, r3
 8005998:	e01b      	b.n	80059d2 <__sflush_r+0xf2>
 800599a:	690f      	ldr	r7, [r1, #16]
 800599c:	2f00      	cmp	r7, #0
 800599e:	d0f6      	beq.n	800598e <__sflush_r+0xae>
 80059a0:	0793      	lsls	r3, r2, #30
 80059a2:	680e      	ldr	r6, [r1, #0]
 80059a4:	bf08      	it	eq
 80059a6:	694b      	ldreq	r3, [r1, #20]
 80059a8:	600f      	str	r7, [r1, #0]
 80059aa:	bf18      	it	ne
 80059ac:	2300      	movne	r3, #0
 80059ae:	eba6 0807 	sub.w	r8, r6, r7
 80059b2:	608b      	str	r3, [r1, #8]
 80059b4:	f1b8 0f00 	cmp.w	r8, #0
 80059b8:	dde9      	ble.n	800598e <__sflush_r+0xae>
 80059ba:	6a21      	ldr	r1, [r4, #32]
 80059bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80059be:	4643      	mov	r3, r8
 80059c0:	463a      	mov	r2, r7
 80059c2:	4628      	mov	r0, r5
 80059c4:	47b0      	blx	r6
 80059c6:	2800      	cmp	r0, #0
 80059c8:	dc08      	bgt.n	80059dc <__sflush_r+0xfc>
 80059ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059d2:	81a3      	strh	r3, [r4, #12]
 80059d4:	f04f 30ff 	mov.w	r0, #4294967295
 80059d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059dc:	4407      	add	r7, r0
 80059de:	eba8 0800 	sub.w	r8, r8, r0
 80059e2:	e7e7      	b.n	80059b4 <__sflush_r+0xd4>
 80059e4:	20400001 	.word	0x20400001

080059e8 <_fflush_r>:
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	690b      	ldr	r3, [r1, #16]
 80059ec:	4605      	mov	r5, r0
 80059ee:	460c      	mov	r4, r1
 80059f0:	b913      	cbnz	r3, 80059f8 <_fflush_r+0x10>
 80059f2:	2500      	movs	r5, #0
 80059f4:	4628      	mov	r0, r5
 80059f6:	bd38      	pop	{r3, r4, r5, pc}
 80059f8:	b118      	cbz	r0, 8005a02 <_fflush_r+0x1a>
 80059fa:	6a03      	ldr	r3, [r0, #32]
 80059fc:	b90b      	cbnz	r3, 8005a02 <_fflush_r+0x1a>
 80059fe:	f7fe ffe5 	bl	80049cc <__sinit>
 8005a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f3      	beq.n	80059f2 <_fflush_r+0xa>
 8005a0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005a0c:	07d0      	lsls	r0, r2, #31
 8005a0e:	d404      	bmi.n	8005a1a <_fflush_r+0x32>
 8005a10:	0599      	lsls	r1, r3, #22
 8005a12:	d402      	bmi.n	8005a1a <_fflush_r+0x32>
 8005a14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a16:	f7ff fa3a 	bl	8004e8e <__retarget_lock_acquire_recursive>
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	f7ff ff5f 	bl	80058e0 <__sflush_r>
 8005a22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a24:	07da      	lsls	r2, r3, #31
 8005a26:	4605      	mov	r5, r0
 8005a28:	d4e4      	bmi.n	80059f4 <_fflush_r+0xc>
 8005a2a:	89a3      	ldrh	r3, [r4, #12]
 8005a2c:	059b      	lsls	r3, r3, #22
 8005a2e:	d4e1      	bmi.n	80059f4 <_fflush_r+0xc>
 8005a30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a32:	f7ff fa2d 	bl	8004e90 <__retarget_lock_release_recursive>
 8005a36:	e7dd      	b.n	80059f4 <_fflush_r+0xc>

08005a38 <__swhatbuf_r>:
 8005a38:	b570      	push	{r4, r5, r6, lr}
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a40:	2900      	cmp	r1, #0
 8005a42:	b096      	sub	sp, #88	@ 0x58
 8005a44:	4615      	mov	r5, r2
 8005a46:	461e      	mov	r6, r3
 8005a48:	da0d      	bge.n	8005a66 <__swhatbuf_r+0x2e>
 8005a4a:	89a3      	ldrh	r3, [r4, #12]
 8005a4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a50:	f04f 0100 	mov.w	r1, #0
 8005a54:	bf14      	ite	ne
 8005a56:	2340      	movne	r3, #64	@ 0x40
 8005a58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	6031      	str	r1, [r6, #0]
 8005a60:	602b      	str	r3, [r5, #0]
 8005a62:	b016      	add	sp, #88	@ 0x58
 8005a64:	bd70      	pop	{r4, r5, r6, pc}
 8005a66:	466a      	mov	r2, sp
 8005a68:	f000 f862 	bl	8005b30 <_fstat_r>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	dbec      	blt.n	8005a4a <__swhatbuf_r+0x12>
 8005a70:	9901      	ldr	r1, [sp, #4]
 8005a72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a7a:	4259      	negs	r1, r3
 8005a7c:	4159      	adcs	r1, r3
 8005a7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a82:	e7eb      	b.n	8005a5c <__swhatbuf_r+0x24>

08005a84 <__smakebuf_r>:
 8005a84:	898b      	ldrh	r3, [r1, #12]
 8005a86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a88:	079d      	lsls	r5, r3, #30
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	460c      	mov	r4, r1
 8005a8e:	d507      	bpl.n	8005aa0 <__smakebuf_r+0x1c>
 8005a90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005a94:	6023      	str	r3, [r4, #0]
 8005a96:	6123      	str	r3, [r4, #16]
 8005a98:	2301      	movs	r3, #1
 8005a9a:	6163      	str	r3, [r4, #20]
 8005a9c:	b003      	add	sp, #12
 8005a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aa0:	ab01      	add	r3, sp, #4
 8005aa2:	466a      	mov	r2, sp
 8005aa4:	f7ff ffc8 	bl	8005a38 <__swhatbuf_r>
 8005aa8:	9f00      	ldr	r7, [sp, #0]
 8005aaa:	4605      	mov	r5, r0
 8005aac:	4639      	mov	r1, r7
 8005aae:	4630      	mov	r0, r6
 8005ab0:	f7ff fa64 	bl	8004f7c <_malloc_r>
 8005ab4:	b948      	cbnz	r0, 8005aca <__smakebuf_r+0x46>
 8005ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aba:	059a      	lsls	r2, r3, #22
 8005abc:	d4ee      	bmi.n	8005a9c <__smakebuf_r+0x18>
 8005abe:	f023 0303 	bic.w	r3, r3, #3
 8005ac2:	f043 0302 	orr.w	r3, r3, #2
 8005ac6:	81a3      	strh	r3, [r4, #12]
 8005ac8:	e7e2      	b.n	8005a90 <__smakebuf_r+0xc>
 8005aca:	89a3      	ldrh	r3, [r4, #12]
 8005acc:	6020      	str	r0, [r4, #0]
 8005ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ad2:	81a3      	strh	r3, [r4, #12]
 8005ad4:	9b01      	ldr	r3, [sp, #4]
 8005ad6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005ada:	b15b      	cbz	r3, 8005af4 <__smakebuf_r+0x70>
 8005adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ae0:	4630      	mov	r0, r6
 8005ae2:	f000 f837 	bl	8005b54 <_isatty_r>
 8005ae6:	b128      	cbz	r0, 8005af4 <__smakebuf_r+0x70>
 8005ae8:	89a3      	ldrh	r3, [r4, #12]
 8005aea:	f023 0303 	bic.w	r3, r3, #3
 8005aee:	f043 0301 	orr.w	r3, r3, #1
 8005af2:	81a3      	strh	r3, [r4, #12]
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	431d      	orrs	r5, r3
 8005af8:	81a5      	strh	r5, [r4, #12]
 8005afa:	e7cf      	b.n	8005a9c <__smakebuf_r+0x18>

08005afc <memmove>:
 8005afc:	4288      	cmp	r0, r1
 8005afe:	b510      	push	{r4, lr}
 8005b00:	eb01 0402 	add.w	r4, r1, r2
 8005b04:	d902      	bls.n	8005b0c <memmove+0x10>
 8005b06:	4284      	cmp	r4, r0
 8005b08:	4623      	mov	r3, r4
 8005b0a:	d807      	bhi.n	8005b1c <memmove+0x20>
 8005b0c:	1e43      	subs	r3, r0, #1
 8005b0e:	42a1      	cmp	r1, r4
 8005b10:	d008      	beq.n	8005b24 <memmove+0x28>
 8005b12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b1a:	e7f8      	b.n	8005b0e <memmove+0x12>
 8005b1c:	4402      	add	r2, r0
 8005b1e:	4601      	mov	r1, r0
 8005b20:	428a      	cmp	r2, r1
 8005b22:	d100      	bne.n	8005b26 <memmove+0x2a>
 8005b24:	bd10      	pop	{r4, pc}
 8005b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b2e:	e7f7      	b.n	8005b20 <memmove+0x24>

08005b30 <_fstat_r>:
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	4d07      	ldr	r5, [pc, #28]	@ (8005b50 <_fstat_r+0x20>)
 8005b34:	2300      	movs	r3, #0
 8005b36:	4604      	mov	r4, r0
 8005b38:	4608      	mov	r0, r1
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	602b      	str	r3, [r5, #0]
 8005b3e:	f7fc f987 	bl	8001e50 <_fstat>
 8005b42:	1c43      	adds	r3, r0, #1
 8005b44:	d102      	bne.n	8005b4c <_fstat_r+0x1c>
 8005b46:	682b      	ldr	r3, [r5, #0]
 8005b48:	b103      	cbz	r3, 8005b4c <_fstat_r+0x1c>
 8005b4a:	6023      	str	r3, [r4, #0]
 8005b4c:	bd38      	pop	{r3, r4, r5, pc}
 8005b4e:	bf00      	nop
 8005b50:	200004bc 	.word	0x200004bc

08005b54 <_isatty_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4d06      	ldr	r5, [pc, #24]	@ (8005b70 <_isatty_r+0x1c>)
 8005b58:	2300      	movs	r3, #0
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	4608      	mov	r0, r1
 8005b5e:	602b      	str	r3, [r5, #0]
 8005b60:	f7fc f986 	bl	8001e70 <_isatty>
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	d102      	bne.n	8005b6e <_isatty_r+0x1a>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	b103      	cbz	r3, 8005b6e <_isatty_r+0x1a>
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	bd38      	pop	{r3, r4, r5, pc}
 8005b70:	200004bc 	.word	0x200004bc

08005b74 <_sbrk_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4d06      	ldr	r5, [pc, #24]	@ (8005b90 <_sbrk_r+0x1c>)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	602b      	str	r3, [r5, #0]
 8005b80:	f7fc f98e 	bl	8001ea0 <_sbrk>
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	d102      	bne.n	8005b8e <_sbrk_r+0x1a>
 8005b88:	682b      	ldr	r3, [r5, #0]
 8005b8a:	b103      	cbz	r3, 8005b8e <_sbrk_r+0x1a>
 8005b8c:	6023      	str	r3, [r4, #0]
 8005b8e:	bd38      	pop	{r3, r4, r5, pc}
 8005b90:	200004bc 	.word	0x200004bc

08005b94 <memcpy>:
 8005b94:	440a      	add	r2, r1
 8005b96:	4291      	cmp	r1, r2
 8005b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b9c:	d100      	bne.n	8005ba0 <memcpy+0xc>
 8005b9e:	4770      	bx	lr
 8005ba0:	b510      	push	{r4, lr}
 8005ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005baa:	4291      	cmp	r1, r2
 8005bac:	d1f9      	bne.n	8005ba2 <memcpy+0xe>
 8005bae:	bd10      	pop	{r4, pc}

08005bb0 <_realloc_r>:
 8005bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb4:	4607      	mov	r7, r0
 8005bb6:	4614      	mov	r4, r2
 8005bb8:	460d      	mov	r5, r1
 8005bba:	b921      	cbnz	r1, 8005bc6 <_realloc_r+0x16>
 8005bbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	f7ff b9db 	b.w	8004f7c <_malloc_r>
 8005bc6:	b92a      	cbnz	r2, 8005bd4 <_realloc_r+0x24>
 8005bc8:	f7ff f96c 	bl	8004ea4 <_free_r>
 8005bcc:	4625      	mov	r5, r4
 8005bce:	4628      	mov	r0, r5
 8005bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd4:	f000 f81a 	bl	8005c0c <_malloc_usable_size_r>
 8005bd8:	4284      	cmp	r4, r0
 8005bda:	4606      	mov	r6, r0
 8005bdc:	d802      	bhi.n	8005be4 <_realloc_r+0x34>
 8005bde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005be2:	d8f4      	bhi.n	8005bce <_realloc_r+0x1e>
 8005be4:	4621      	mov	r1, r4
 8005be6:	4638      	mov	r0, r7
 8005be8:	f7ff f9c8 	bl	8004f7c <_malloc_r>
 8005bec:	4680      	mov	r8, r0
 8005bee:	b908      	cbnz	r0, 8005bf4 <_realloc_r+0x44>
 8005bf0:	4645      	mov	r5, r8
 8005bf2:	e7ec      	b.n	8005bce <_realloc_r+0x1e>
 8005bf4:	42b4      	cmp	r4, r6
 8005bf6:	4622      	mov	r2, r4
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	bf28      	it	cs
 8005bfc:	4632      	movcs	r2, r6
 8005bfe:	f7ff ffc9 	bl	8005b94 <memcpy>
 8005c02:	4629      	mov	r1, r5
 8005c04:	4638      	mov	r0, r7
 8005c06:	f7ff f94d 	bl	8004ea4 <_free_r>
 8005c0a:	e7f1      	b.n	8005bf0 <_realloc_r+0x40>

08005c0c <_malloc_usable_size_r>:
 8005c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c10:	1f18      	subs	r0, r3, #4
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	bfbc      	itt	lt
 8005c16:	580b      	ldrlt	r3, [r1, r0]
 8005c18:	18c0      	addlt	r0, r0, r3
 8005c1a:	4770      	bx	lr

08005c1c <_init>:
 8005c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1e:	bf00      	nop
 8005c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c22:	bc08      	pop	{r3}
 8005c24:	469e      	mov	lr, r3
 8005c26:	4770      	bx	lr

08005c28 <_fini>:
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2a:	bf00      	nop
 8005c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2e:	bc08      	pop	{r3}
 8005c30:	469e      	mov	lr, r3
 8005c32:	4770      	bx	lr
